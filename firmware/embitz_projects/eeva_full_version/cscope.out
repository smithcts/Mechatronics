cscope 15 $HOME\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version"               0001045271
	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version\include\robot_settings.h

1 #i‚de‡
ROBOT_SETTINGS_H_INCLUDED


2 
	#ROBOT_SETTINGS_H_INCLUDED


	)

4 
	~<c°döt
>

7 c⁄° 
öt32_t
 
FIRMWARE_VERSION
;

8 c⁄° 
WHEEL_RADIUS
;

9 c⁄° 
WHEEL_BASE
;

10 c⁄° 
GEAR_RATIO
;

11 c⁄° 
DIST_PER_COUNT
;

12 c⁄° 
ENCODER_2_DIST
;

13 c⁄° 
ENCODER_2_THETA
;

14 c⁄° 
MOTOR_SIGNS
[2];

15 c⁄° 
ENCODER_SCALES
[2];

16 c⁄° 
K_DEFAULT
[4];

17 c⁄° 
ACCEL_SCALES
[3];

18 c⁄° 
ACCEL_OFFSETS
[3];

19 c⁄° 
BATTERY_SCALE
;

20 c⁄° 
BATTERY_OFFSET
;

21 c⁄° 
FULL_BATTERY_VOLTAGE
;

22 c⁄° 
LOW_BATTERY_VOLTAGE
;

23 c⁄° 
CRITICAL_BATTERY_VOLTAGE
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version\source\main.cpp

2 
	~<c°dio
>

3 
	~"scheduÀr.h
"

4 
	~"utû_as£π.h
"

5 
	~"debug_¥ötf.h
"

8 
	~"com∂emíèry_fûãr_èsk.h
"

9 
	~"maö_c⁄åﬁ_èsk.h
"

10 
	~"ãÀmëry_ª˚ive_èsk.h
"

11 
	~"°©us_upd©e_èsk.h
"

12 
	~"Àds_èsk.h
"

13 
	~"modes_èsk.h
"

14 
	~"ãÀmëry_£nd_èsk.h
"

17 
Sy°emTimî
 
	gsys_timî
;

20 
MaöC⁄åﬁTask
 
maö_c⁄åﬁ_èsk
 (1000);

21 
Com∂emíèryFûãrTask
 
comp_fûãr_èsk
 (500);

22 
SètusUpd©eTask
 
°©us_upd©e_èsk
 (5);

23 
LedsTask
 
Àds_èsk
 (20);

24 
ModesTask
 
modes_èsk
 (20);

27 
TñemërySídTask
 
£nd_èsk
 (100);

30 
TñemëryRe˚iveTask
 
	gª˚ive_èsk
;

33 
	gScheduÀr
::
ScheduÀr
 
scheduÀr
;

36 
	$maö
()

38 
	`debug_¥ötf
("Hi I'm Eeva.");

42 
ScheduÀr
::
Task
 * 
èsks
[] =

44 &
maö_c⁄åﬁ_èsk
,

45 &
comp_fûãr_èsk
,

46 &
£nd_èsk
,

47 &
ª˚ive_èsk
,

48 &
Àds_èsk
,

49 &
modes_èsk
,

50 &
°©us_upd©e_èsk
,

53 c⁄° 
uöt32_t
 
numbî_of_èsks
 = (
èsks
) / (tasks[0]);

56 
scheduÀr
.
	`ª°‹eI¡îru±s
(
åue
);

59 
uöt32_t
 
i
 = 0; i < 
numbî_of_èsks
; ++i)

61 
boﬁ
 
ªgi°øti⁄_suc˚ss
 = 
scheduÀr
.
	`ªgi°îTask
(*
èsks
[
i
]);

62 
	`as£π_msg
(
ªgi°øti⁄_suc˚ss
, 
ASSERT_STOP
, "FaûedÅÿªgi°îÅask \"%s\"", 
èsks
[
i
]->
	`«me
());

65 
	`debug_¥ötf
("Everything is setup correctly.");

68 
scheduÀr
.
	`scheduÀTasks
();

71 
åue
);

73 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version\source\robot_settings.cpp

3 
	~"physiˇl_c⁄°™ts.h
"

4 
	~"robŸ_£âögs.h
"

7 c⁄° 
öt32_t
 
	gFIRMWARE_VERSION
 = 6;

10 c⁄° 
	gWHEEL_RADIUS
 = 0.03f;

13 c⁄° 
	gWHEEL_BASE
 = 0.089f;

16 c⁄° 
	gGEAR_RATIO
 = 29.86f;

19 c⁄° 
	gDIST_PER_COUNT
 = 12.0f;

22 c⁄° 
	gENCODER_2_DIST
 = 
WHEEL_RADIUS
 * 2.0‡* 
PI
 / 
GEAR_RATIO
 / 
DIST_PER_COUNT
;

25 c⁄° 
	gENCODER_2_THETA
 = 2.0‡* 
PI
 / 
GEAR_RATIO
 / 
DIST_PER_COUNT
;

28 c⁄° 
	gMOTOR_SIGNS
[2] = { 1.0f, -1.0f };

32 c⁄° 
	gENCODER_SCALES
[2] = { 
ENCODER_2_DIST
, -ENCODER_2_DIST };

35 c⁄° 
	gK_DEFAULT
[4] = { 1.656f, 0.10f, 0.05f, 0.04f };

38 c⁄° 
	gACCEL_SCALES
[3] = { 1.0f, 1.0f, 1.0f };

39 c⁄° 
	gACCEL_OFFSETS
[3] = { 0.0f, 0.0f, 0.0f };

42 c⁄° 
	gBATTERY_SCALE
 = 4.286f;

43 c⁄° 
	gBATTERY_OFFSET
 = 0.343f;

46 c⁄° 
	gFULL_BATTERY_VOLTAGE
 = 7.4;

49 c⁄° 
	gLOW_BATTERY_VOLTAGE
 = 6.8;

52 c⁄° 
	gCRITICAL_BATTERY_VOLTAGE
 = 6.3;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\globs.cpp

3 
	#DEFINE_GLOBS


	)

4 
	~"globs.h
"

5 #unde‡
DEFINE_GLOBS


8 
GlobBa£
 * 
	gglobs
[
NUM_GLOBS
];

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_base.h

1 #i‚de‡
GLOB_BASE_H_INCLUDED


2 
	#GLOB_BASE_H_INCLUDED


	)

5 
	~<c°rög
>

6 
	~"scheduÀr.h
"

9 ˛as†
	cGlobBa£


11 
	mpublic
:

14 
	$GlobBa£
(
uöt8_t
 
id
, uöt8_à
num_byãs
, 
uöt16_t
 
num_ö°™˚s
, *
d©a
):

15 
	`id_
(
id
),

16 
	`num_byãs_
(
num_byãs
),

17 
	`num_ö°™˚s_
(
num_ö°™˚s
),

18 
	`d©a_±r_
(
d©a
),

19 
	$time_°amp_
(0)

23 
uöt8_t
 
	$gë_id
(Ëc⁄° {  
id_
; 
	}
}

24 
uöt16_t
 
	$gë_num_ö°™˚s
(Ëc⁄° {  
num_ö°™˚s_
; 
	}
}

25 
uöt8_t
 
	$gë_num_byãs
(Ëc⁄° {  
num_byãs_
; 
	}
}

26 c⁄° * 
	$gë_d©a_poöãr
(Ëc⁄° {  
d©a_±r_
; 
	}
}

29 
	$gë_time°amp
() const

31 
cuºít_time°amp
;

32 
boﬁ
 
íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

33 
cuºít_time°amp
 = 
time_°amp_
;

34 
scheduÀr
.
	`ª°‹eI¡îru±s
(
íabÀd
);

35  
cuºít_time°amp
;

36 
	}
}

40 
boﬁ
 
	$c›y_to_buf„r
(* 
buf„r
, 
uöt16_t
 
ö°™˚
) const

42 i‡((
ö°™˚
 =0Ë|| (ö°™˚ > 
num_ö°™˚s_
)Ë{  
Ál£
; }

45 
uöt32_t
 
ö°™˚_off£t
 = ((uöt32_t)(
ö°™˚
-1)Ë* 
num_byãs_
;

47 
uöt32_t
 
ö°™˚_±r
 = (uöt32_t)
d©a_±r_
 + 
ö°™˚_off£t
;

50 
boﬁ
 
íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

51 
	`mem˝y
(
buf„r
, (c⁄° *)
ö°™˚_±r
, 
num_byãs_
);

52 
scheduÀr
.
	`ª°‹eI¡îru±s
(
íabÀd
);

54  
åue
;

55 
	}
}

57 
	g¥Ÿe˘ed
:

60 c⁄° 
uöt8_t
 
id_
;

63 c⁄° 
uöt8_t
 
	gnum_byãs_
;

66 c⁄° 
uöt16_t
 
	gnum_ö°™˚s_
;

69 c⁄° * 
	gd©a_±r_
;

72 
	gtime_°amp_
;

78 
GlobBa£
 * 
globs
[];

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_constants.h

3 #i‚de‡
GLOB_CONSTANTS_H_INCLUDED


4 
	#GLOB_CONSTANTS_H_INCLUDED


	)

7 
uöt8_t
 
	tglo_robŸ_comm™d_t
;

10 
	mROBOT_COMMAND_START
,

11 
	mROBOT_COMMAND_STOP
,

12 
	mROBOT_COMMAND_RESET
,

13 
	mROBOT_COMMAND_TIME_TASKS
,

17 
uöt8_t
 
	tglo_›î©ög_°©e_t
;

20 
	mSTATE_STOPPED
,

21 
	mSTATE_INITIALIZING
,

22 
	mSTATE_NORMAL


26 
uöt8_t
 
	tglo_maö_modes_t
;

29 
	mMAIN_MODE_BALANCE
,

30 
	mMAIN_MODE_HORIZONTAL
,

31 
	mMAIN_MODE_LINE_FOLLOWING
,

32 
	mMAIN_MODE_EXPERIMENT
,

33 
	mMAIN_MODE_CUSTOM
,

34 
	mMAIN_MODE_RACE
,

36 
	mNUM_MAIN_MODES


40 
uöt8_t
 
	tglo_ex≥rimít_sub_modes_t
;

43 
	mEXPERIMENT_NONE_SELECTED
,

44 
	mEXPERIMENT_MOTOR_SPEED_CONTROL
,

45 
	mEXPERIMENT_MOTOR_POSITION_CONTROL
,

46 
	mEXPERIMENT_NOT_IMPLEMENTED
,

48 
	mNUM_EXPERIMENTS


52 
uöt8_t
 
	tglo_îr‹_codes_t
;

55 
	mERROR_CODE_CRICITAL_BATTERY
 = 1,

59 
uöt8_t
 
	tglo_wave_ty≥_t
;

62 
	mWAVE_SINE
,

63 
	mWAVE_SQUARE
,

64 
	mWAVE_TRIANGLE
,

65 
	mWAVE_TRAPEZOIDAL
,

66 
	mWAVE_CONSTANT


70 
uöt8_t
 
	tglo_wave_°©e_t
;

73 
	mWAVE_STOPPED
,

74 
	mWAVE_READY_TO_RUN
,

75 
	mWAVE_STARTING_UP
,

76 
	mWAVE_STARTED
,

80 
uöt32_t
 
	tdrivög_comm™d_id_t
;

83 
	mDRIVING_COMMAND_FORWARD
 = 1,

84 
	mDRIVING_COMMAND_REVERSE
 = 2,

85 
	mDRIVING_COMMAND_RIGHT
 = 4,

86 
	mDRIVING_COMMAND_LEFT
 = 8,

87 
	mDRIVING_COMMAND_STOP
 = 16,

88 
	mDRIVING_COMMAND_DIRECT_COMMAND
 = 32,

92 
uöt8_t
 
	tglo_pid_id_t
;

95 
	mPID_ID_LEFT_SPEED_CONTROLLER
,

96 
	mPID_ID_RIGHT_SPEED_CONTROLLER
,

97 
	mPID_ID_YAW_CONTROLLER
,

98 
	mPID_ID_BALANCE_TILT_CONTROLLER
,

99 
	mPID_ID_BALANCE_POSITION_CONTROLLER
,

100 
	mPID_ID_LINE_TRACK_CONTROLLER
,

101 
	mPID_ID_LEFT_POSITION_CONTROLLER
,

102 
	mPID_ID_RIGHT_POSITION_CONTROLLER
,

104 
	mNUM_PID_CONTROLLERS


110 
	mTELEMETRY_TEXT_SIZE
 = 200

113 
	emaze_mode_t


115 
	mTRACK_LINE
,

116 
	mADVANCE
,

117 
	mTURN_LEFT
,

118 
	mTURN_RIGHT
,

119 
	mTERMINATION
,

120 
	mTURN_AROUND


123 
	etu∫_mode_t


125 
	mLEFT
,

126 
	mRIGHT
,

127 
	mAROUND


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_template.h

1 #i‚de‡
GLOB_TEMPLATE_H_INCLUDED


2 
	#GLOB_TEMPLATE_H_INCLUDED


	)

5 
	~"glob_ba£.h
"

9 
	gãm∂©e
 <
ty≥«me
 
	gobje˘_ty≥
, c⁄° 
uöt16_t
 
	gnum_ö°™˚s
, 
˛ass
 
	gOw√rTask
>

10 ˛as†
	cGlobTem∂©e
 : 
public
 
GlobBa£


13 
‰õnd
 
Ow√rTask
;

15 
	mpublic
:

18 
GlobTem∂©e
(
uöt8_t
 
id
);

23 
ªad
(
obje˘_ty≥
 *
c›y
, 
uöt16_t
 
ö°™˚
=1);

25 
	m¥iv©e
:

28 
boﬁ
 
publish
(
obje˘_ty≥
 c⁄° * 
d©a
, 
uöt16_t
 
ö°™˚
=1);

31 
obje˘_ty≥
 
	mö°™˚s_
[
num_ö°™˚s
];

36 
	gãm∂©e
 <
ty≥«me
 
	gobje˘_ty≥
, 
uöt16_t
 
	gnum_ö°™˚s
, 
˛ass
 
	gOw√rTask
>

37 
	gGlobTem∂©e
<
	gobje˘_ty≥
, 
	gnum_ö°™˚s
, 
	gOw√rTask
>::
	$GlobTem∂©e
(
uöt8_t
 
id
) :

38 
	`GlobBa£
(
id
, (
obje˘_ty≥
), 
num_ö°™˚s
, (*)&(
ö°™˚s_
))

40 
globs
[
id
] = 
this
;

41 
	}
}

44 
	gãm∂©e
 <
ty≥«me
 
	gobje˘_ty≥
, 
uöt16_t
 
	gnum_ö°™˚s
, 
˛ass
 
	gOw√rTask
>

45 
	gGlobTem∂©e
<
	gobje˘_ty≥
, 
	gnum_ö°™˚s
, 
	gOw√rTask
>::
	$ªad
(
obje˘_ty≥
 * 
c›y
, 
uöt16_t
 
ö°™˚
)

47 
time_°amp
 = 0.0;

49 i‡((
ö°™˚
 =0Ë|| (ö°™˚ > 
num_ö°™˚s
Ë|| (
c›y
 =
NULL
))

54 
boﬁ
 
íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

56 
	`mem˝y
((*)
c›y
, (c⁄° *)&(
ö°™˚s_
[
ö°™˚
-1]), 
num_byãs_
);

57 
time_°amp
 = 
time_°amp_
;

59 
scheduÀr
.
	`ª°‹eI¡îru±s
(
íabÀd
);

61  
time_°amp
;

62 
	}
}

65 
	gãm∂©e
 <
ty≥«me
 
	gobje˘_ty≥
, 
uöt16_t
 
	gnum_ö°™˚s
, 
˛ass
 
	gOw√rTask
>

66 
boﬁ
 
	gGlobTem∂©e
<
	gobje˘_ty≥
, 
	gnum_ö°™˚s
, 
	gOw√rTask
>::
	$publish
(
obje˘_ty≥
 c⁄° * 
√w_d©a
, 
uöt16_t
 
ö°™˚
)

68 i‡((
ö°™˚
 =0Ë|| (ö°™˚ > 
num_ö°™˚s
Ë|| (
√w_d©a
 =
NULL
))

70  
Ál£
;

73 
boﬁ
 
íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

75 
	`mem˝y
((*)(
ö°™˚s_
 + (
ö°™˚
-1)), (c⁄° *)
√w_d©a
, 
num_byãs_
);

76 
time_°amp_
 = 
sys_timî
.
	`£c⁄ds
();

78 
scheduÀr
.
	`ª°‹eI¡îru±s
(
íabÀd
);

80  
åue
;

81 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_types.h

5 #i‚de‡
GLOB_TYPES_H_INCLUDED


6 
	#GLOB_TYPES_H_INCLUDED


	)

9 
	~<c°döt
>

10 
	~"glob_c⁄°™ts.h
"

16 
	mlöór_vñocôy
;

17 
	m™guœr_vñocôy
;

19 } 
	tglo_mŸi⁄_comm™ds_t
;

25 
	mgyros
[3];

26 
	mac˚ls
[3];

28 } 
	tglo_øw_imu_t
;

34 
	mgyros
[3];

35 
	mac˚ls
[3];

37 } 
	tglo_imu_t
;

43 
	mvﬁèges
[9];

44 
	mb©ãry_vﬁège
;

46 } 
	tglo_™Æog_t
;

52 
	mΩy
[3];

54 } 
	tglo_rﬁl_pôch_yaw_t
;

60 
	mq
[4];

62 } 
	tglo_qu©îni⁄_t
;

68 
	mthëa
;

70 } 
	tglo_thëa_zîo_t
;

76 
	mÀ·_di°™˚
;

77 
	mright_di°™˚
;

78 
	mavg_di°™˚
;

79 
	myaw
;

80 
	mÀ·_•ìd
;

81 
	mright_•ìd
;

82 
	mavg_•ìd
;

84 } 
	tglo_odomëry_t
;

90 
	mkp
;

91 
	mki
;

92 
	mkd
;

93 
	möãgøl_lﬁimô
;

94 
	möãgøl_hûimô
;

95 
	mlﬁimô
;

96 
	mhûimô
;

98 } 
	tglo_pid_∑øms_t
;

104 
glo_maö_modes_t
 
	mmaö_mode
;

105 
uöt8_t
 
	msub_mode
;

106 
glo_›î©ög_°©e_t
 
	m°©e
;

108 } 
	tglo_modes_t
;

114 
uöt32_t
 
	ma˘i⁄
;

115 
	mãxt
[
TELEMETRY_TEXT_SIZE
];

116 
uöt32_t
 
	mvÆid
;

118 } 
	tglo_as£π_mesßge_t
;

125 
	mãxt
[
TELEMETRY_TEXT_SIZE
];

126 
uöt32_t
 
	mvÆid
;

128 } 
	tglo_debug_mesßge_t
;

135 
	mtime
;

136 
	md1
;

137 
	md2
;

138 
	md3
;

139 
	md4
;

140 
	md5
;

141 
	md6
;

142 
	md7
;

143 
	md8
;

145 } 
	tglo_ˇ±uª_d©a_t
;

151 
drivög_comm™d_id_t
 
	mmovemít_ty≥
;

152 
	mlöór_vñocôy
;

153 
	m™guœr_vñocôy
;

155 } 
	tglo_drivög_comm™d_t
;

162 
uöt8_t
 
	mis_°¨t
;

163 
uöt8_t
 
	m∑u£d
;

164 
uöt16_t
 
	m‰equícy
;

165 
uöt32_t
 
	mdesúed_ßm∂es
;

166 
uöt32_t
 
	mtŸÆ_ßm∂es
;

168 } 
	tglo_ˇ±uª_comm™d_t
;

174 
	mb©ãry
;

175 
	mrﬁl
;

176 
	mpôch
;

177 
	myaw
;

180 
uöt8_t
 
	mmaö_mode
;

181 
uöt8_t
 
	msub_mode
;

182 
uöt8_t
 
	m°©e
;

183 
uöt8_t
 
	mîr‹_codes
;

185 
	mÀ·_löór_posôi⁄
;

186 
	mright_löór_posôi⁄
;

187 
	mÀ·_™guœr_posôi⁄
;

188 
	mright_™guœr_posôi⁄
;

189 
	mÀ·_löór_vñocôy
;

190 
	mright_löór_vñocôy
;

191 
	mÀ·_™guœr_vñocôy
;

192 
	mright_™guœr_vñocôy
;

194 
	mÀ·_pwm
;

195 
	mright_pwm
;

197 
öt32_t
 
	mfúmw¨e_vîsi⁄
;

199 
uöt8_t
 
	m¥o˚ss‹_id
[12];

201 } 
	tglo_°©us_d©a_t
;

208 
	mÀ·_duty
;

209 
	mright_duty
;

211 } 
	tglo_mŸ‹_pwm_t
;

217 
glo_wave_ty≥_t
 
	mty≥
;

218 
glo_wave_°©e_t
 
	m°©e
;

219 
uöt8_t
 
	m∑d
[2];

220 
	mvÆue
;

221 
	mmagnôude
;

222 
	m‰equícy
;

223 
	mduøti⁄
;

224 
	moff£t
;

225 
	mtime
;

226 
	mtŸÆ_time
;

227 
uöt8_t
 
	mrun_c⁄töuous
;

228 
uöt8_t
 
	m∑d2
[3];

231 
	mvmax
;

232 
	mamax
;

233 
	mdx
;

234 
	mt1
, 
	mt2
, 
	mt3
;

235 
	mc1
[3], 
	mc2
[3], 
	mc3
[3];

237 } 
	tglo_wave_t
;

243 
uöt8_t
 
	mªque°ed_id
;

245 } 
	tglo_ªque°_t
;

252 
	mèsk_«me
[32];

255 
uöt32_t
 
	mtimî_‰equícy
;

257 
	mªc‹dög_duøti⁄
;

258 
uöt32_t
 
	mexecuã_cou¡s
;

259 
uöt32_t
 
	mtimes_skù≥d
;

261 
uöt32_t
 
	mdñay_ticks_max
, 
	mdñay_ticks_mö
, 
	mdñay_ticks_avg
;

262 
uöt32_t
 
	mrun_ticks_max
, 
	mrun_ticks_mö
, 
	mrun_ticks_avg
;

263 
uöt32_t
 
	möãrvÆ_ticks_max
, 
	möãrvÆ_ticks_mö
, 
	möãrvÆ_ticks_avg
;

265 } 
	tglo_èsk_timög_t
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\globs.h

4 #i‚de‡
GLOBS_H_INCLUDED


5 
	#GLOBS_H_INCLUDED


	)

8 
	~<c°döt
>

9 
	~"glob_ãm∂©e.h
"

10 
	~"glob_ty≥s.h
"

16 
uöt8_t
 
	tglob_id_t
;

19 
	mGLO_ID_ASSERT_MESSAGE
,

20 
	mGLO_ID_DEBUG_MESSAGE
,

21 
	mGLO_ID_CAPTURE_DATA
,

22 
	mGLO_ID_DRIVING_COMMAND
,

23 
	mGLO_ID_CAPTURE_COMMAND
,

24 
	mGLO_ID_STATUS_DATA
,

25 
	mGLO_ID_MOTION_COMMANDS
,

26 
	mGLO_ID_RAW_IMU
,

27 
	mGLO_ID_ANALOG
,

28 
	mGLO_ID_IMU
,

29 
	mGLO_ID_ROLL_PITCH_YAW
,

30 
	mGLO_ID_QUATERNION
,

31 
	mGLO_ID_THETA_ZERO
,

32 
	mGLO_ID_ODOMETRY
,

33 
	mGLO_ID_MODES
,

34 
	mGLO_ID_ROBOT_COMMAND
,

35 
	mGLO_ID_MOTOR_PWM
,

36 
	mGLO_ID_WAVE
,

37 
	mGLO_ID_PID_PARAMS
,

38 
	mGLO_ID_REQUEST
,

39 
	mGLO_ID_TASK_TIMING
,

41 
	mNUM_GLOBS
,

47 #i‚de‡
DEFINE_GLOBS


48 
	#GLOB
(
v¨_«me
, 
°ru˘_ty≥
, 
id
, 
num_ö°™˚s
, 
ow√r_èsk
) \

49 
GlobTem∂©e
<
°ru˘_ty≥
, 
num_ö°™˚s
, 
ow√r_èsk
> 
v¨_«me


	)

51 
	#GLOB
(
v¨_«me
, 
°ru˘_ty≥
, 
id
, 
num_ö°™˚s
, 
ow√r_èsk
) \

52 
GlobTem∂©e
<
°ru˘_ty≥
, 
num_ö°™˚s
, 
ow√r_èsk
> 
	`v¨_«me
(
id
)

	)

56 
˛ass
 
MaöC⁄åﬁTask
;

57 
˛ass
 
	gSètusUpd©eTask
;

58 
˛ass
 
	gTñemëryRe˚iveTask
;

59 
˛ass
 
	gCom∂emíèryFûãrTask
;

60 
˛ass
 
	gModesTask
;

61 
˛ass
 
	gTñemërySídTask
;

69 
GLOB
(
glo_as£π_mesßge
, 
glo_as£π_mesßge_t
, 
GLO_ID_ASSERT_MESSAGE
, 3, 
TñemërySídTask
);

70 
GLOB
(
glo_debug_mesßge
, 
glo_debug_mesßge_t
, 
GLO_ID_DEBUG_MESSAGE
, 5, 
TñemërySídTask
);

71 
GLOB
(
glo_ˇ±uª_d©a
, 
glo_ˇ±uª_d©a_t
, 
GLO_ID_CAPTURE_DATA
, 2001, 
MaöC⁄åﬁTask
);

72 
GLOB
(
glo_drivög_comm™d
, 
glo_drivög_comm™d_t
, 
GLO_ID_DRIVING_COMMAND
, 1, 
TñemëryRe˚iveTask
);

73 
GLOB
(
glo_ˇ±uª_comm™d
, 
glo_ˇ±uª_comm™d_t
, 
GLO_ID_CAPTURE_COMMAND
, 1, 
MaöC⁄åﬁTask
);

74 
GLOB
(
glo_°©us_d©a
, 
glo_°©us_d©a_t
, 
GLO_ID_STATUS_DATA
, 1, 
SètusUpd©eTask
);

75 
GLOB
(
glo_mŸi⁄_comm™ds
, 
glo_mŸi⁄_comm™ds_t
, 
GLO_ID_MOTION_COMMANDS
, 1, 
TñemëryRe˚iveTask
);

76 
GLOB
(
glo_øw_imu
, 
glo_øw_imu_t
, 
GLO_ID_RAW_IMU
, 1, 
Com∂emíèryFûãrTask
);

77 
GLOB
(
glo_™Æog
, 
glo_™Æog_t
, 
GLO_ID_ANALOG
, 1, 
MaöC⁄åﬁTask
);

78 
GLOB
(
glo_imu
, 
glo_imu_t
, 
GLO_ID_IMU
, 1, 
Com∂emíèryFûãrTask
);

79 
GLOB
(
glo_rﬁl_pôch_yaw
, 
glo_rﬁl_pôch_yaw_t
, 
GLO_ID_ROLL_PITCH_YAW
, 1, 
Com∂emíèryFûãrTask
);

80 
GLOB
(
glo_qu©îni⁄
, 
glo_qu©îni⁄_t
, 
GLO_ID_QUATERNION
, 1, 
Com∂emíèryFûãrTask
);

81 
GLOB
(
glo_thëa_zîo
, 
glo_thëa_zîo_t
, 
GLO_ID_THETA_ZERO
, 1, 
MaöC⁄åﬁTask
);

82 
GLOB
(
glo_odomëry
, 
glo_odomëry_t
, 
GLO_ID_ODOMETRY
, 1, 
MaöC⁄åﬁTask
);

83 
GLOB
(
glo_modes
, 
glo_modes_t
, 
GLO_ID_MODES
, 1, 
ModesTask
);

84 
GLOB
(
glo_robŸ_comm™d
, 
glo_robŸ_comm™d_t
, 
GLO_ID_ROBOT_COMMAND
, 1, 
ModesTask
);

85 
GLOB
(
glo_mŸ‹_pwm
, 
glo_mŸ‹_pwm_t
, 
GLO_ID_MOTOR_PWM
, 1, 
MaöC⁄åﬁTask
);

86 
GLOB
(
glo_wave
, 
glo_wave_t
, 
GLO_ID_WAVE
, 1, 
MaöC⁄åﬁTask
);

87 
GLOB
(
glo_pid_∑øms
, 
glo_pid_∑øms_t
, 
GLO_ID_PID_PARAMS
, 
NUM_PID_CONTROLLERS
, 
TñemëryRe˚iveTask
);

88 
GLOB
(
glo_ªque°
, 
glo_ªque°_t
, 
GLO_ID_REQUEST
, 1, 
TñemëryRe˚iveTask
);

89 
GLOB
(
glo_èsk_timög
, 
glo_èsk_timög_t
, 
GLO_ID_TASK_TIMING
, 1, 
TñemërySídTask
);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\linker\stm32f407ve_flash.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

38 
MEMORY


40 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 512
K


41 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 128
K


42 
	`CCRAM
 (
rwx
Ë: 
ORIGIN
 = 0x10000000, 
LENGTH
 = 64
K


43 
	}
}

73 
	gSECTIONS


75 .
	gãxt
 :

77 
KEEP
(*(.
i§_ve˘‹
))

78 *(.
ãxt
*)

80 
KEEP
(*(.
öô
))

81 
KEEP
(*(.
föi
))

84 *
¸tbegö
.
o
(.
˘‹s
)

85 *
¸tbegö
?.
o
(.
˘‹s
)

86 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

87 *(
SORT
(.
˘‹s
.*))

88 *(.
˘‹s
)

91 *
¸tbegö
.
o
(.
dt‹s
)

92 *
¸tbegö
?.
o
(.
dt‹s
)

93 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

94 *(
SORT
(.
dt‹s
.*))

95 *(.
dt‹s
)

97 *(.
rod©a
*)

99 
KEEP
(*(.
eh_‰ame
*))

100 } > 
ROM


102 .
ARM
.
exèb
 :

104 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

105 } > 
ROM


107 
__exidx_°¨t
 = .;

108 .
	gARM
.
	gexidx
 :

110 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

111 } > 
ROM


112 
__exidx_íd
 = .;

114 
	g__ëext
 = .;

116 .
	gd©a
 : 
AT
 (
__ëext
)

118 
__d©a_°¨t__
 = .;

119 *(
	gvèbÀ
)

120 *(.
	gd©a
*)

122 . = 
ALIGN
(4);

124 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

125 
KEEP
(*(.
¥eöô_¨øy
))

126 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

128 . = 
ALIGN
(4);

130 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

131 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

132 
KEEP
(*(.
öô_¨øy
))

133 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

136 . = 
ALIGN
(4);

138 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

139 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

140 
KEEP
(*(.
föi_¨øy
))

141 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

143 . = 
ALIGN
(4);

145 
	g__d©a_íd__
 = .;

147 } > 
	gRAM


149 .
bss
 (
NOLOAD
):

151 
__bss_°¨t__
 = .;

152 *(.
	gbss
*)

153 *(
	gCOMMON
)

154 
	g__bss_íd__
 = .;

155 } > 
	gRAM


157 .
hóp
 (
NOLOAD
):

159 
__íd__
 = .;

160 
	gíd
 = 
__íd__
;

161 *(.
	ghóp
*)

162 
	g__HópLimô
 = .;

163 } > 
	gRAM


168 .
°ack_dummy
 (
NOLOAD
):

170 *(.
°ack
)

171 } > 
RAM


175 
__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

176 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

177 
PROVIDE
(
__°ack
 = 
__SèckT›
);

180 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\linker\stm32f407ve_sram.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

38 
MEMORY


40 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 512
K


41 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 128
K


42 
	`CCRAM
 (
rwx
Ë: 
ORIGIN
 = 0x10000000, 
LENGTH
 = 64
K


43 
	}
}

73 
	gSECTIONS


75 .
	gãxt
 :

77 
KEEP
(*(.
i§_ve˘‹
))

78 *(.
ãxt
*)

80 
KEEP
(*(.
öô
))

81 
KEEP
(*(.
föi
))

84 *
¸tbegö
.
o
(.
˘‹s
)

85 *
¸tbegö
?.
o
(.
˘‹s
)

86 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

87 *(
SORT
(.
˘‹s
.*))

88 *(.
˘‹s
)

91 *
¸tbegö
.
o
(.
dt‹s
)

92 *
¸tbegö
?.
o
(.
dt‹s
)

93 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

94 *(
SORT
(.
dt‹s
.*))

95 *(.
dt‹s
)

97 *(.
rod©a
*)

99 
KEEP
(*(.
eh_‰ame
*))

100 } > 
RAM


102 .
ARM
.
exèb
 :

104 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

105 } > 
RAM


107 
__exidx_°¨t
 = .;

108 .
	gARM
.
	gexidx
 :

110 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

111 } > 
RAM


112 
__exidx_íd
 = .;

114 
	g__ëext
 = .;

116 .
	gd©a
 : 
AT
 (
__ëext
)

118 
__d©a_°¨t__
 = .;

119 *(
	gvèbÀ
)

120 *(.
	gd©a
*)

122 . = 
ALIGN
(4);

124 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

125 
KEEP
(*(.
¥eöô_¨øy
))

126 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

128 . = 
ALIGN
(4);

130 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

131 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

132 
KEEP
(*(.
öô_¨øy
))

133 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

136 . = 
ALIGN
(4);

138 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

139 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

140 
KEEP
(*(.
föi_¨øy
))

141 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

143 . = 
ALIGN
(4);

145 
	g__d©a_íd__
 = .;

147 } > 
	gRAM


149 .
bss
 (
NOLOAD
):

151 
__bss_°¨t__
 = .;

152 *(.
	gbss
*)

153 *(
	gCOMMON
)

154 
	g__bss_íd__
 = .;

155 } > 
	gRAM


157 .
hóp
 (
NOLOAD
):

159 
__íd__
 = .;

160 
	gíd
 = 
__íd__
;

161 *(.
	ghóp
*)

162 
	g__HópLimô
 = .;

163 } > 
	gRAM


168 .
°ack_dummy
 (
NOLOAD
):

170 . = 
ALIGN
(8);

171 *(.
	g°ack
)

172 } > 
RAM


176 
	g__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

177 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

178 
PROVIDE
(
__°ack
 = 
__SèckT›
);

181 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\exception_handlers.cpp

3 
	~"utû_as£π.h
"

4 
	~"°m32f4xx.h
"

6 
	$£tup_ex˚±i⁄_h™dÀrs
()

9 
SCB
->
CCR
 |
SCB_CCR_DIV_0_TRP_Msk
 |

10 
SCB_CCR_UNALIGN_TRP_Msk
;

15 
	`NVIC_SëPri‹ôy
(
Mem‹yM™agemít_IRQn
, 0x05);

16 
	`NVIC_SëPri‹ôy
(
BusFau…_IRQn
, 0x05);

17 
	`NVIC_SëPri‹ôy
(
UßgeFau…_IRQn
, 0x05);

20 
SCB
->
SHCSR
 |
SCB_SHCSR_USGFAULTENA_Msk
 |

21 
SCB_SHCSR_BUSFAULTENA_Msk
 |

22 
SCB_SHCSR_MEMFAULTENA_Msk
;

23 
	}
}

27 
H¨dFau…_H™dÀr
()

33 
MemM™age_H™dÀr
()

35 
as£π_Æways_msg
(
ASSERT_STOP
, "Memory Access Violation!");

37 
BusFau…_H™dÀr
()

39 
as£π_Æways_msg
(
ASSERT_STOP
, "Bus Fault!");

41 
UßgeFau…_H™dÀr
()

43 
as£π_Æways_msg
(
ASSERT_STOP
, "Usage Fault! Examplesáre division by 0 or misaligned memoryáccess.");

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\include\stm32f4xx.h

53 #i‚de‡
__STM32F4xx_H


54 
	#__STM32F4xx_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

88 #ifde‡
STM32F40XX


89 
	#STM32F40_41xxx


	)

93 #ifde‡
STM32F427X


94 
	#STM32F427_437xx


	)

101 #i‡!
deföed
 (
STM32F40_41xxx
Ë&& !deföed (
STM32F427_437xx
Ë&& !deföed (
STM32F429_439xx
Ë&& !deföed (
STM32F401xx
Ë&& !deföed (
STM32F411xE
)

105 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

122 #i‡!
deföed
 (
HSE_VALUE
)

123 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

131 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

132 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x05000Ë

	)

135 #i‡!
deföed
 (
HSI_VALUE
)

136 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

142 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

143 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x04Ë

	)

144 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

145 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

146 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

147 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

148 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

149 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

162 
	#__CM4_REV
 0x0001

	)

163 
	#__MPU_PRESENT
 1

	)

164 
	#__NVIC_PRIO_BITS
 4

	)

165 
	#__Víd‹_SysTickC⁄fig
 0

	)

166 
	#__FPU_PRESENT
 1

	)

172 
	eIRQn


175 
N⁄MaskabÀI¡_IRQn
 = -14,

176 
Mem‹yM™agemít_IRQn
 = -12,

177 
BusFau…_IRQn
 = -11,

178 
UßgeFau…_IRQn
 = -10,

179 
SVCÆl_IRQn
 = -5,

180 
DebugM⁄ô‹_IRQn
 = -4,

181 
PídSV_IRQn
 = -2,

182 
SysTick_IRQn
 = -1,

184 
WWDG_IRQn
 = 0,

185 
PVD_IRQn
 = 1,

186 
TAMP_STAMP_IRQn
 = 2,

187 
RTC_WKUP_IRQn
 = 3,

188 
FLASH_IRQn
 = 4,

189 
RCC_IRQn
 = 5,

190 
EXTI0_IRQn
 = 6,

191 
EXTI1_IRQn
 = 7,

192 
EXTI2_IRQn
 = 8,

193 
EXTI3_IRQn
 = 9,

194 
EXTI4_IRQn
 = 10,

195 
DMA1_Såóm0_IRQn
 = 11,

196 
DMA1_Såóm1_IRQn
 = 12,

197 
DMA1_Såóm2_IRQn
 = 13,

198 
DMA1_Såóm3_IRQn
 = 14,

199 
DMA1_Såóm4_IRQn
 = 15,

200 
DMA1_Såóm5_IRQn
 = 16,

201 
DMA1_Såóm6_IRQn
 = 17,

202 
ADC_IRQn
 = 18,

204 #i‡
deföed
 (
STM32F40_41xxx
)

205 
CAN1_TX_IRQn
 = 19,

206 
CAN1_RX0_IRQn
 = 20,

207 
CAN1_RX1_IRQn
 = 21,

208 
CAN1_SCE_IRQn
 = 22,

209 
EXTI9_5_IRQn
 = 23,

210 
TIM1_BRK_TIM9_IRQn
 = 24,

211 
TIM1_UP_TIM10_IRQn
 = 25,

212 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

213 
TIM1_CC_IRQn
 = 27,

214 
TIM2_IRQn
 = 28,

215 
TIM3_IRQn
 = 29,

216 
TIM4_IRQn
 = 30,

217 
I2C1_EV_IRQn
 = 31,

218 
I2C1_ER_IRQn
 = 32,

219 
I2C2_EV_IRQn
 = 33,

220 
I2C2_ER_IRQn
 = 34,

221 
SPI1_IRQn
 = 35,

222 
SPI2_IRQn
 = 36,

223 
USART1_IRQn
 = 37,

224 
USART2_IRQn
 = 38,

225 
USART3_IRQn
 = 39,

226 
EXTI15_10_IRQn
 = 40,

227 
RTC_Aœrm_IRQn
 = 41,

228 
OTG_FS_WKUP_IRQn
 = 42,

229 
TIM8_BRK_TIM12_IRQn
 = 43,

230 
TIM8_UP_TIM13_IRQn
 = 44,

231 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

232 
TIM8_CC_IRQn
 = 46,

233 
DMA1_Såóm7_IRQn
 = 47,

234 
FSMC_IRQn
 = 48,

235 
SDIO_IRQn
 = 49,

236 
TIM5_IRQn
 = 50,

237 
SPI3_IRQn
 = 51,

238 
UART4_IRQn
 = 52,

239 
UART5_IRQn
 = 53,

240 
TIM6_DAC_IRQn
 = 54,

241 
TIM7_IRQn
 = 55,

242 
DMA2_Såóm0_IRQn
 = 56,

243 
DMA2_Såóm1_IRQn
 = 57,

244 
DMA2_Såóm2_IRQn
 = 58,

245 
DMA2_Såóm3_IRQn
 = 59,

246 
DMA2_Såóm4_IRQn
 = 60,

247 
ETH_IRQn
 = 61,

248 
ETH_WKUP_IRQn
 = 62,

249 
CAN2_TX_IRQn
 = 63,

250 
CAN2_RX0_IRQn
 = 64,

251 
CAN2_RX1_IRQn
 = 65,

252 
CAN2_SCE_IRQn
 = 66,

253 
OTG_FS_IRQn
 = 67,

254 
DMA2_Såóm5_IRQn
 = 68,

255 
DMA2_Såóm6_IRQn
 = 69,

256 
DMA2_Såóm7_IRQn
 = 70,

257 
USART6_IRQn
 = 71,

258 
I2C3_EV_IRQn
 = 72,

259 
I2C3_ER_IRQn
 = 73,

260 
OTG_HS_EP1_OUT_IRQn
 = 74,

261 
OTG_HS_EP1_IN_IRQn
 = 75,

262 
OTG_HS_WKUP_IRQn
 = 76,

263 
OTG_HS_IRQn
 = 77,

264 
DCMI_IRQn
 = 78,

265 
CRYP_IRQn
 = 79,

266 
HASH_RNG_IRQn
 = 80,

267 
FPU_IRQn
 = 81

270 #i‡
deföed
 (
STM32F427_437xx
)

271 
CAN1_TX_IRQn
 = 19,

272 
CAN1_RX0_IRQn
 = 20,

273 
CAN1_RX1_IRQn
 = 21,

274 
CAN1_SCE_IRQn
 = 22,

275 
EXTI9_5_IRQn
 = 23,

276 
TIM1_BRK_TIM9_IRQn
 = 24,

277 
TIM1_UP_TIM10_IRQn
 = 25,

278 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

279 
TIM1_CC_IRQn
 = 27,

280 
TIM2_IRQn
 = 28,

281 
TIM3_IRQn
 = 29,

282 
TIM4_IRQn
 = 30,

283 
I2C1_EV_IRQn
 = 31,

284 
I2C1_ER_IRQn
 = 32,

285 
I2C2_EV_IRQn
 = 33,

286 
I2C2_ER_IRQn
 = 34,

287 
SPI1_IRQn
 = 35,

288 
SPI2_IRQn
 = 36,

289 
USART1_IRQn
 = 37,

290 
USART2_IRQn
 = 38,

291 
USART3_IRQn
 = 39,

292 
EXTI15_10_IRQn
 = 40,

293 
RTC_Aœrm_IRQn
 = 41,

294 
OTG_FS_WKUP_IRQn
 = 42,

295 
TIM8_BRK_TIM12_IRQn
 = 43,

296 
TIM8_UP_TIM13_IRQn
 = 44,

297 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

298 
TIM8_CC_IRQn
 = 46,

299 
DMA1_Såóm7_IRQn
 = 47,

300 
FMC_IRQn
 = 48,

301 
SDIO_IRQn
 = 49,

302 
TIM5_IRQn
 = 50,

303 
SPI3_IRQn
 = 51,

304 
UART4_IRQn
 = 52,

305 
UART5_IRQn
 = 53,

306 
TIM6_DAC_IRQn
 = 54,

307 
TIM7_IRQn
 = 55,

308 
DMA2_Såóm0_IRQn
 = 56,

309 
DMA2_Såóm1_IRQn
 = 57,

310 
DMA2_Såóm2_IRQn
 = 58,

311 
DMA2_Såóm3_IRQn
 = 59,

312 
DMA2_Såóm4_IRQn
 = 60,

313 
ETH_IRQn
 = 61,

314 
ETH_WKUP_IRQn
 = 62,

315 
CAN2_TX_IRQn
 = 63,

316 
CAN2_RX0_IRQn
 = 64,

317 
CAN2_RX1_IRQn
 = 65,

318 
CAN2_SCE_IRQn
 = 66,

319 
OTG_FS_IRQn
 = 67,

320 
DMA2_Såóm5_IRQn
 = 68,

321 
DMA2_Såóm6_IRQn
 = 69,

322 
DMA2_Såóm7_IRQn
 = 70,

323 
USART6_IRQn
 = 71,

324 
I2C3_EV_IRQn
 = 72,

325 
I2C3_ER_IRQn
 = 73,

326 
OTG_HS_EP1_OUT_IRQn
 = 74,

327 
OTG_HS_EP1_IN_IRQn
 = 75,

328 
OTG_HS_WKUP_IRQn
 = 76,

329 
OTG_HS_IRQn
 = 77,

330 
DCMI_IRQn
 = 78,

331 
CRYP_IRQn
 = 79,

332 
HASH_RNG_IRQn
 = 80,

333 
FPU_IRQn
 = 81,

334 
UART7_IRQn
 = 82,

335 
UART8_IRQn
 = 83,

336 
SPI4_IRQn
 = 84,

337 
SPI5_IRQn
 = 85,

338 
SPI6_IRQn
 = 86,

339 
SAI1_IRQn
 = 87,

340 
DMA2D_IRQn
 = 90

343 #i‡
deföed
 (
STM32F429_439xx
)

344 
CAN1_TX_IRQn
 = 19,

345 
CAN1_RX0_IRQn
 = 20,

346 
CAN1_RX1_IRQn
 = 21,

347 
CAN1_SCE_IRQn
 = 22,

348 
EXTI9_5_IRQn
 = 23,

349 
TIM1_BRK_TIM9_IRQn
 = 24,

350 
TIM1_UP_TIM10_IRQn
 = 25,

351 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

352 
TIM1_CC_IRQn
 = 27,

353 
TIM2_IRQn
 = 28,

354 
TIM3_IRQn
 = 29,

355 
TIM4_IRQn
 = 30,

356 
I2C1_EV_IRQn
 = 31,

357 
I2C1_ER_IRQn
 = 32,

358 
I2C2_EV_IRQn
 = 33,

359 
I2C2_ER_IRQn
 = 34,

360 
SPI1_IRQn
 = 35,

361 
SPI2_IRQn
 = 36,

362 
USART1_IRQn
 = 37,

363 
USART2_IRQn
 = 38,

364 
USART3_IRQn
 = 39,

365 
EXTI15_10_IRQn
 = 40,

366 
RTC_Aœrm_IRQn
 = 41,

367 
OTG_FS_WKUP_IRQn
 = 42,

368 
TIM8_BRK_TIM12_IRQn
 = 43,

369 
TIM8_UP_TIM13_IRQn
 = 44,

370 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

371 
TIM8_CC_IRQn
 = 46,

372 
DMA1_Såóm7_IRQn
 = 47,

373 
FMC_IRQn
 = 48,

374 
SDIO_IRQn
 = 49,

375 
TIM5_IRQn
 = 50,

376 
SPI3_IRQn
 = 51,

377 
UART4_IRQn
 = 52,

378 
UART5_IRQn
 = 53,

379 
TIM6_DAC_IRQn
 = 54,

380 
TIM7_IRQn
 = 55,

381 
DMA2_Såóm0_IRQn
 = 56,

382 
DMA2_Såóm1_IRQn
 = 57,

383 
DMA2_Såóm2_IRQn
 = 58,

384 
DMA2_Såóm3_IRQn
 = 59,

385 
DMA2_Såóm4_IRQn
 = 60,

386 
ETH_IRQn
 = 61,

387 
ETH_WKUP_IRQn
 = 62,

388 
CAN2_TX_IRQn
 = 63,

389 
CAN2_RX0_IRQn
 = 64,

390 
CAN2_RX1_IRQn
 = 65,

391 
CAN2_SCE_IRQn
 = 66,

392 
OTG_FS_IRQn
 = 67,

393 
DMA2_Såóm5_IRQn
 = 68,

394 
DMA2_Såóm6_IRQn
 = 69,

395 
DMA2_Såóm7_IRQn
 = 70,

396 
USART6_IRQn
 = 71,

397 
I2C3_EV_IRQn
 = 72,

398 
I2C3_ER_IRQn
 = 73,

399 
OTG_HS_EP1_OUT_IRQn
 = 74,

400 
OTG_HS_EP1_IN_IRQn
 = 75,

401 
OTG_HS_WKUP_IRQn
 = 76,

402 
OTG_HS_IRQn
 = 77,

403 
DCMI_IRQn
 = 78,

404 
CRYP_IRQn
 = 79,

405 
HASH_RNG_IRQn
 = 80,

406 
FPU_IRQn
 = 81,

407 
UART7_IRQn
 = 82,

408 
UART8_IRQn
 = 83,

409 
SPI4_IRQn
 = 84,

410 
SPI5_IRQn
 = 85,

411 
SPI6_IRQn
 = 86,

412 
SAI1_IRQn
 = 87,

413 
LTDC_IRQn
 = 88,

414 
LTDC_ER_IRQn
 = 89,

415 
DMA2D_IRQn
 = 90

418 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

419 
EXTI9_5_IRQn
 = 23,

420 
TIM1_BRK_TIM9_IRQn
 = 24,

421 
TIM1_UP_TIM10_IRQn
 = 25,

422 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

423 
TIM1_CC_IRQn
 = 27,

424 
TIM2_IRQn
 = 28,

425 
TIM3_IRQn
 = 29,

426 
TIM4_IRQn
 = 30,

427 
I2C1_EV_IRQn
 = 31,

428 
I2C1_ER_IRQn
 = 32,

429 
I2C2_EV_IRQn
 = 33,

430 
I2C2_ER_IRQn
 = 34,

431 
SPI1_IRQn
 = 35,

432 
SPI2_IRQn
 = 36,

433 
USART1_IRQn
 = 37,

434 
USART2_IRQn
 = 38,

435 
EXTI15_10_IRQn
 = 40,

436 
RTC_Aœrm_IRQn
 = 41,

437 
OTG_FS_WKUP_IRQn
 = 42,

438 
DMA1_Såóm7_IRQn
 = 47,

439 
SDIO_IRQn
 = 49,

440 
TIM5_IRQn
 = 50,

441 
SPI3_IRQn
 = 51,

442 
DMA2_Såóm0_IRQn
 = 56,

443 
DMA2_Såóm1_IRQn
 = 57,

444 
DMA2_Såóm2_IRQn
 = 58,

445 
DMA2_Såóm3_IRQn
 = 59,

446 
DMA2_Såóm4_IRQn
 = 60,

447 
OTG_FS_IRQn
 = 67,

448 
DMA2_Såóm5_IRQn
 = 68,

449 
DMA2_Såóm6_IRQn
 = 69,

450 
DMA2_Såóm7_IRQn
 = 70,

451 
USART6_IRQn
 = 71,

452 
I2C3_EV_IRQn
 = 72,

453 
I2C3_ER_IRQn
 = 73,

454 
FPU_IRQn
 = 81,

455 #i‡
deföed
 (
STM32F401xx
)

456 
SPI4_IRQn
 = 84

458 #i‡
deföed
 (
STM32F411xE
)

459 
SPI4_IRQn
 = 84,

460 
SPI5_IRQn
 = 85

464 } 
	tIRQn_Ty≥
;

470 
	~"c‹e_cm4.h
"

471 
	~"sy°em_°m32f4xx.h
"

472 
	~<°döt.h
>

478 
öt32_t
 
	ts32
;

479 
öt16_t
 
	ts16
;

480 
öt8_t
 
	ts8
;

482 c⁄° 
	töt32_t
 
	tsc32
;

483 c⁄° 
	töt16_t
 
	tsc16
;

484 c⁄° 
	töt8_t
 
	tsc8
;

486 
__IO
 
	töt32_t
 
	tvs32
;

487 
__IO
 
	töt16_t
 
	tvs16
;

488 
__IO
 
	töt8_t
 
	tvs8
;

490 
__I
 
	töt32_t
 
	tvsc32
;

491 
__I
 
	töt16_t
 
	tvsc16
;

492 
__I
 
	töt8_t
 
	tvsc8
;

494 
uöt32_t
 
	tu32
;

495 
uöt16_t
 
	tu16
;

496 
uöt8_t
 
	tu8
;

498 c⁄° 
	tuöt32_t
 
	tuc32
;

499 c⁄° 
	tuöt16_t
 
	tuc16
;

500 c⁄° 
	tuöt8_t
 
	tuc8
;

502 
__IO
 
	tuöt32_t
 
	tvu32
;

503 
__IO
 
	tuöt16_t
 
	tvu16
;

504 
__IO
 
	tuöt8_t
 
	tvu8
;

506 
__I
 
	tuöt32_t
 
	tvuc32
;

507 
__I
 
	tuöt16_t
 
	tvuc16
;

508 
__I
 
	tuöt8_t
 
	tvuc8
;

510 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

512 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

513 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

515 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

531 
__IO
 
uöt32_t
 
SR
;

532 
__IO
 
uöt32_t
 
CR1
;

533 
__IO
 
uöt32_t
 
CR2
;

534 
__IO
 
uöt32_t
 
SMPR1
;

535 
__IO
 
uöt32_t
 
SMPR2
;

536 
__IO
 
uöt32_t
 
JOFR1
;

537 
__IO
 
uöt32_t
 
JOFR2
;

538 
__IO
 
uöt32_t
 
JOFR3
;

539 
__IO
 
uöt32_t
 
JOFR4
;

540 
__IO
 
uöt32_t
 
HTR
;

541 
__IO
 
uöt32_t
 
LTR
;

542 
__IO
 
uöt32_t
 
SQR1
;

543 
__IO
 
uöt32_t
 
SQR2
;

544 
__IO
 
uöt32_t
 
SQR3
;

545 
__IO
 
uöt32_t
 
JSQR
;

546 
__IO
 
uöt32_t
 
JDR1
;

547 
__IO
 
uöt32_t
 
JDR2
;

548 
__IO
 
uöt32_t
 
JDR3
;

549 
__IO
 
uöt32_t
 
JDR4
;

550 
__IO
 
uöt32_t
 
DR
;

551 } 
	tADC_Ty≥Def
;

555 
__IO
 
uöt32_t
 
CSR
;

556 
__IO
 
uöt32_t
 
CCR
;

557 
__IO
 
uöt32_t
 
CDR
;

559 } 
	tADC_Comm⁄_Ty≥Def
;

568 
__IO
 
uöt32_t
 
TIR
;

569 
__IO
 
uöt32_t
 
TDTR
;

570 
__IO
 
uöt32_t
 
TDLR
;

571 
__IO
 
uöt32_t
 
TDHR
;

572 } 
	tCAN_TxMaûBox_Ty≥Def
;

580 
__IO
 
uöt32_t
 
RIR
;

581 
__IO
 
uöt32_t
 
RDTR
;

582 
__IO
 
uöt32_t
 
RDLR
;

583 
__IO
 
uöt32_t
 
RDHR
;

584 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

592 
__IO
 
uöt32_t
 
FR1
;

593 
__IO
 
uöt32_t
 
FR2
;

594 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

602 
__IO
 
uöt32_t
 
MCR
;

603 
__IO
 
uöt32_t
 
MSR
;

604 
__IO
 
uöt32_t
 
TSR
;

605 
__IO
 
uöt32_t
 
RF0R
;

606 
__IO
 
uöt32_t
 
RF1R
;

607 
__IO
 
uöt32_t
 
IER
;

608 
__IO
 
uöt32_t
 
ESR
;

609 
__IO
 
uöt32_t
 
BTR
;

610 
uöt32_t
 
RESERVED0
[88];

611 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

612 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

613 
uöt32_t
 
RESERVED1
[12];

614 
__IO
 
uöt32_t
 
FMR
;

615 
__IO
 
uöt32_t
 
FM1R
;

616 
uöt32_t
 
RESERVED2
;

617 
__IO
 
uöt32_t
 
FS1R
;

618 
uöt32_t
 
RESERVED3
;

619 
__IO
 
uöt32_t
 
FFA1R
;

620 
uöt32_t
 
RESERVED4
;

621 
__IO
 
uöt32_t
 
FA1R
;

622 
uöt32_t
 
RESERVED5
[8];

623 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

624 } 
	tCAN_Ty≥Def
;

632 
__IO
 
uöt32_t
 
DR
;

633 
__IO
 
uöt8_t
 
IDR
;

634 
uöt8_t
 
RESERVED0
;

635 
uöt16_t
 
RESERVED1
;

636 
__IO
 
uöt32_t
 
CR
;

637 } 
	tCRC_Ty≥Def
;

645 
__IO
 
uöt32_t
 
CR
;

646 
__IO
 
uöt32_t
 
SWTRIGR
;

647 
__IO
 
uöt32_t
 
DHR12R1
;

648 
__IO
 
uöt32_t
 
DHR12L1
;

649 
__IO
 
uöt32_t
 
DHR8R1
;

650 
__IO
 
uöt32_t
 
DHR12R2
;

651 
__IO
 
uöt32_t
 
DHR12L2
;

652 
__IO
 
uöt32_t
 
DHR8R2
;

653 
__IO
 
uöt32_t
 
DHR12RD
;

654 
__IO
 
uöt32_t
 
DHR12LD
;

655 
__IO
 
uöt32_t
 
DHR8RD
;

656 
__IO
 
uöt32_t
 
DOR1
;

657 
__IO
 
uöt32_t
 
DOR2
;

658 
__IO
 
uöt32_t
 
SR
;

659 } 
	tDAC_Ty≥Def
;

667 
__IO
 
uöt32_t
 
IDCODE
;

668 
__IO
 
uöt32_t
 
CR
;

669 
__IO
 
uöt32_t
 
APB1FZ
;

670 
__IO
 
uöt32_t
 
APB2FZ
;

671 }
	tDBGMCU_Ty≥Def
;

679 
__IO
 
uöt32_t
 
CR
;

680 
__IO
 
uöt32_t
 
SR
;

681 
__IO
 
uöt32_t
 
RISR
;

682 
__IO
 
uöt32_t
 
IER
;

683 
__IO
 
uöt32_t
 
MISR
;

684 
__IO
 
uöt32_t
 
ICR
;

685 
__IO
 
uöt32_t
 
ESCR
;

686 
__IO
 
uöt32_t
 
ESUR
;

687 
__IO
 
uöt32_t
 
CWSTRTR
;

688 
__IO
 
uöt32_t
 
CWSIZER
;

689 
__IO
 
uöt32_t
 
DR
;

690 } 
	tDCMI_Ty≥Def
;

698 
__IO
 
uöt32_t
 
CR
;

699 
__IO
 
uöt32_t
 
NDTR
;

700 
__IO
 
uöt32_t
 
PAR
;

701 
__IO
 
uöt32_t
 
M0AR
;

702 
__IO
 
uöt32_t
 
M1AR
;

703 
__IO
 
uöt32_t
 
FCR
;

704 } 
	tDMA_Såóm_Ty≥Def
;

708 
__IO
 
uöt32_t
 
LISR
;

709 
__IO
 
uöt32_t
 
HISR
;

710 
__IO
 
uöt32_t
 
LIFCR
;

711 
__IO
 
uöt32_t
 
HIFCR
;

712 } 
	tDMA_Ty≥Def
;

720 
__IO
 
uöt32_t
 
CR
;

721 
__IO
 
uöt32_t
 
ISR
;

722 
__IO
 
uöt32_t
 
IFCR
;

723 
__IO
 
uöt32_t
 
FGMAR
;

724 
__IO
 
uöt32_t
 
FGOR
;

725 
__IO
 
uöt32_t
 
BGMAR
;

726 
__IO
 
uöt32_t
 
BGOR
;

727 
__IO
 
uöt32_t
 
FGPFCCR
;

728 
__IO
 
uöt32_t
 
FGCOLR
;

729 
__IO
 
uöt32_t
 
BGPFCCR
;

730 
__IO
 
uöt32_t
 
BGCOLR
;

731 
__IO
 
uöt32_t
 
FGCMAR
;

732 
__IO
 
uöt32_t
 
BGCMAR
;

733 
__IO
 
uöt32_t
 
OPFCCR
;

734 
__IO
 
uöt32_t
 
OCOLR
;

735 
__IO
 
uöt32_t
 
OMAR
;

736 
__IO
 
uöt32_t
 
OOR
;

737 
__IO
 
uöt32_t
 
NLR
;

738 
__IO
 
uöt32_t
 
LWR
;

739 
__IO
 
uöt32_t
 
AMTCR
;

740 
uöt32_t
 
RESERVED
[236];

741 
__IO
 
uöt32_t
 
FGCLUT
[256];

742 
__IO
 
uöt32_t
 
BGCLUT
[256];

743 } 
	tDMA2D_Ty≥Def
;

751 
__IO
 
uöt32_t
 
MACCR
;

752 
__IO
 
uöt32_t
 
MACFFR
;

753 
__IO
 
uöt32_t
 
MACHTHR
;

754 
__IO
 
uöt32_t
 
MACHTLR
;

755 
__IO
 
uöt32_t
 
MACMIIAR
;

756 
__IO
 
uöt32_t
 
MACMIIDR
;

757 
__IO
 
uöt32_t
 
MACFCR
;

758 
__IO
 
uöt32_t
 
MACVLANTR
;

759 
uöt32_t
 
RESERVED0
[2];

760 
__IO
 
uöt32_t
 
MACRWUFFR
;

761 
__IO
 
uöt32_t
 
MACPMTCSR
;

762 
uöt32_t
 
RESERVED1
[2];

763 
__IO
 
uöt32_t
 
MACSR
;

764 
__IO
 
uöt32_t
 
MACIMR
;

765 
__IO
 
uöt32_t
 
MACA0HR
;

766 
__IO
 
uöt32_t
 
MACA0LR
;

767 
__IO
 
uöt32_t
 
MACA1HR
;

768 
__IO
 
uöt32_t
 
MACA1LR
;

769 
__IO
 
uöt32_t
 
MACA2HR
;

770 
__IO
 
uöt32_t
 
MACA2LR
;

771 
__IO
 
uöt32_t
 
MACA3HR
;

772 
__IO
 
uöt32_t
 
MACA3LR
;

773 
uöt32_t
 
RESERVED2
[40];

774 
__IO
 
uöt32_t
 
MMCCR
;

775 
__IO
 
uöt32_t
 
MMCRIR
;

776 
__IO
 
uöt32_t
 
MMCTIR
;

777 
__IO
 
uöt32_t
 
MMCRIMR
;

778 
__IO
 
uöt32_t
 
MMCTIMR
;

779 
uöt32_t
 
RESERVED3
[14];

780 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

781 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

782 
uöt32_t
 
RESERVED4
[5];

783 
__IO
 
uöt32_t
 
MMCTGFCR
;

784 
uöt32_t
 
RESERVED5
[10];

785 
__IO
 
uöt32_t
 
MMCRFCECR
;

786 
__IO
 
uöt32_t
 
MMCRFAECR
;

787 
uöt32_t
 
RESERVED6
[10];

788 
__IO
 
uöt32_t
 
MMCRGUFCR
;

789 
uöt32_t
 
RESERVED7
[334];

790 
__IO
 
uöt32_t
 
PTPTSCR
;

791 
__IO
 
uöt32_t
 
PTPSSIR
;

792 
__IO
 
uöt32_t
 
PTPTSHR
;

793 
__IO
 
uöt32_t
 
PTPTSLR
;

794 
__IO
 
uöt32_t
 
PTPTSHUR
;

795 
__IO
 
uöt32_t
 
PTPTSLUR
;

796 
__IO
 
uöt32_t
 
PTPTSAR
;

797 
__IO
 
uöt32_t
 
PTPTTHR
;

798 
__IO
 
uöt32_t
 
PTPTTLR
;

799 
__IO
 
uöt32_t
 
RESERVED8
;

800 
__IO
 
uöt32_t
 
PTPTSSR
;

801 
uöt32_t
 
RESERVED9
[565];

802 
__IO
 
uöt32_t
 
DMABMR
;

803 
__IO
 
uöt32_t
 
DMATPDR
;

804 
__IO
 
uöt32_t
 
DMARPDR
;

805 
__IO
 
uöt32_t
 
DMARDLAR
;

806 
__IO
 
uöt32_t
 
DMATDLAR
;

807 
__IO
 
uöt32_t
 
DMASR
;

808 
__IO
 
uöt32_t
 
DMAOMR
;

809 
__IO
 
uöt32_t
 
DMAIER
;

810 
__IO
 
uöt32_t
 
DMAMFBOCR
;

811 
__IO
 
uöt32_t
 
DMARSWTR
;

812 
uöt32_t
 
RESERVED10
[8];

813 
__IO
 
uöt32_t
 
DMACHTDR
;

814 
__IO
 
uöt32_t
 
DMACHRDR
;

815 
__IO
 
uöt32_t
 
DMACHTBAR
;

816 
__IO
 
uöt32_t
 
DMACHRBAR
;

817 } 
	tETH_Ty≥Def
;

825 
__IO
 
uöt32_t
 
IMR
;

826 
__IO
 
uöt32_t
 
EMR
;

827 
__IO
 
uöt32_t
 
RTSR
;

828 
__IO
 
uöt32_t
 
FTSR
;

829 
__IO
 
uöt32_t
 
SWIER
;

830 
__IO
 
uöt32_t
 
PR
;

831 } 
	tEXTI_Ty≥Def
;

839 
__IO
 
uöt32_t
 
ACR
;

840 
__IO
 
uöt32_t
 
KEYR
;

841 
__IO
 
uöt32_t
 
OPTKEYR
;

842 
__IO
 
uöt32_t
 
SR
;

843 
__IO
 
uöt32_t
 
CR
;

844 
__IO
 
uöt32_t
 
OPTCR
;

845 
__IO
 
uöt32_t
 
OPTCR1
;

846 } 
	tFLASH_Ty≥Def
;

848 #i‡
deföed
 (
STM32F40_41xxx
)

855 
__IO
 
uöt32_t
 
BTCR
[8];

856 } 
	tFSMC_B™k1_Ty≥Def
;

864 
__IO
 
uöt32_t
 
BWTR
[7];

865 } 
	tFSMC_B™k1E_Ty≥Def
;

873 
__IO
 
uöt32_t
 
PCR2
;

874 
__IO
 
uöt32_t
 
SR2
;

875 
__IO
 
uöt32_t
 
PMEM2
;

876 
__IO
 
uöt32_t
 
PATT2
;

877 
uöt32_t
 
RESERVED0
;

878 
__IO
 
uöt32_t
 
ECCR2
;

879 } 
	tFSMC_B™k2_Ty≥Def
;

887 
__IO
 
uöt32_t
 
PCR3
;

888 
__IO
 
uöt32_t
 
SR3
;

889 
__IO
 
uöt32_t
 
PMEM3
;

890 
__IO
 
uöt32_t
 
PATT3
;

891 
uöt32_t
 
RESERVED0
;

892 
__IO
 
uöt32_t
 
ECCR3
;

893 } 
	tFSMC_B™k3_Ty≥Def
;

901 
__IO
 
uöt32_t
 
PCR4
;

902 
__IO
 
uöt32_t
 
SR4
;

903 
__IO
 
uöt32_t
 
PMEM4
;

904 
__IO
 
uöt32_t
 
PATT4
;

905 
__IO
 
uöt32_t
 
PIO4
;

906 } 
	tFSMC_B™k4_Ty≥Def
;

909 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

916 
__IO
 
uöt32_t
 
BTCR
[8];

917 } 
	tFMC_B™k1_Ty≥Def
;

925 
__IO
 
uöt32_t
 
BWTR
[7];

926 } 
	tFMC_B™k1E_Ty≥Def
;

934 
__IO
 
uöt32_t
 
PCR2
;

935 
__IO
 
uöt32_t
 
SR2
;

936 
__IO
 
uöt32_t
 
PMEM2
;

937 
__IO
 
uöt32_t
 
PATT2
;

938 
uöt32_t
 
RESERVED0
;

939 
__IO
 
uöt32_t
 
ECCR2
;

940 } 
	tFMC_B™k2_Ty≥Def
;

948 
__IO
 
uöt32_t
 
PCR3
;

949 
__IO
 
uöt32_t
 
SR3
;

950 
__IO
 
uöt32_t
 
PMEM3
;

951 
__IO
 
uöt32_t
 
PATT3
;

952 
uöt32_t
 
RESERVED0
;

953 
__IO
 
uöt32_t
 
ECCR3
;

954 } 
	tFMC_B™k3_Ty≥Def
;

962 
__IO
 
uöt32_t
 
PCR4
;

963 
__IO
 
uöt32_t
 
SR4
;

964 
__IO
 
uöt32_t
 
PMEM4
;

965 
__IO
 
uöt32_t
 
PATT4
;

966 
__IO
 
uöt32_t
 
PIO4
;

967 } 
	tFMC_B™k4_Ty≥Def
;

975 
__IO
 
uöt32_t
 
SDCR
[2];

976 
__IO
 
uöt32_t
 
SDTR
[2];

977 
__IO
 
uöt32_t
 
SDCMR
;

978 
__IO
 
uöt32_t
 
SDRTR
;

979 
__IO
 
uöt32_t
 
SDSR
;

980 } 
	tFMC_B™k5_6_Ty≥Def
;

989 
__IO
 
uöt32_t
 
MODER
;

990 
__IO
 
uöt32_t
 
OTYPER
;

991 
__IO
 
uöt32_t
 
OSPEEDR
;

992 
__IO
 
uöt32_t
 
PUPDR
;

993 
__IO
 
uöt32_t
 
IDR
;

994 
__IO
 
uöt32_t
 
ODR
;

995 
__IO
 
uöt16_t
 
BSRRL
;

996 
__IO
 
uöt16_t
 
BSRRH
;

997 
__IO
 
uöt32_t
 
LCKR
;

998 
__IO
 
uöt32_t
 
AFR
[2];

999 } 
	tGPIO_Ty≥Def
;

1007 
__IO
 
uöt32_t
 
MEMRMP
;

1008 
__IO
 
uöt32_t
 
PMC
;

1009 
__IO
 
uöt32_t
 
EXTICR
[4];

1010 
uöt32_t
 
RESERVED
[2];

1011 
__IO
 
uöt32_t
 
CMPCR
;

1012 } 
	tSYSCFG_Ty≥Def
;

1020 
__IO
 
uöt16_t
 
CR1
;

1021 
uöt16_t
 
RESERVED0
;

1022 
__IO
 
uöt16_t
 
CR2
;

1023 
uöt16_t
 
RESERVED1
;

1024 
__IO
 
uöt16_t
 
OAR1
;

1025 
uöt16_t
 
RESERVED2
;

1026 
__IO
 
uöt16_t
 
OAR2
;

1027 
uöt16_t
 
RESERVED3
;

1028 
__IO
 
uöt16_t
 
DR
;

1029 
uöt16_t
 
RESERVED4
;

1030 
__IO
 
uöt16_t
 
SR1
;

1031 
uöt16_t
 
RESERVED5
;

1032 
__IO
 
uöt16_t
 
SR2
;

1033 
uöt16_t
 
RESERVED6
;

1034 
__IO
 
uöt16_t
 
CCR
;

1035 
uöt16_t
 
RESERVED7
;

1036 
__IO
 
uöt16_t
 
TRISE
;

1037 
uöt16_t
 
RESERVED8
;

1038 
__IO
 
uöt16_t
 
FLTR
;

1039 
uöt16_t
 
RESERVED9
;

1040 } 
	tI2C_Ty≥Def
;

1048 
__IO
 
uöt32_t
 
KR
;

1049 
__IO
 
uöt32_t
 
PR
;

1050 
__IO
 
uöt32_t
 
RLR
;

1051 
__IO
 
uöt32_t
 
SR
;

1052 } 
	tIWDG_Ty≥Def
;

1060 
uöt32_t
 
RESERVED0
[2];

1061 
__IO
 
uöt32_t
 
SSCR
;

1062 
__IO
 
uöt32_t
 
BPCR
;

1063 
__IO
 
uöt32_t
 
AWCR
;

1064 
__IO
 
uöt32_t
 
TWCR
;

1065 
__IO
 
uöt32_t
 
GCR
;

1066 
uöt32_t
 
RESERVED1
[2];

1067 
__IO
 
uöt32_t
 
SRCR
;

1068 
uöt32_t
 
RESERVED2
[1];

1069 
__IO
 
uöt32_t
 
BCCR
;

1070 
uöt32_t
 
RESERVED3
[1];

1071 
__IO
 
uöt32_t
 
IER
;

1072 
__IO
 
uöt32_t
 
ISR
;

1073 
__IO
 
uöt32_t
 
ICR
;

1074 
__IO
 
uöt32_t
 
LIPCR
;

1075 
__IO
 
uöt32_t
 
CPSR
;

1076 
__IO
 
uöt32_t
 
CDSR
;

1077 } 
	tLTDC_Ty≥Def
;

1085 
__IO
 
uöt32_t
 
CR
;

1086 
__IO
 
uöt32_t
 
WHPCR
;

1087 
__IO
 
uöt32_t
 
WVPCR
;

1088 
__IO
 
uöt32_t
 
CKCR
;

1089 
__IO
 
uöt32_t
 
PFCR
;

1090 
__IO
 
uöt32_t
 
CACR
;

1091 
__IO
 
uöt32_t
 
DCCR
;

1092 
__IO
 
uöt32_t
 
BFCR
;

1093 
uöt32_t
 
RESERVED0
[2];

1094 
__IO
 
uöt32_t
 
CFBAR
;

1095 
__IO
 
uöt32_t
 
CFBLR
;

1096 
__IO
 
uöt32_t
 
CFBLNR
;

1097 
uöt32_t
 
RESERVED1
[3];

1098 
__IO
 
uöt32_t
 
CLUTWR
;

1100 } 
	tLTDC_Layî_Ty≥Def
;

1108 
__IO
 
uöt32_t
 
CR
;

1109 
__IO
 
uöt32_t
 
CSR
;

1110 } 
	tPWR_Ty≥Def
;

1118 
__IO
 
uöt32_t
 
CR
;

1119 
__IO
 
uöt32_t
 
PLLCFGR
;

1120 
__IO
 
uöt32_t
 
CFGR
;

1121 
__IO
 
uöt32_t
 
CIR
;

1122 
__IO
 
uöt32_t
 
AHB1RSTR
;

1123 
__IO
 
uöt32_t
 
AHB2RSTR
;

1124 
__IO
 
uöt32_t
 
AHB3RSTR
;

1125 
uöt32_t
 
RESERVED0
;

1126 
__IO
 
uöt32_t
 
APB1RSTR
;

1127 
__IO
 
uöt32_t
 
APB2RSTR
;

1128 
uöt32_t
 
RESERVED1
[2];

1129 
__IO
 
uöt32_t
 
AHB1ENR
;

1130 
__IO
 
uöt32_t
 
AHB2ENR
;

1131 
__IO
 
uöt32_t
 
AHB3ENR
;

1132 
uöt32_t
 
RESERVED2
;

1133 
__IO
 
uöt32_t
 
APB1ENR
;

1134 
__IO
 
uöt32_t
 
APB2ENR
;

1135 
uöt32_t
 
RESERVED3
[2];

1136 
__IO
 
uöt32_t
 
AHB1LPENR
;

1137 
__IO
 
uöt32_t
 
AHB2LPENR
;

1138 
__IO
 
uöt32_t
 
AHB3LPENR
;

1139 
uöt32_t
 
RESERVED4
;

1140 
__IO
 
uöt32_t
 
APB1LPENR
;

1141 
__IO
 
uöt32_t
 
APB2LPENR
;

1142 
uöt32_t
 
RESERVED5
[2];

1143 
__IO
 
uöt32_t
 
BDCR
;

1144 
__IO
 
uöt32_t
 
CSR
;

1145 
uöt32_t
 
RESERVED6
[2];

1146 
__IO
 
uöt32_t
 
SSCGR
;

1147 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

1148 
__IO
 
uöt32_t
 
PLLSAICFGR
;

1149 
__IO
 
uöt32_t
 
DCKCFGR
;

1151 } 
	tRCC_Ty≥Def
;

1159 
__IO
 
uöt32_t
 
TR
;

1160 
__IO
 
uöt32_t
 
DR
;

1161 
__IO
 
uöt32_t
 
CR
;

1162 
__IO
 
uöt32_t
 
ISR
;

1163 
__IO
 
uöt32_t
 
PRER
;

1164 
__IO
 
uöt32_t
 
WUTR
;

1165 
__IO
 
uöt32_t
 
CALIBR
;

1166 
__IO
 
uöt32_t
 
ALRMAR
;

1167 
__IO
 
uöt32_t
 
ALRMBR
;

1168 
__IO
 
uöt32_t
 
WPR
;

1169 
__IO
 
uöt32_t
 
SSR
;

1170 
__IO
 
uöt32_t
 
SHIFTR
;

1171 
__IO
 
uöt32_t
 
TSTR
;

1172 
__IO
 
uöt32_t
 
TSDR
;

1173 
__IO
 
uöt32_t
 
TSSSR
;

1174 
__IO
 
uöt32_t
 
CALR
;

1175 
__IO
 
uöt32_t
 
TAFCR
;

1176 
__IO
 
uöt32_t
 
ALRMASSR
;

1177 
__IO
 
uöt32_t
 
ALRMBSSR
;

1178 
uöt32_t
 
RESERVED7
;

1179 
__IO
 
uöt32_t
 
BKP0R
;

1180 
__IO
 
uöt32_t
 
BKP1R
;

1181 
__IO
 
uöt32_t
 
BKP2R
;

1182 
__IO
 
uöt32_t
 
BKP3R
;

1183 
__IO
 
uöt32_t
 
BKP4R
;

1184 
__IO
 
uöt32_t
 
BKP5R
;

1185 
__IO
 
uöt32_t
 
BKP6R
;

1186 
__IO
 
uöt32_t
 
BKP7R
;

1187 
__IO
 
uöt32_t
 
BKP8R
;

1188 
__IO
 
uöt32_t
 
BKP9R
;

1189 
__IO
 
uöt32_t
 
BKP10R
;

1190 
__IO
 
uöt32_t
 
BKP11R
;

1191 
__IO
 
uöt32_t
 
BKP12R
;

1192 
__IO
 
uöt32_t
 
BKP13R
;

1193 
__IO
 
uöt32_t
 
BKP14R
;

1194 
__IO
 
uöt32_t
 
BKP15R
;

1195 
__IO
 
uöt32_t
 
BKP16R
;

1196 
__IO
 
uöt32_t
 
BKP17R
;

1197 
__IO
 
uöt32_t
 
BKP18R
;

1198 
__IO
 
uöt32_t
 
BKP19R
;

1199 } 
	tRTC_Ty≥Def
;

1208 
__IO
 
uöt32_t
 
GCR
;

1209 } 
	tSAI_Ty≥Def
;

1213 
__IO
 
uöt32_t
 
CR1
;

1214 
__IO
 
uöt32_t
 
CR2
;

1215 
__IO
 
uöt32_t
 
FRCR
;

1216 
__IO
 
uöt32_t
 
SLOTR
;

1217 
__IO
 
uöt32_t
 
IMR
;

1218 
__IO
 
uöt32_t
 
SR
;

1219 
__IO
 
uöt32_t
 
CLRFR
;

1220 
__IO
 
uöt32_t
 
DR
;

1221 } 
	tSAI_Block_Ty≥Def
;

1229 
__IO
 
uöt32_t
 
POWER
;

1230 
__IO
 
uöt32_t
 
CLKCR
;

1231 
__IO
 
uöt32_t
 
ARG
;

1232 
__IO
 
uöt32_t
 
CMD
;

1233 
__I
 
uöt32_t
 
RESPCMD
;

1234 
__I
 
uöt32_t
 
RESP1
;

1235 
__I
 
uöt32_t
 
RESP2
;

1236 
__I
 
uöt32_t
 
RESP3
;

1237 
__I
 
uöt32_t
 
RESP4
;

1238 
__IO
 
uöt32_t
 
DTIMER
;

1239 
__IO
 
uöt32_t
 
DLEN
;

1240 
__IO
 
uöt32_t
 
DCTRL
;

1241 
__I
 
uöt32_t
 
DCOUNT
;

1242 
__I
 
uöt32_t
 
STA
;

1243 
__IO
 
uöt32_t
 
ICR
;

1244 
__IO
 
uöt32_t
 
MASK
;

1245 
uöt32_t
 
RESERVED0
[2];

1246 
__I
 
uöt32_t
 
FIFOCNT
;

1247 
uöt32_t
 
RESERVED1
[13];

1248 
__IO
 
uöt32_t
 
FIFO
;

1249 } 
	tSDIO_Ty≥Def
;

1257 
__IO
 
uöt16_t
 
CR1
;

1258 
uöt16_t
 
RESERVED0
;

1259 
__IO
 
uöt16_t
 
CR2
;

1260 
uöt16_t
 
RESERVED1
;

1261 
__IO
 
uöt16_t
 
SR
;

1262 
uöt16_t
 
RESERVED2
;

1263 
__IO
 
uöt16_t
 
DR
;

1264 
uöt16_t
 
RESERVED3
;

1265 
__IO
 
uöt16_t
 
CRCPR
;

1266 
uöt16_t
 
RESERVED4
;

1267 
__IO
 
uöt16_t
 
RXCRCR
;

1268 
uöt16_t
 
RESERVED5
;

1269 
__IO
 
uöt16_t
 
TXCRCR
;

1270 
uöt16_t
 
RESERVED6
;

1271 
__IO
 
uöt16_t
 
I2SCFGR
;

1272 
uöt16_t
 
RESERVED7
;

1273 
__IO
 
uöt16_t
 
I2SPR
;

1274 
uöt16_t
 
RESERVED8
;

1275 } 
	tSPI_Ty≥Def
;

1283 
__IO
 
uöt16_t
 
CR1
;

1284 
uöt16_t
 
RESERVED0
;

1285 
__IO
 
uöt16_t
 
CR2
;

1286 
uöt16_t
 
RESERVED1
;

1287 
__IO
 
uöt16_t
 
SMCR
;

1288 
uöt16_t
 
RESERVED2
;

1289 
__IO
 
uöt16_t
 
DIER
;

1290 
uöt16_t
 
RESERVED3
;

1291 
__IO
 
uöt16_t
 
SR
;

1292 
uöt16_t
 
RESERVED4
;

1293 
__IO
 
uöt16_t
 
EGR
;

1294 
uöt16_t
 
RESERVED5
;

1295 
__IO
 
uöt16_t
 
CCMR1
;

1296 
uöt16_t
 
RESERVED6
;

1297 
__IO
 
uöt16_t
 
CCMR2
;

1298 
uöt16_t
 
RESERVED7
;

1299 
__IO
 
uöt16_t
 
CCER
;

1300 
uöt16_t
 
RESERVED8
;

1301 
__IO
 
uöt32_t
 
CNT
;

1302 
__IO
 
uöt16_t
 
PSC
;

1303 
uöt16_t
 
RESERVED9
;

1304 
__IO
 
uöt32_t
 
ARR
;

1305 
__IO
 
uöt16_t
 
RCR
;

1306 
uöt16_t
 
RESERVED10
;

1307 
__IO
 
uöt32_t
 
CCR1
;

1308 
__IO
 
uöt32_t
 
CCR2
;

1309 
__IO
 
uöt32_t
 
CCR3
;

1310 
__IO
 
uöt32_t
 
CCR4
;

1311 
__IO
 
uöt16_t
 
BDTR
;

1312 
uöt16_t
 
RESERVED11
;

1313 
__IO
 
uöt16_t
 
DCR
;

1314 
uöt16_t
 
RESERVED12
;

1315 
__IO
 
uöt16_t
 
DMAR
;

1316 
uöt16_t
 
RESERVED13
;

1317 
__IO
 
uöt16_t
 
OR
;

1318 
uöt16_t
 
RESERVED14
;

1319 } 
	tTIM_Ty≥Def
;

1327 
__IO
 
uöt16_t
 
SR
;

1328 
uöt16_t
 
RESERVED0
;

1329 
__IO
 
uöt16_t
 
DR
;

1330 
uöt16_t
 
RESERVED1
;

1331 
__IO
 
uöt16_t
 
BRR
;

1332 
uöt16_t
 
RESERVED2
;

1333 
__IO
 
uöt16_t
 
CR1
;

1334 
uöt16_t
 
RESERVED3
;

1335 
__IO
 
uöt16_t
 
CR2
;

1336 
uöt16_t
 
RESERVED4
;

1337 
__IO
 
uöt16_t
 
CR3
;

1338 
uöt16_t
 
RESERVED5
;

1339 
__IO
 
uöt16_t
 
GTPR
;

1340 
uöt16_t
 
RESERVED6
;

1341 } 
	tUSART_Ty≥Def
;

1349 
__IO
 
uöt32_t
 
CR
;

1350 
__IO
 
uöt32_t
 
CFR
;

1351 
__IO
 
uöt32_t
 
SR
;

1352 } 
	tWWDG_Ty≥Def
;

1360 
__IO
 
uöt32_t
 
CR
;

1361 
__IO
 
uöt32_t
 
SR
;

1362 
__IO
 
uöt32_t
 
DR
;

1363 
__IO
 
uöt32_t
 
DOUT
;

1364 
__IO
 
uöt32_t
 
DMACR
;

1365 
__IO
 
uöt32_t
 
IMSCR
;

1366 
__IO
 
uöt32_t
 
RISR
;

1367 
__IO
 
uöt32_t
 
MISR
;

1368 
__IO
 
uöt32_t
 
K0LR
;

1369 
__IO
 
uöt32_t
 
K0RR
;

1370 
__IO
 
uöt32_t
 
K1LR
;

1371 
__IO
 
uöt32_t
 
K1RR
;

1372 
__IO
 
uöt32_t
 
K2LR
;

1373 
__IO
 
uöt32_t
 
K2RR
;

1374 
__IO
 
uöt32_t
 
K3LR
;

1375 
__IO
 
uöt32_t
 
K3RR
;

1376 
__IO
 
uöt32_t
 
IV0LR
;

1377 
__IO
 
uöt32_t
 
IV0RR
;

1378 
__IO
 
uöt32_t
 
IV1LR
;

1379 
__IO
 
uöt32_t
 
IV1RR
;

1380 
__IO
 
uöt32_t
 
CSGCMCCM0R
;

1381 
__IO
 
uöt32_t
 
CSGCMCCM1R
;

1382 
__IO
 
uöt32_t
 
CSGCMCCM2R
;

1383 
__IO
 
uöt32_t
 
CSGCMCCM3R
;

1384 
__IO
 
uöt32_t
 
CSGCMCCM4R
;

1385 
__IO
 
uöt32_t
 
CSGCMCCM5R
;

1386 
__IO
 
uöt32_t
 
CSGCMCCM6R
;

1387 
__IO
 
uöt32_t
 
CSGCMCCM7R
;

1388 
__IO
 
uöt32_t
 
CSGCM0R
;

1389 
__IO
 
uöt32_t
 
CSGCM1R
;

1390 
__IO
 
uöt32_t
 
CSGCM2R
;

1391 
__IO
 
uöt32_t
 
CSGCM3R
;

1392 
__IO
 
uöt32_t
 
CSGCM4R
;

1393 
__IO
 
uöt32_t
 
CSGCM5R
;

1394 
__IO
 
uöt32_t
 
CSGCM6R
;

1395 
__IO
 
uöt32_t
 
CSGCM7R
;

1396 } 
	tCRYP_Ty≥Def
;

1404 
__IO
 
uöt32_t
 
CR
;

1405 
__IO
 
uöt32_t
 
DIN
;

1406 
__IO
 
uöt32_t
 
STR
;

1407 
__IO
 
uöt32_t
 
HR
[5];

1408 
__IO
 
uöt32_t
 
IMR
;

1409 
__IO
 
uöt32_t
 
SR
;

1410 
uöt32_t
 
RESERVED
[52];

1411 
__IO
 
uöt32_t
 
CSR
[54];

1412 } 
	tHASH_Ty≥Def
;

1420 
__IO
 
uöt32_t
 
HR
[8];

1421 } 
	tHASH_DIGEST_Ty≥Def
;

1429 
__IO
 
uöt32_t
 
CR
;

1430 
__IO
 
uöt32_t
 
SR
;

1431 
__IO
 
uöt32_t
 
DR
;

1432 } 
	tRNG_Ty≥Def
;

1441 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1442 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1443 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1444 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1445 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

1446 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1447 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1449 #i‡
deföed
 (
STM32F40_41xxx
)

1450 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1453 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1454 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1457 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1458 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1459 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1460 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

1461 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1462 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1465 
	#SRAM_BASE
 
SRAM1_BASE


	)

1466 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1470 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1471 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1472 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1473 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1476 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1477 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1478 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1479 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1480 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1481 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1482 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1483 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1484 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1485 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1486 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1487 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1488 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1489 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1490 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1491 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1492 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1493 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1494 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1495 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1496 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1497 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1498 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1499 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1500 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1501 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1502 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1503 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1504 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

1507 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1508 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1509 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1510 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1511 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1512 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1513 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1514 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1515 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1516 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1517 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1518 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1519 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1520 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1521 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1522 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1523 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1524 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1525 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

1526 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

1527 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

1528 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

1529 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

1530 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

1533 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1534 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1535 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1536 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1537 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1538 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1539 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1540 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1541 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1542 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

1543 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

1544 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1545 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1546 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1547 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1548 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1549 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1550 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1551 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1552 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1553 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1554 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1555 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1556 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1557 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1558 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1559 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1560 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1561 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1562 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1563 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1564 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1565 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1566 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1567 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1568 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1569 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1570 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

1573 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1574 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1575 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1576 
	#HASH_DIGEST_BASE
 (
AHB2PERIPH_BASE
 + 0x60710)

	)

1577 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1579 #i‡
deföed
 (
STM32F40_41xxx
)

1581 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1582 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1583 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1584 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1585 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1588 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1590 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

1591 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

1592 
	#FMC_B™k2_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

1593 
	#FMC_B™k3_R_BASE
 (
FMC_R_BASE
 + 0x0080)

	)

1594 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

1595 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

1599 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1608 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1609 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1610 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1611 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1612 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1613 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1614 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1615 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1616 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1617 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1618 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1619 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1620 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1621 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1622 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1623 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1624 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1625 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1626 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1627 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1628 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1629 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1630 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1631 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1632 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1633 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1634 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1635 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

1636 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

1637 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1638 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1639 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1640 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1641 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1642 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1643 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1644 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1645 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1646 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1647 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

1648 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1649 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1650 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1651 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1652 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1653 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

1654 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

1655 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

1656 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

1657 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

1658 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

1659 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

1660 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

1661 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1662 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1663 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1664 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1665 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1666 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1667 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1668 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1669 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1670 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

1671 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

1672 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1673 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1674 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1675 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1676 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1677 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1678 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1679 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1680 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1681 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1682 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1683 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1684 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1685 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1686 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1687 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1688 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1689 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1690 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1691 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1692 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1693 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1694 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

1695 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1696 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

1697 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

1698 
	#HASH_DIGEST
 ((
HASH_DIGEST_Ty≥Def
 *Ë
HASH_DIGEST_BASE
)

	)

1699 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1701 #i‡
deföed
 (
STM32F40_41xxx
)

1702 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1703 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1704 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1705 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1706 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1709 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1710 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

1711 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

1712 
	#FMC_B™k2
 ((
FMC_B™k2_Ty≥Def
 *Ë
FMC_B™k2_R_BASE
)

	)

1713 
	#FMC_B™k3
 ((
FMC_B™k3_Ty≥Def
 *Ë
FMC_B™k3_R_BASE
)

	)

1714 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

1715 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

1718 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1742 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

1743 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

1744 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

1745 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

1746 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

1747 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

1750 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1751 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1752 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1753 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1754 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1755 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1756 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1757 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1758 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1759 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1760 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1761 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1762 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1763 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1764 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1765 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1766 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1767 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1768 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1769 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1770 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1771 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1772 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1773 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1776 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1777 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1778 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1779 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1780 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1781 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1782 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1783 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1784 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1785 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1786 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1787 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1788 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1789 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1790 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1791 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1792 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1793 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1794 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1795 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1796 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1797 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1798 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1799 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1802 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1803 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1804 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1805 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1806 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1807 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1808 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1809 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1810 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1811 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1812 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1813 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1814 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1815 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1816 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1817 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1818 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1819 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1820 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1821 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1822 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1823 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1824 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1825 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1826 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1827 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1828 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1829 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1830 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1831 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1832 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1833 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1834 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1835 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1836 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1837 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1840 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1841 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1842 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1843 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1844 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1845 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1846 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1847 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1848 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1849 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1850 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1851 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1852 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1853 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1854 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1855 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1856 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1857 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1858 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1859 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1860 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1861 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1862 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1863 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1864 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1865 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1866 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1867 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1868 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1869 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1870 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1871 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1872 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1873 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1874 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1875 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1876 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1877 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1878 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1879 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1882 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

1885 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

1888 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

1891 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

1894 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

1897 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

1900 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1901 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1902 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1903 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1904 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1905 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1906 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1907 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1908 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1909 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1910 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1911 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1912 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1913 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1914 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1915 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1916 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1917 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1918 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1919 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1920 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1921 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1922 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1923 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1924 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1925 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1926 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1927 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1928 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1931 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1932 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1933 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1934 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1935 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1936 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1937 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1938 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1939 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1940 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1941 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1942 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1943 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1944 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1945 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1946 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1947 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1948 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1949 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1950 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1951 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1952 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1953 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1954 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1955 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1956 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1957 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1958 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1959 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1960 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1961 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1962 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1963 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1964 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1965 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1966 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1969 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1970 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1971 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1972 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1973 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1974 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1975 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1976 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1977 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1978 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1979 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1980 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1981 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1982 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1983 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1984 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1985 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1986 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1987 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1988 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1989 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1990 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1991 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1992 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1993 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1994 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1995 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1996 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1997 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1998 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1999 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2000 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2001 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2002 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2003 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2004 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2007 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2008 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2009 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2010 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2011 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2012 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2013 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2014 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2015 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2016 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2017 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2018 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2019 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2020 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2021 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2022 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2023 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2024 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2025 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2026 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2027 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2028 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2029 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2030 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2031 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2032 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2033 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2036 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2039 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2042 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2045 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2048 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2049 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2052 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2053 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2054 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2055 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2056 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2057 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2058 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2059 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2060 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2061 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2062 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2063 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2064 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2065 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2066 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2067 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2068 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2069 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2072 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2073 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2074 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2075 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2076 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2077 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2078 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2079 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2080 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2081 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2082 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2083 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2084 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2085 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2086 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2087 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2088 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2089 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2090 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2091 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2094 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2095 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2104 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2105 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2106 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2107 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2108 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2109 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2110 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2111 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2112 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2115 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2116 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2117 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2118 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2119 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2120 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2121 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2122 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2123 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2126 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2127 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2128 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2129 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2130 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2131 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2132 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2133 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2134 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2135 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2137 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2138 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2139 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2140 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2141 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2143 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2144 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2145 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2146 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2148 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2149 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2150 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2151 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2154 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2155 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2156 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2157 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2160 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2161 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2162 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2163 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2166 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2167 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2168 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2169 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2170 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2171 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2172 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2173 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2174 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2175 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2176 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2177 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2178 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2179 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2182 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2183 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2184 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2186 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2187 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2188 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2189 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2191 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2192 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2195 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2196 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2197 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2198 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2199 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2200 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2204 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2205 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2206 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2207 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2208 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2211 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2212 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2213 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2216 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2217 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2218 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2219 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2222 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2223 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2224 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2225 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2228 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2229 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2230 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2231 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2232 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2235 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2236 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2237 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2240 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2241 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2242 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2243 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2246 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2247 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2248 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2249 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2252 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2253 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2254 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2255 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2256 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2259 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2260 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2261 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2264 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2265 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2266 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2267 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2270 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2271 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2272 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2273 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2276 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2277 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2278 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2279 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2282 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2283 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2284 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2287 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2288 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2289 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2290 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2293 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2294 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2295 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2296 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2299 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2300 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2301 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2302 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2305 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2306 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2307 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2310 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2311 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2312 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2313 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2316 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2317 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2318 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2319 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2323 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2326 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2327 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2328 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2329 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2330 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2331 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2332 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2333 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2334 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2335 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2336 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2337 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2338 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2339 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2340 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2343 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2344 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2345 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2346 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2347 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2348 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2349 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2350 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2351 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2352 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2353 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2354 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2355 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2356 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2357 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2360 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2361 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2362 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2363 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2364 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2365 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2366 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2367 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2368 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2369 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2370 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2371 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2372 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2373 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2374 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2377 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2378 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2379 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2380 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2381 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2382 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2383 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2384 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2385 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2386 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2387 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2388 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2389 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2390 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2391 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2394 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2395 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2396 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2397 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2398 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2399 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2400 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2401 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2402 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2403 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2404 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2405 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2406 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2407 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2408 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2409 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2410 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2411 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2412 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2413 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2414 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2415 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2416 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2417 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2418 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2419 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2420 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2421 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2422 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2423 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2424 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2425 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2428 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2429 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2430 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2431 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2432 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2433 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2434 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2435 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2436 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2437 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2438 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2439 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2440 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2441 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2442 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2443 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2444 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2445 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2446 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2447 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2448 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2449 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2450 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2451 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2452 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2453 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2454 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2455 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2456 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2457 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2458 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2459 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2462 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2463 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2464 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2465 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2466 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2467 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2468 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2469 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2470 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2471 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2472 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2473 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2474 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2475 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2476 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2477 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2478 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2479 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2480 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2481 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2482 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2483 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2484 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2485 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2486 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2487 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2488 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2489 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2490 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2491 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2492 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2493 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2496 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2497 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2498 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2499 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2500 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2501 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2502 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2503 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2504 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2505 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2506 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2507 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2508 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2509 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2510 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2511 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2512 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2513 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2514 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2515 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2516 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2517 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2518 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2519 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2520 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2521 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2522 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2523 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2524 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2525 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2526 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2527 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2530 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2531 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2532 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2533 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2534 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2535 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2536 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2537 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2538 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2539 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2540 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2541 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2542 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2543 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2544 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2545 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2546 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2547 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2548 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2549 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2550 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2551 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2552 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2553 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2554 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2555 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2556 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2557 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2558 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2559 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2560 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2561 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2564 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2565 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2566 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2567 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2568 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2569 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2570 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2571 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2572 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2573 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2574 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2575 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2576 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2577 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2578 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2579 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2580 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2581 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2582 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2583 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2584 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2585 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2586 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2587 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2588 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2589 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2590 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2591 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2592 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2593 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2594 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2595 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2598 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2599 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2600 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2601 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2602 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2603 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2604 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2605 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2606 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2607 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2608 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2609 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2610 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2611 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2612 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2613 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2614 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2615 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2616 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2617 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2618 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2619 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2620 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2621 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2622 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2623 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2624 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2625 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2626 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2627 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2628 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2629 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2632 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2633 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2634 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2635 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2636 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2637 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2638 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2639 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2640 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2641 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2642 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2643 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2644 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2645 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2646 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2647 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2648 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2649 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2650 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2651 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2652 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2653 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2654 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2655 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2656 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2657 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2658 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2659 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2660 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2661 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2662 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2663 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2666 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2667 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2668 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2669 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2670 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2671 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2672 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2673 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2674 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2675 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2676 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2677 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2678 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2679 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2680 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2681 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2682 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2683 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2684 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2685 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2686 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2687 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2688 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2689 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2690 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2691 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2692 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2693 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2694 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2695 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2696 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2697 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2700 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2701 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2702 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2703 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2704 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2705 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2706 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2707 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2708 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2709 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2710 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2711 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2712 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2713 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2714 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2715 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2716 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2717 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2718 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2719 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2720 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2721 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2722 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2723 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2724 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2725 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2726 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2727 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2728 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2729 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2730 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2731 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2734 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2735 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2736 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2737 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2738 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2739 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2740 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2741 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2742 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2743 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2744 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2745 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2746 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2747 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2748 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2749 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2750 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2751 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2752 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2753 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2754 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2755 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2756 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2757 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2758 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2759 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2760 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2761 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2762 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2763 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2764 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2765 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2768 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2769 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2770 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2771 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2772 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2773 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2774 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2775 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2776 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2777 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2778 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2779 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2780 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2781 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2782 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2783 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2784 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2785 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2786 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2787 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2788 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2789 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2790 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2791 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2792 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2793 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2794 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2795 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2796 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2797 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2798 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2799 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2802 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2803 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2804 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2805 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2806 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2807 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2808 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2809 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2810 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2811 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2812 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2813 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2814 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2815 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2816 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2817 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2818 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2819 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2820 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2821 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2822 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2823 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2824 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2825 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2826 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2827 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2828 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2829 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2830 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2831 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2832 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2833 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2836 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2837 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2838 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2839 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2840 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2841 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2842 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2843 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2844 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2845 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2846 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2847 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2848 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2849 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2850 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2851 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2852 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2853 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2854 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2855 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2856 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2857 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2858 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2859 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2860 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2861 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2862 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2863 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2864 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2865 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2866 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2867 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2870 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2871 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2872 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2873 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2874 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2875 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2876 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2877 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2878 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2879 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2880 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2881 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2882 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2883 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2884 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2885 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2886 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2887 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2888 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2889 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2890 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2891 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2892 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2893 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2894 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2895 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2896 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2897 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2898 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2899 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2900 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2901 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2904 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2905 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2906 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2907 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2908 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2909 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2910 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2911 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2912 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2913 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2914 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2915 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2916 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2917 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2918 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2919 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2920 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2921 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2922 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2923 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2924 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2925 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2926 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2927 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2928 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2929 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2930 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2931 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2932 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2933 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2934 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2935 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2938 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2939 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2940 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2941 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2942 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2943 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2944 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2945 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2946 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2947 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2948 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2949 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2950 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2951 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2952 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2953 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2954 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2955 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2956 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2957 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2958 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2959 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2960 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2961 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2962 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2963 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2964 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2965 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2966 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2967 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2968 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2969 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2972 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2973 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2974 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2975 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2976 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2977 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2978 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2979 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2980 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2981 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2982 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2983 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2984 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2985 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2986 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2987 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2988 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2989 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2990 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2991 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2992 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2993 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2994 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2995 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2996 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2997 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2998 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2999 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3000 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3001 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3002 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3003 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3006 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3007 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3008 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3009 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3010 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3011 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3012 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3013 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3014 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3015 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3016 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3017 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3018 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3019 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3020 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3021 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3022 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3023 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3024 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3025 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3026 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3027 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3028 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3029 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3030 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3031 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3032 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3033 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3034 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3035 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3036 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3037 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3040 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3041 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3042 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3043 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3044 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3045 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3046 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3047 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3048 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3049 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3050 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3051 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3052 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3053 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3054 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3055 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3056 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3057 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3058 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3059 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3060 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3061 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3062 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3063 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3064 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3065 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3066 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3067 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3068 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3069 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3070 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3071 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3074 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3075 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3076 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3077 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3078 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3079 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3080 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3081 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3082 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3083 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3084 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3085 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3086 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3087 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3088 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3089 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3090 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3091 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3092 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3093 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3094 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3095 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3096 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3097 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3098 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3099 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3100 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3101 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3102 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3103 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3104 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3105 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3108 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3109 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3110 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3111 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3112 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3113 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3114 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3115 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3116 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3117 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3118 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3119 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3120 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3121 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3122 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3123 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3124 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3125 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3126 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3127 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3128 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3129 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3130 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3131 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3132 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3133 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3134 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3135 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3136 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3137 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3138 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3139 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3142 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3143 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3144 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3145 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3146 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3147 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3148 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3149 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3150 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3151 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3152 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3153 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3154 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3155 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3156 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3157 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3158 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3159 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3160 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3161 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3162 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3163 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3164 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3165 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3166 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3167 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3168 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3169 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3170 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3171 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3172 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3173 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3176 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3177 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3178 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3179 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3180 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3181 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3182 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3183 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3184 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3185 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3186 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3187 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3188 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3189 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3190 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3191 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3192 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3193 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3194 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3195 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3196 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3197 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3198 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3199 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3200 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3201 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3202 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3203 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3204 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3205 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3206 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3207 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3210 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3211 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3212 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3213 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3214 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3215 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3216 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3217 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3218 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3219 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3220 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3221 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3222 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3223 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3224 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3225 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3226 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3227 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3228 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3229 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3230 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3231 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3232 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3233 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3234 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3235 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3236 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3237 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3238 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3239 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3240 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3241 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3244 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3245 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3246 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3247 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3248 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3249 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3250 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3251 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3252 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3253 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3254 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3255 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3256 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3257 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3258 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3259 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3260 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3261 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3262 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3263 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3264 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3265 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3266 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3267 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3268 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3269 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3270 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3271 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3272 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3273 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3274 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3275 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3278 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3279 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3280 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3281 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3282 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3283 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3284 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3285 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3286 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3287 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3288 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3289 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3290 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3291 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3292 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3293 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3294 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3295 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3296 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3297 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3298 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3299 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3300 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3301 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3302 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3303 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3304 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3305 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3306 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3307 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3308 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3309 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3312 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3313 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3314 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3315 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3316 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3317 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3318 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3319 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3320 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3321 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3322 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3323 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3324 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3325 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3326 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3327 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3328 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3329 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3330 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3331 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3332 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3333 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3334 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3335 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3336 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3337 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3338 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3339 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3340 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3341 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3342 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3343 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3351 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3355 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3359 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3367 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3369 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00080038)

	)

3370 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3371 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3372 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3373 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3374 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3375 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3376 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3377 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3378 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3379 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3380 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3382 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3383 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3384 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3385 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3386 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3387 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3388 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3389 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3391 
	#CRYP_CR_GCM_CCMPH
 ((
uöt32_t
)0x00030000)

	)

3392 
	#CRYP_CR_GCM_CCMPH_0
 ((
uöt32_t
)0x00010000)

	)

3393 
	#CRYP_CR_GCM_CCMPH_1
 ((
uöt32_t
)0x00020000)

	)

3394 
	#CRYP_CR_ALGOMODE_3
 ((
uöt32_t
)0x00080000)

	)

3397 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3398 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3399 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3400 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3401 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3403 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3404 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3406 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3407 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3409 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3410 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3412 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3413 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3421 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3422 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3423 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3425 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3426 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3427 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3428 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3430 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3431 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3432 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3434 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3435 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3436 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3437 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3438 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3440 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3441 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3442 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3443 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3445 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3446 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3447 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3448 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3450 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3451 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3452 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3454 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3455 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3456 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3457 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3458 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3460 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3463 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3464 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3467 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3470 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3473 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3476 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3479 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3482 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3485 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3486 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3489 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3490 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3493 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3494 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3497 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3500 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3503 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3504 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3518 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3519 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3520 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3521 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3522 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3523 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3524 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3525 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3526 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3527 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3528 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3529 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3530 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3531 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3534 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3535 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3536 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3539 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3540 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3541 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3542 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3543 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3546 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3547 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3548 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3549 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3550 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3553 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3554 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3555 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3556 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3557 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3560 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3561 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3562 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3563 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3564 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3572 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3573 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3574 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3575 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3576 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3577 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3578 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3579 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3580 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3581 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3582 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3583 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3584 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3585 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3586 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3587 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3588 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3589 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3590 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3591 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3592 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3593 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3594 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3595 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3596 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3597 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3598 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3599 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3600 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3601 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3602 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3603 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3604 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3605 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3606 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3609 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3610 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3611 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3612 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3613 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3614 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3615 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3616 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3617 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3618 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3619 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3620 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3621 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3622 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3623 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3624 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3625 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3628 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3629 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3630 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3631 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3632 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3633 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3634 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3635 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3636 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3639 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3640 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3641 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3642 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3643 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3644 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3645 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3646 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3647 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3648 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3649 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3650 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3651 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3652 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3653 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3654 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3655 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3656 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3657 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3658 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3661 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3662 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3663 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3664 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3665 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3666 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3667 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3668 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3669 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3670 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3671 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3672 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3673 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3674 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3675 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3676 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3677 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3678 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3679 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3680 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3683 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3684 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3685 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3686 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3687 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3688 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3689 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3690 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3691 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3692 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3693 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3694 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3695 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3696 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3697 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3698 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3699 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3700 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3701 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3702 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3705 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3706 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3707 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3708 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3709 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3710 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3711 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3712 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3713 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3714 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3715 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3716 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3717 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3718 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3719 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3720 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3721 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3722 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3723 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3724 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

3734 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

3735 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

3736 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

3737 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

3738 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

3739 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

3740 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

3741 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

3742 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

3743 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

3747 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

3748 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

3749 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

3750 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3751 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3752 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

3756 
	#DMA2D_IFSR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

3757 
	#DMA2D_IFSR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

3758 
	#DMA2D_IFSR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

3759 
	#DMA2D_IFSR_CCAEIF
 ((
uöt32_t
)0x00000008Ë

	)

3760 
	#DMA2D_IFSR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

3761 
	#DMA2D_IFSR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

3765 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3769 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3773 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3777 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3781 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3782 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3783 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3784 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3785 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3786 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3790 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3791 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3792 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3796 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

3797 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

3798 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

3799 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

3800 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

3801 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

3805 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

3806 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

3807 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

3811 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3815 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3819 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

3825 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

3826 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3827 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

3828 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

3831 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

3832 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

3833 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

3836 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

3837 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

3838 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

3839 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

3842 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

3843 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

3844 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

3845 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

3849 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3853 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

3857 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

3858 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

3862 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

3866 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

3867 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

3882 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3883 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3884 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3885 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3886 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3887 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3888 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3889 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3890 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3891 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3892 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3895 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3896 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3897 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3898 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3899 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3900 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3901 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3904 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3905 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3906 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3907 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3908 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3909 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3910 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3911 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3912 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3913 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3914 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3915 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3916 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3917 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3918 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3919 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3920 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3921 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3922 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3923 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3926 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3927 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3928 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3929 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3930 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3931 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3932 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3933 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3934 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3935 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3936 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3937 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3938 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3939 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3940 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3941 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3942 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3943 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3944 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3945 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3948 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3949 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3950 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3951 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3952 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3953 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3954 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3955 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3956 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3957 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3958 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3959 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3960 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3961 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3962 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3963 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3964 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3965 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3966 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3967 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3970 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3971 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3972 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3973 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3974 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3975 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3976 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3977 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3978 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3979 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3980 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3981 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3982 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3983 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3984 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3985 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3986 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3987 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3988 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3989 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3992 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3993 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3994 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3995 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3996 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3997 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3998 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3999 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

4000 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4001 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4002 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4003 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4004 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4005 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4006 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4007 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4008 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4009 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4010 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4011 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4019 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

4020 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4021 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4022 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4023 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4024 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4025 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4026 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4027 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4028 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

4029 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

4030 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

4031 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

4032 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

4033 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

4034 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

4035 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

4037 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4038 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4039 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4040 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4041 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4042 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4043 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4046 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4047 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4048 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4049 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4050 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4051 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4052 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4055 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4056 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4057 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4058 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

4059 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

4060 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4061 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4062 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4063 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4064 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000040)

	)

4065 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

4066 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4067 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4068 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

4069 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4070 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4071 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4074 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4075 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4076 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4077 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4078 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4079 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

4081 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4082 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4083 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4084 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

4085 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4086 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4087 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4088 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4089 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4090 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4091 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4092 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4093 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4094 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4095 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4096 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4097 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4098 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4099 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4100 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4101 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4102 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4103 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4104 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4105 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4107 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

4108 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

4111 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4112 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4113 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4114 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4115 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4116 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4117 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4118 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4119 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4120 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4121 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4122 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4123 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4125 #i‡
deföed
 (
STM32F40_41xxx
)

4132 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4133 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4135 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4136 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4137 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4139 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4140 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4141 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4143 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4144 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4145 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4146 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4147 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4148 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4149 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4150 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4151 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4152 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4155 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4156 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4158 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4159 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4160 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4162 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4163 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4164 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4166 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4167 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4168 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4169 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4170 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4171 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4172 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4173 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4174 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4175 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4178 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4179 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4181 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4182 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4183 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4185 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4186 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4187 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4189 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4190 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4191 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4192 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4193 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4194 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4195 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4196 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4197 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4198 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4201 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4202 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4204 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4205 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4206 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4208 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4209 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4210 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4212 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4213 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4214 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4215 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4216 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4217 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4218 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4219 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4220 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4221 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4224 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4225 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4226 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4227 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4228 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4230 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4231 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4232 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4233 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4234 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4236 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4237 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4238 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4239 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4240 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4242 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4243 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4244 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4245 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4246 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4248 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4249 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4250 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4251 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4252 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4254 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4255 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4256 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4257 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4258 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4260 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4261 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4262 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4265 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4266 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4267 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4268 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4269 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4271 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4272 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4273 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4274 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4275 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4277 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4278 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4279 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4280 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4281 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4283 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4284 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4285 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4286 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4287 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4289 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4290 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4291 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4292 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4293 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4295 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4296 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4297 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4298 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4299 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4301 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4302 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4303 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4306 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4307 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4308 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4309 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4310 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4312 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4313 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4314 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4315 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4316 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4318 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4319 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4320 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4321 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4322 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4324 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4325 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4326 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4327 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4328 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4330 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4331 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4332 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4333 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4334 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4336 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4337 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4338 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4339 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4340 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4342 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4343 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4344 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4347 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4348 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4349 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4350 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4351 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4353 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4354 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4355 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4356 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4357 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4359 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4360 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4361 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4362 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4363 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4365 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4366 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4367 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4368 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4369 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4371 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4372 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4373 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4374 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4375 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4377 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4378 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4379 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4380 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4381 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4383 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4384 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4385 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4388 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4389 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4390 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4391 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4392 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4394 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4395 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4396 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4397 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4398 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4400 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4401 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4402 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4403 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4404 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4406 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4407 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4408 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4409 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4410 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4412 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4413 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4414 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4415 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4416 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4418 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4419 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4420 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4423 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4424 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4425 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4426 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4427 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4429 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4430 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4431 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4432 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4433 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4435 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4436 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4437 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4438 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4439 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4441 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4442 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4443 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4444 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4445 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4447 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4448 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4449 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4450 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4451 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4453 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4454 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4455 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4458 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4459 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4460 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4461 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4462 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4464 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4465 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4466 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4467 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4468 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4470 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4471 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4472 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4473 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4474 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4476 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4477 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4478 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4479 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4480 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4482 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4483 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4484 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4485 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4486 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4488 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4489 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4490 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4493 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4494 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4495 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4496 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4497 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4499 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4500 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4501 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4502 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4503 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4505 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4506 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4507 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4508 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4509 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4511 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4512 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4513 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4514 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4515 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4517 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4518 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4519 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4520 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4521 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4523 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4524 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4525 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4528 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4529 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4530 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4532 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4533 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4534 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4536 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4538 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4539 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4540 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4541 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4542 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4544 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4545 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4546 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4547 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4548 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4550 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4551 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4552 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4553 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4556 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4557 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4558 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4560 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4561 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4562 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4564 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4566 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4567 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4568 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4569 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4570 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4572 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4573 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4574 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4575 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4576 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4578 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4579 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4580 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4581 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4584 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4585 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4586 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4588 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4589 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4590 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4592 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4594 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4595 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4596 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4597 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4598 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4600 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4601 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4602 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4603 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4604 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4606 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4607 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4608 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4609 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4612 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4613 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4614 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4615 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4616 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4617 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4618 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4621 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4622 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4623 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4624 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4625 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4626 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4627 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4630 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4631 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4632 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4633 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4634 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4635 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4636 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4639 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4640 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4641 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4642 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4643 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4644 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4645 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4646 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4647 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4649 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4650 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4651 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4652 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4653 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4654 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4655 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4656 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4657 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4659 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4660 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4661 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4662 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4663 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4664 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4665 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4666 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4667 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4669 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4670 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4671 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4672 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4673 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4674 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4675 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4676 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4677 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4680 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4681 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4682 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4683 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4684 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4685 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4686 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4687 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4688 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4690 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4691 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4692 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4693 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4694 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4695 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4696 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4697 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4698 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4700 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4701 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4702 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4703 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4704 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4705 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4706 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4707 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4708 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4710 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4711 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4712 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4713 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4714 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4715 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4716 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4717 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4718 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4721 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4722 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4723 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4724 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4725 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4726 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4727 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4728 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4729 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4731 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4732 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4733 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4734 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4735 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4736 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4737 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4738 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4739 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4741 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4742 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4743 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4744 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4745 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4746 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4747 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4748 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4749 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4751 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4752 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4753 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4754 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4755 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4756 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4757 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4758 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4759 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4762 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4763 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4764 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4765 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4766 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4767 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4768 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4769 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4770 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4772 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4773 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4774 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4775 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4776 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4777 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4778 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4779 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4780 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4782 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4783 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4784 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4785 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4786 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4787 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4788 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4789 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4790 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4792 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4793 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4794 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4795 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4796 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4797 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4798 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4799 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4800 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4803 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4804 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4805 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4806 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4807 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4808 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4809 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4810 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4811 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4813 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4814 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4815 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4816 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4817 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4818 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4819 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4820 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4821 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4823 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4824 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4825 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4826 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4827 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4828 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4829 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4830 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4831 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4833 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4834 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4835 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4836 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4837 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4838 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4839 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4840 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4841 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4844 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4845 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4846 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4847 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4848 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4849 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4850 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4851 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4852 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4854 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4855 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4856 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4857 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4858 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4859 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4860 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4861 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4862 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4864 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4865 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4866 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4867 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4868 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4869 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4870 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4871 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4872 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4874 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4875 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4876 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4877 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4878 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4879 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4880 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4881 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4882 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4885 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4886 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4887 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4888 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4889 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4890 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4891 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4892 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4893 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4895 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4896 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4897 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4898 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4899 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4900 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4901 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4902 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4903 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4905 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4906 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4907 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4908 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4909 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4910 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4911 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4912 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4913 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4915 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4916 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4917 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4918 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4919 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4920 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4921 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4922 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4923 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4926 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4929 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4932 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

4939 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4940 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4942 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4943 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4944 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4946 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4947 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4948 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4950 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4951 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4952 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4953 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4954 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4955 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4956 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4957 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4958 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4959 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4960 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

4963 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4964 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4966 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4967 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4968 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4970 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4971 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4972 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4974 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4975 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4976 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4977 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4978 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4979 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4980 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4981 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4982 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4983 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4986 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4987 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4989 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4990 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4991 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4993 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4994 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4995 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4997 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4998 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4999 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5000 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5001 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5002 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5003 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5004 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5005 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5006 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5009 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5010 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5012 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5013 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5014 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5016 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5017 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5018 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5020 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5021 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5022 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5023 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5024 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5025 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5026 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5027 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5028 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5029 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5032 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5033 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5034 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5035 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5036 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5038 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5039 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5040 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5041 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5042 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5044 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5045 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5046 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5047 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5048 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5049 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5050 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5051 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5052 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5054 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5055 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5056 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5057 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5058 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5060 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5061 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5062 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5063 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5064 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5066 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5067 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5068 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5069 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5070 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5072 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5073 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5074 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5077 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5078 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5079 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5080 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5081 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5083 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5084 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5085 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5086 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5087 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5089 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5090 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5091 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5092 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5093 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5094 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5095 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5096 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5097 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5099 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5100 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5101 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5102 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5103 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5105 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5106 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5107 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5108 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5109 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5111 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5112 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5113 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5114 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5115 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5117 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5118 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5119 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5122 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5123 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5124 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5125 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5126 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5128 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5129 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5130 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5131 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5132 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5134 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5135 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5136 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5137 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5138 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5139 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5140 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5141 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5142 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5144 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5145 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5146 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5147 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5148 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5150 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5151 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5152 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5153 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5154 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5156 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5157 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5158 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5159 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5160 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5162 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5163 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5164 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5167 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5168 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5169 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5170 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5171 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5173 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5174 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5175 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5176 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5177 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5179 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5180 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5181 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5182 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5183 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5184 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5185 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5186 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5187 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5189 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5190 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5191 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5192 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5193 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5195 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5196 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5197 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5198 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5199 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5201 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5202 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5203 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5204 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5205 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5207 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5208 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5209 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5212 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5213 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5214 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5215 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5216 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5218 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5219 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5220 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5221 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5222 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5224 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5225 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5226 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5227 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5228 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5229 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5230 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5231 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5232 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5234 
	#FMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5235 
	#FMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5236 
	#FMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5237 
	#FMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5238 
	#FMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5240 
	#FMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5241 
	#FMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5242 
	#FMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5243 
	#FMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5244 
	#FMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5246 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5247 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5248 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5251 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5252 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5253 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5254 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5255 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5257 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5258 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5259 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5260 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5261 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5263 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5264 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5265 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5266 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5267 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5268 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5269 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5270 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5271 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5273 
	#FMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5274 
	#FMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5275 
	#FMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5276 
	#FMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5277 
	#FMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5279 
	#FMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5280 
	#FMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5281 
	#FMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5282 
	#FMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5283 
	#FMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5285 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5286 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5287 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5290 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5291 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5292 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5293 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5294 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5296 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5297 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5298 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5299 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5300 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5302 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5303 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5304 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5305 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5306 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5307 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5308 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5309 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5310 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5312 
	#FMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5313 
	#FMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5314 
	#FMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5315 
	#FMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5316 
	#FMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5318 
	#FMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5319 
	#FMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5320 
	#FMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5321 
	#FMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5322 
	#FMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5324 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5325 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5326 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5329 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5330 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5331 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5332 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5333 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5335 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5336 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5337 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5338 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5339 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5341 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5342 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5343 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5344 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5345 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5346 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5347 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5348 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5349 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5351 
	#FMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5352 
	#FMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5353 
	#FMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5354 
	#FMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5355 
	#FMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5357 
	#FMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5358 
	#FMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5359 
	#FMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5360 
	#FMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5361 
	#FMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5363 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5364 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5365 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5368 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5369 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5370 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5372 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5373 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5374 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5376 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5378 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5379 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5380 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5381 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5382 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5384 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5385 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5386 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5387 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5388 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5390 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5391 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5392 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5393 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5396 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5397 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5398 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5400 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5401 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5402 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5404 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5406 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5407 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5408 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5409 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5410 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5412 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5413 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5414 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5415 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5416 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5418 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5419 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5420 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5421 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5424 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5425 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5426 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5428 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5429 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5430 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5432 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5434 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5435 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5436 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5437 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5438 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5440 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5441 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5442 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5443 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5444 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5446 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5447 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5448 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5449 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5452 
	#FMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5453 
	#FMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5454 
	#FMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5455 
	#FMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5456 
	#FMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5457 
	#FMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5458 
	#FMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5461 
	#FMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5462 
	#FMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5463 
	#FMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5464 
	#FMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5465 
	#FMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5466 
	#FMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5467 
	#FMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5470 
	#FMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5471 
	#FMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5472 
	#FMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5473 
	#FMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5474 
	#FMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5475 
	#FMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5476 
	#FMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5479 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5480 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5481 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5482 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5483 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5484 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5485 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5486 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5487 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5489 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5490 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5491 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5492 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5493 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5494 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5495 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5496 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5497 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5499 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5500 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5501 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5502 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5503 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5504 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5505 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5506 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5507 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5509 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5510 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5511 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5512 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5513 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5514 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5515 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5516 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5517 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5520 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5521 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5522 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5523 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5524 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5525 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5526 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5527 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5528 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5530 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5531 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5532 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5533 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5534 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5535 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5536 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5537 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5538 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5540 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5541 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5542 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5543 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5544 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5545 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5546 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5547 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5548 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5550 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5551 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5552 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5553 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5554 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5555 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5556 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5557 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5558 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5561 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5562 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5563 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5564 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5565 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5566 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5567 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5568 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5569 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5571 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5572 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5573 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5574 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5575 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5576 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5577 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5578 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5579 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5581 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5582 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5583 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5584 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5585 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5586 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5587 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5588 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5589 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5591 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5592 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5593 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5594 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5595 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5596 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5597 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5598 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5599 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5602 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5603 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5604 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5605 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5606 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5607 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5608 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5609 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5610 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5612 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5613 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5614 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5615 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5616 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5617 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5618 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5619 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5620 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5622 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5623 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5624 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5625 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5626 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5627 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5628 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5629 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5630 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5632 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5633 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5634 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5635 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5636 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5637 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5638 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5639 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5640 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5643 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5644 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5645 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5646 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5647 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5648 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5649 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5650 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5651 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5653 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5654 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5655 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5656 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5657 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5658 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5659 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5660 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5661 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5663 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5664 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5665 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5666 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5667 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5668 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5669 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5670 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5671 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5673 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5674 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5675 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5676 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5677 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5678 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5679 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5680 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5681 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5684 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5685 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5686 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5687 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5688 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5689 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5690 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5691 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5692 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5694 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5695 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5696 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5697 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5698 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5699 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5700 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5701 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5702 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5704 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5705 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5706 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5707 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5708 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5709 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5710 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5711 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5712 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5714 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5715 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5716 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5717 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5718 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5719 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5720 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5721 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5722 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5725 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5726 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5727 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5728 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5729 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5730 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5731 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5732 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5733 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5735 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5736 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5737 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5738 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5739 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5740 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5741 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5742 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5743 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5745 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5746 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5747 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5748 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5749 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5750 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5751 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5752 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5753 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5755 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5756 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5757 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5758 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5759 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5760 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5761 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5762 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5763 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5766 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5769 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5772 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

5773 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5774 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5776 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

5777 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5778 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5780 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5781 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5782 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5784 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

5786 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5787 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5788 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5790 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

5792 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5793 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5794 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5796 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5798 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5799 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5800 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5803 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

5804 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

5805 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

5807 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

5808 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

5809 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

5811 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5812 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5813 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5815 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

5817 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

5818 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

5819 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

5821 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

5823 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

5824 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

5825 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

5827 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

5829 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

5830 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

5831 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

5834 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5835 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5836 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5837 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5838 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5840 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5841 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5842 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5843 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5844 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5846 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5847 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5848 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5849 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5850 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5852 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5853 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5854 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5855 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5857 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5858 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5859 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5860 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5862 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5863 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5864 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5865 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5867 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5868 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5869 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5870 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5873 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

5874 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

5875 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

5876 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

5877 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

5879 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

5880 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

5881 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

5882 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

5883 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

5885 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

5886 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

5887 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

5888 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

5889 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

5891 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

5892 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

5893 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

5894 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

5896 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

5897 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

5898 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

5899 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

5901 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

5902 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

5903 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

5904 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

5906 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

5907 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

5908 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

5909 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

5912 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

5913 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

5914 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

5915 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000003Ë

	)

5917 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

5919 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

5921 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

5922 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

5923 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

5924 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

5925 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

5927 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

5930 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

5932 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

5934 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

5937 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

5939 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

5940 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

5941 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

5943 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

5944 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

5945 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

5947 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

5957 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

5958 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

5959 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

5961 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

5962 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

5963 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

5965 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

5966 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

5967 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

5969 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

5970 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

5971 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

5973 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

5974 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

5975 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

5977 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

5978 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

5979 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

5981 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

5982 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

5983 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

5985 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

5986 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

5987 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

5989 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

5990 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

5991 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

5993 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

5994 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

5995 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

5997 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

5998 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

5999 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

6001 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

6002 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

6003 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

6005 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

6006 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

6007 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

6009 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

6010 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

6011 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

6013 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

6014 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

6015 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

6017 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

6018 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

6019 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

6022 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

6023 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

6024 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

6025 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

6026 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

6027 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

6028 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

6029 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

6030 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

6031 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

6032 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

6033 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

6034 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

6035 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

6036 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

6037 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

6040 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

6041 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

6042 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

6044 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

6045 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

6046 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

6048 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

6049 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

6050 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

6052 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

6053 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

6054 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

6056 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

6057 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

6058 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

6060 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

6061 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

6062 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

6064 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

6065 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

6066 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

6068 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

6069 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

6070 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

6072 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

6073 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

6074 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

6076 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

6077 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

6078 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

6080 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

6081 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

6082 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

6084 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

6085 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

6086 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

6088 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

6089 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

6090 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

6092 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

6093 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

6094 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

6096 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

6097 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

6098 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

6100 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

6101 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

6102 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

6105 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

6106 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

6107 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

6109 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

6110 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

6111 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

6113 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

6114 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

6115 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

6117 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

6118 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

6119 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

6121 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

6122 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

6123 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

6125 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

6126 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

6127 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

6129 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

6130 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

6131 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

6133 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

6134 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

6135 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

6137 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

6138 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

6139 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

6141 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

6142 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

6143 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

6145 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

6146 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

6147 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

6149 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

6150 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

6151 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

6153 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

6154 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

6155 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

6157 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

6158 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

6159 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

6161 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

6162 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

6163 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

6165 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

6166 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

6167 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

6170 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

6171 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

6172 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

6173 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

6174 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

6175 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

6176 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

6177 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

6178 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

6179 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

6180 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

6181 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

6182 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

6183 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

6184 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

6185 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

6187 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

6188 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

6189 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

6190 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

6191 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

6192 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

6193 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

6194 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

6195 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

6196 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

6197 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

6198 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

6199 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

6200 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

6201 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

6202 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

6205 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

6206 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

6207 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

6208 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

6209 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

6210 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

6211 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

6212 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

6213 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

6214 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

6215 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

6216 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

6217 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

6218 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

6219 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

6220 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

6222 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

6223 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

6224 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

6225 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

6226 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

6227 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

6228 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

6229 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

6230 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

6231 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

6232 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

6233 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

6234 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

6235 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

6236 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

6237 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

6240 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

6241 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

6242 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

6243 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

6244 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

6245 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

6246 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

6247 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

6248 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

6249 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

6250 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

6251 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

6252 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

6253 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

6254 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

6255 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

6256 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

6257 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

6258 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

6259 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

6260 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

6261 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

6262 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

6263 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

6264 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

6265 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

6266 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

6267 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

6268 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

6269 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

6270 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

6271 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

6279 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

6280 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

6281 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

6282 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

6283 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

6284 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

6285 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00040080)

	)

6286 
	#HASH_CR_ALGO_0
 ((
uöt32_t
)0x00000080)

	)

6287 
	#HASH_CR_ALGO_1
 ((
uöt32_t
)0x00040000)

	)

6288 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

6289 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

6290 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

6291 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

6292 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

6293 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

6294 
	#HASH_CR_MDMAT
 ((
uöt32_t
)0x00002000)

	)

6295 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

6298 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

6299 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

6300 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

6301 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

6302 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

6303 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

6304 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

6307 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

6308 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

6311 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

6312 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

6313 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

6314 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

6322 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6323 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6324 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6325 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6326 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6327 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6328 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6329 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6330 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6331 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6332 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6333 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6334 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6335 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6338 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6339 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6340 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6341 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6342 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6343 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6344 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6346 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6347 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6348 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6349 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6350 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6353 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6354 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6356 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6357 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6358 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6359 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6360 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6361 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6362 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6363 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6364 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6365 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6367 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6370 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6371 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6374 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6377 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6378 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6379 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6380 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6381 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6382 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6383 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6384 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6385 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6386 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6387 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6388 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6389 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6390 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6393 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6394 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6395 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6396 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6397 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6398 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6399 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6400 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6403 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6404 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6405 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6408 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6411 
	#I2C_FLTR_DNF
 ((
uöt8_t
)0x0FË

	)

6412 
	#I2C_FLTR_ANOFF
 ((
uöt8_t
)0x10Ë

	)

6420 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

6423 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

6424 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

6425 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

6426 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

6429 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

6432 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

6433 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

6443 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

6444 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6448 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

6449 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

6453 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

6454 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6458 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

6459 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6463 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

6464 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

6465 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

6466 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

6467 
	#LTDC_GCR_DTEN
 ((
uöt32_t
)0x00010000Ë

	)

6468 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

6469 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

6470 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

6471 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

6475 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

6476 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

6480 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6481 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6482 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6486 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

6487 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

6488 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

6489 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

6493 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

6494 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

6495 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6496 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

6500 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

6501 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

6502 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6503 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

6507 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

6511 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

6512 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6516 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

6517 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

6518 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

6519 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

6523 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

6524 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

6525 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

6529 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6530 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6534 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6535 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6539 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

6540 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6541 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6545 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

6549 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

6553 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6554 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6555 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6556 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

6560 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

6561 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

6565 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6569 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

6570 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

6574 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

6578 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

6579 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6580 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

6581 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

6589 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

6590 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

6591 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

6592 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

6593 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

6595 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

6596 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

6597 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

6598 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

6601 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

6602 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

6603 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

6604 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

6605 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

6606 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

6607 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

6608 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

6610 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

6611 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

6612 
	#PWR_CR_LPUDS
 ((
uöt32_t
)0x00000400Ë

	)

6613 
	#PWR_CR_MRUDS
 ((
uöt32_t
)0x00000800Ë

	)

6614 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

6615 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

6617 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

6619 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

6620 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

6621 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

6623 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

6624 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

6625 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

6626 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

6627 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

6629 
	#PWR_CR_FMSSR
 ((
uöt32_t
)0x00100000Ë

	)

6630 
	#PWR_CR_FISSR
 ((
uöt32_t
)0x00200000Ë

	)

6633 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

6636 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

6637 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

6638 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

6639 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

6640 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

6641 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

6642 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

6643 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

6644 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

6645 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

6648 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

6656 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

6657 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

6659 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

6660 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

6661 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

6662 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

6663 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

6664 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

6666 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

6667 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

6668 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

6669 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

6670 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

6671 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

6672 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

6673 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

6674 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

6676 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

6677 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

6678 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

6679 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

6680 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

6681 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

6682 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

6683 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

6684 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

6685 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

6688 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

6689 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

6690 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

6691 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

6692 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

6693 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

6694 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

6696 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

6697 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

6698 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

6699 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

6700 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

6701 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

6702 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

6703 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

6704 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

6705 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

6707 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

6708 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

6709 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

6711 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

6712 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

6713 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

6715 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

6716 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

6717 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

6718 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

6719 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

6723 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

6724 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

6725 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

6727 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6728 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

6729 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

6732 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

6733 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

6734 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

6736 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

6737 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

6738 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

6741 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

6742 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

6743 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

6744 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

6745 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

6747 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6748 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

6749 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

6750 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

6751 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

6752 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

6753 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

6754 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

6755 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

6758 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

6759 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

6760 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

6761 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

6763 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6764 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

6765 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

6766 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

6767 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

6770 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

6771 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

6772 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

6773 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

6775 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

6776 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

6777 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

6778 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

6779 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

6782 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

6783 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

6784 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

6785 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

6786 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

6787 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

6790 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

6791 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

6792 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

6794 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

6796 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

6797 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

6798 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

6799 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

6801 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

6802 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

6803 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

6804 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

6806 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

6807 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

6808 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

6811 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

6812 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

6813 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

6814 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

6815 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

6816 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

6817 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

6818 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

6819 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

6820 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

6821 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

6822 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

6823 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

6824 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

6825 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

6826 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

6827 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

6828 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

6829 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

6830 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

6831 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

6832 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

6833 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

6836 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

6837 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

6838 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

6839 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

6840 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

6841 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

6842 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

6843 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

6844 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

6845 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

6846 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

6847 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

6848 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

6849 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

6850 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

6851 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

6852 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

6855 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

6856 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

6857 
	#RCC_AHB2RSTR_HASHRST
 ((
uöt32_t
)0x00000020)

	)

6859 
	#RCC_AHB2RSTR_HSAHRST
 
RCC_AHB2RSTR_HASHRST


	)

6860 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

6861 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

6864 #i‡
deföed
(
STM32F40_41xxx
)

6865 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

6868 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6869 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

6872 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

6873 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

6874 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

6875 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

6876 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

6877 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

6878 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

6879 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

6880 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

6881 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

6882 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

6883 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

6884 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

6885 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

6886 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

6887 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

6888 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

6889 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

6890 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

6891 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

6892 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

6893 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

6894 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

6895 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

6896 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

6899 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

6900 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

6901 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

6902 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

6903 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

6904 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

6905 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

6906 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

6907 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

6908 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

6909 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

6910 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

6911 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

6912 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

6913 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

6914 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

6917 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

6920 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

6921 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

6922 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

6923 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

6924 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

6925 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

6926 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

6927 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

6928 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

6929 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

6930 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

6931 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

6932 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

6933 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

6934 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

6935 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

6936 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

6937 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

6938 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

6939 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

6940 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

6941 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

6942 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

6945 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

6946 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

6947 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

6948 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

6949 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

6953 #i‡
deföed
(
STM32F40_41xxx
)

6954 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

6957 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

6958 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

6962 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

6963 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

6964 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

6965 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

6966 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

6967 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

6968 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

6969 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

6970 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

6971 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

6972 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

6973 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

6974 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

6975 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

6976 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

6977 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

6978 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

6979 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

6980 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

6981 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

6982 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

6983 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

6984 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

6985 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

6986 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

6989 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

6990 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

6991 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

6992 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

6993 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

6994 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

6995 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

6996 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

6997 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

6998 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

6999 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

7000 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

7001 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

7002 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

7003 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

7004 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

7005 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

7006 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

7009 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

7010 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

7011 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

7012 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

7013 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

7014 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

7015 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

7016 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

7017 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

7018 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

7019 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

7020 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

7021 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

7022 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

7023 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

7024 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

7025 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

7026 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

7027 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

7028 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

7029 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

7030 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

7031 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

7032 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

7033 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

7034 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

7037 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

7038 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

7039 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

7040 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

7041 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

7044 #i‡
deföed
(
STM32F40_41xxx
)

7045 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7048 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

7049 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7053 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

7054 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

7055 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

7056 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

7057 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

7058 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

7059 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

7060 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

7061 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

7062 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

7063 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

7064 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

7065 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

7066 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

7067 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

7068 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

7069 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

7070 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

7071 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

7072 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

7073 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

7074 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

7075 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

7076 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

7077 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

7080 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

7081 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

7082 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

7083 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

7084 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

7085 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

7086 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

7087 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

7088 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

7089 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

7090 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

7091 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

7092 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

7093 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

7094 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

7095 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

7096 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

7097 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

7100 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

7101 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

7102 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

7103 
	#RCC_BDCR_LSEMOD
 ((
uöt32_t
)0x00000008)

	)

7105 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

7106 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

7107 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

7109 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

7110 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

7113 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

7114 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

7115 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

7116 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

7117 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

7118 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

7119 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

7120 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

7121 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

7122 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

7125 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

7126 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

7127 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

7128 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

7131 
	#RCC_PLLI2SCFGR_PLLI2SM
 ((
uöt32_t
)0x0000003F)

	)

7132 
	#RCC_PLLI2SCFGR_PLLI2SM_0
 ((
uöt32_t
)0x00000001)

	)

7133 
	#RCC_PLLI2SCFGR_PLLI2SM_1
 ((
uöt32_t
)0x00000002)

	)

7134 
	#RCC_PLLI2SCFGR_PLLI2SM_2
 ((
uöt32_t
)0x00000004)

	)

7135 
	#RCC_PLLI2SCFGR_PLLI2SM_3
 ((
uöt32_t
)0x00000008)

	)

7136 
	#RCC_PLLI2SCFGR_PLLI2SM_4
 ((
uöt32_t
)0x00000010)

	)

7137 
	#RCC_PLLI2SCFGR_PLLI2SM_5
 ((
uöt32_t
)0x00000020)

	)

7140 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7141 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7142 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7145 
	#RCC_PLLSAICFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7146 
	#RCC_PLLSAICFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7147 
	#RCC_PLLSAICFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7150 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

7151 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

7152 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

7153 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

7154 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

7155 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

7164 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

7165 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

7168 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

7169 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

7170 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

7171 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

7172 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

7180 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

7181 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

7182 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7183 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7184 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

7185 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7186 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7187 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7188 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7189 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

7190 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7191 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7192 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7193 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7194 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7195 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7196 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7197 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7198 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

7199 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7200 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7201 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7202 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

7203 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7204 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7205 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7206 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7209 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

7210 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

7211 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

7212 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

7213 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

7214 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

7215 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

7216 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

7217 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

7218 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

7219 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7220 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7221 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7222 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7223 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

7224 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

7225 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7226 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7227 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7228 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7229 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

7230 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7231 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7232 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

7233 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7234 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7235 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7236 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7239 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

7240 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

7241 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

7242 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

7243 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

7244 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

7245 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

7246 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

7247 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

7248 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

7249 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

7250 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

7251 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

7252 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

7253 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

7254 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

7255 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

7256 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

7257 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

7258 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

7259 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

7260 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

7261 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

7262 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

7263 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

7264 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

7267 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

7268 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

7269 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

7270 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

7271 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

7272 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

7273 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

7274 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

7275 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

7276 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

7277 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

7278 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

7279 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

7280 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

7281 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

7284 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

7285 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

7288 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

7291 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

7292 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

7295 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7296 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7297 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

7298 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7299 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7300 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

7301 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7302 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7303 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7304 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7305 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7306 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

7307 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

7308 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7309 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7310 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

7311 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7312 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7313 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7314 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7315 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7316 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

7317 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7318 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7319 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7320 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7321 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7322 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7323 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7324 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7325 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7326 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

7327 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7328 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7329 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7330 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

7331 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7332 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7333 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7334 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7337 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7338 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7339 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

7340 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7341 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7342 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

7343 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7344 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7345 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

7346 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

7347 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

7348 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

7349 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

7350 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7351 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7352 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

7353 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7354 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7355 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7356 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7357 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

7358 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

7359 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7360 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7361 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7362 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7363 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7364 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7365 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7366 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7367 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

7368 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

7369 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7370 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7371 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7372 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

7373 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7374 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7375 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7376 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7379 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

7382 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7385 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

7386 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

7389 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

7390 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

7391 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7392 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7393 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

7394 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7395 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7396 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7397 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7398 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

7399 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7400 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7401 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7402 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7403 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7404 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7405 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7406 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7407 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

7408 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7409 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7410 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7411 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

7412 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7413 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7414 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7415 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7418 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7419 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7420 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7421 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7422 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

7423 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

7424 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7425 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7426 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7427 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7428 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

7429 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7430 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7431 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

7432 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7433 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7434 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7435 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7438 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

7441 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

7442 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

7443 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

7444 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

7445 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

7446 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

7447 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

7448 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

7449 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

7450 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

7451 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

7452 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

7453 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

7456 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

7457 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

7458 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

7459 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

7460 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

7461 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

7462 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

7463 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

7464 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

7465 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

7466 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

7467 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

7468 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

7469 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

7470 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

7471 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

7472 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

7473 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

7476 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7477 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7478 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7479 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7480 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7481 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7484 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

7485 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

7486 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

7487 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

7488 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

7489 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

7492 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7495 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7498 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7501 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7504 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7507 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7510 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7513 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7516 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7519 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7522 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7525 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7528 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7531 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7534 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7537 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7540 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7543 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7546 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7549 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

7557 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

7558 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

7559 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

7561 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

7562 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

7563 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

7566 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

7567 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7568 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7570 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

7571 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

7572 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

7574 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

7575 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

7576 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

7577 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

7579 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

7580 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

7582 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

7583 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

7584 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

7586 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

7587 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

7588 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

7589 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

7590 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

7592 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00780000Ë

	)

7593 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00080000Ë

	)

7594 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00100000Ë

	)

7595 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00200000Ë

	)

7596 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00400000Ë

	)

7599 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000003Ë

	)

7600 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

7601 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

7603 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

7604 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

7605 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

7606 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

7608 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

7609 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

7610 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

7611 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

7612 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

7613 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

7614 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

7616 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00080000Ë

	)

7618 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

7619 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

7620 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

7623 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

7624 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

7625 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

7626 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

7627 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

7628 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

7629 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

7630 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

7631 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

7633 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

7634 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

7635 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

7636 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

7637 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

7638 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

7639 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

7640 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

7642 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

7643 
	#SAI_xFRCR_FSPO
 ((
uöt32_t
)0x00020000Ë

	)

7644 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

7647 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

7648 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

7649 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

7650 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

7651 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

7652 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

7654 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

7655 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

7656 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

7658 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

7659 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

7660 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

7661 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

7662 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

7664 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

7667 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

7668 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

7669 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

7670 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

7671 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

7672 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

7673 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

7676 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7677 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7678 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7679 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

7680 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7681 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7682 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7684 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

7685 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

7686 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

7687 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00030000Ë

	)

7690 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

7691 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

7692 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

7693 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

7694 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

7695 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

7696 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

7699 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

7707 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

7708 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

7709 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

7712 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

7713 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

7714 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

7715 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

7717 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

7718 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

7719 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

7721 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

7722 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

7725 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

7728 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

7730 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

7731 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

7732 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

7734 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

7735 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

7736 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

7737 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

7738 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

7739 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

7740 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

7743 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

7746 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

7749 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

7752 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

7755 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

7758 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

7761 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

7764 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

7767 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

7768 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

7769 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

7770 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

7772 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

7773 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

7774 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

7775 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

7776 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

7778 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

7779 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

7780 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

7781 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

7784 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

7787 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

7788 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

7789 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

7790 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

7791 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

7792 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

7793 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

7794 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

7795 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

7796 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

7797 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

7798 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

7799 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

7800 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

7801 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

7802 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

7803 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

7804 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

7805 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

7806 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

7807 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

7808 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

7809 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

7810 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

7813 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

7814 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

7815 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

7816 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

7817 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

7818 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

7819 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

7820 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

7821 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

7822 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

7823 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

7824 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

7825 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

7828 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

7829 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

7830 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

7831 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

7832 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

7833 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

7834 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

7835 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

7836 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

7837 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

7838 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

7839 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

7840 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

7841 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

7842 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

7843 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

7844 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

7845 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

7846 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

7847 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

7848 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

7849 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

7850 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

7851 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

7854 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

7857 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7865 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7866 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7867 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7869 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7870 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7871 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7872 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7874 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7875 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7876 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7877 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7878 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7879 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7880 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7881 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7882 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7883 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7886 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7887 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7888 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7889 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7890 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7891 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7894 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7895 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7896 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7897 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7898 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7899 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7900 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7901 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7904 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7907 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7910 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7913 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7916 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7918 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7919 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7920 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7922 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7924 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7925 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7926 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7928 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7930 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7931 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7932 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7934 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7935 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7938 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7939 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7940 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7948 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

7949 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

7950 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

7951 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

7953 
	#SYSCFG_MEMRMP_FB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

7955 
	#SYSCFG_MEMRMP_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

7956 
	#SYSCFG_MEMRMP_SWP_FMC_0
 ((
uöt32_t
)0x00000400Ë

	)

7957 
	#SYSCFG_MEMRMP_SWP_FMC_1
 ((
uöt32_t
)0x00000800Ë

	)

7961 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

7962 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

7963 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

7964 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

7966 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

7968 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

7971 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

7972 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

7973 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

7974 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

7978 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

7979 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

7980 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

7981 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

7982 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

7983 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

7984 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

7985 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

7986 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

7987 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt16_t
)0x0009Ë

	)

7988 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt16_t
)0x000AË

	)

7993 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

7994 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

7995 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

7996 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

7997 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

7998 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

7999 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

8000 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

8001 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

8002 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt16_t
)0x0090Ë

	)

8003 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt16_t
)0x00A0Ë

	)

8008 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

8009 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

8010 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

8011 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

8012 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

8013 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

8014 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

8015 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

8016 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

8017 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt16_t
)0x0900Ë

	)

8018 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt16_t
)0x0A00Ë

	)

8023 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

8024 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

8025 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

8026 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

8027 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

8028 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

8029 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

8030 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

8031 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

8032 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt16_t
)0x9000Ë

	)

8033 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt16_t
)0xA000Ë

	)

8036 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

8037 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

8038 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

8039 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

8043 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

8044 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

8045 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

8046 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

8047 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

8048 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

8049 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

8050 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

8051 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

8052 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt16_t
)0x0009Ë

	)

8053 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt16_t
)0x000AË

	)

8058 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

8059 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

8060 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

8061 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

8062 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

8063 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

8064 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

8065 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

8066 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

8067 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt16_t
)0x0090Ë

	)

8068 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt16_t
)0x00A0Ë

	)

8073 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

8074 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

8075 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

8076 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

8077 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

8078 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

8079 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

8080 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

8081 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

8082 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt16_t
)0x0900Ë

	)

8083 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt16_t
)0x0A00Ë

	)

8088 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

8089 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

8090 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

8091 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

8092 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

8093 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

8094 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

8095 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

8096 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

8097 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt16_t
)0x9000Ë

	)

8098 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt16_t
)0xA000Ë

	)

8101 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

8102 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

8103 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

8104 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

8109 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

8110 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

8111 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

8112 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

8113 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

8114 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

8115 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

8116 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

8117 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

8118 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt16_t
)0x0009Ë

	)

8123 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

8124 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

8125 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

8126 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

8127 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

8128 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

8129 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

8130 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

8131 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

8132 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt16_t
)0x0090Ë

	)

8137 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

8138 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

8139 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

8140 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

8141 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

8142 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

8143 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

8144 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

8145 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

8146 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt16_t
)0x0900Ë

	)

8151 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

8152 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

8153 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

8154 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

8155 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

8156 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

8157 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

8158 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

8159 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

8160 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt16_t
)0x9000Ë

	)

8163 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

8164 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

8165 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

8166 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

8170 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

8171 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

8172 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

8173 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

8174 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

8175 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

8176 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

8177 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

8178 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt16_t
)0x0008Ë

	)

8179 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt16_t
)0x0009Ë

	)

8184 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

8185 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

8186 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

8187 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

8188 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

8189 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

8190 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

8191 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

8192 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt16_t
)0x0008Ë

	)

8193 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt16_t
)0x0009Ë

	)

8198 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

8199 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

8200 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

8201 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

8202 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

8203 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

8204 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

8205 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

8206 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt16_t
)0x0800Ë

	)

8207 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt16_t
)0x0900Ë

	)

8212 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

8213 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

8214 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

8215 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

8216 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

8217 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

8218 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

8219 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

8220 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt16_t
)0x8000Ë

	)

8221 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt16_t
)0x9000Ë

	)

8224 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

8225 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

8233 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

8234 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

8235 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

8236 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

8237 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

8239 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

8240 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

8241 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

8243 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

8245 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

8246 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

8247 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

8250 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

8251 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

8252 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

8254 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

8255 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

8256 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

8257 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

8259 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

8260 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

8261 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

8262 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

8263 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

8264 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

8265 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

8266 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

8269 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

8270 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

8271 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

8272 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

8274 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

8275 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

8276 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

8277 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

8279 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

8281 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

8282 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

8283 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

8284 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

8285 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

8287 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

8288 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

8289 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

8291 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

8292 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

8295 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

8296 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

8297 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

8298 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

8299 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

8300 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

8301 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

8302 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

8303 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

8304 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

8305 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

8306 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

8307 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

8308 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

8309 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

8312 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

8313 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

8314 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

8315 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

8316 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

8317 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

8318 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

8319 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

8320 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

8321 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

8322 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

8323 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

8326 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

8327 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

8328 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

8329 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

8330 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

8331 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

8332 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

8333 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

8336 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

8337 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

8338 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

8340 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

8341 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

8343 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

8344 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

8345 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

8346 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

8348 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

8350 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

8351 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

8352 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

8354 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

8355 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

8357 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

8358 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

8359 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

8360 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

8362 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

8366 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

8367 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8368 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8370 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

8371 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

8372 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

8373 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

8374 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

8376 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

8377 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8378 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8380 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

8381 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

8382 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

8383 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

8384 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

8387 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

8388 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

8389 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

8391 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

8392 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

8394 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

8395 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

8396 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

8397 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

8399 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

8401 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

8402 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

8403 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

8405 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

8406 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

8408 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

8409 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

8410 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

8411 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

8413 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

8417 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

8418 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

8419 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

8421 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

8422 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

8423 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

8424 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

8425 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

8427 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

8428 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

8429 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

8431 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

8432 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

8433 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

8434 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

8435 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

8438 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

8439 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

8440 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

8441 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

8442 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

8443 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

8444 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

8445 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

8446 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

8447 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

8448 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

8449 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

8450 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

8451 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

8452 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

8455 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

8458 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

8461 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

8464 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

8467 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

8470 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

8473 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

8476 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

8479 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

8480 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

8481 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

8482 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

8483 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

8484 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

8485 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

8486 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

8487 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

8489 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

8490 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

8491 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

8493 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

8494 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

8495 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

8496 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

8497 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

8498 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

8501 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

8502 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

8503 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

8504 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

8505 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

8506 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

8508 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

8509 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

8510 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

8511 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

8512 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

8513 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

8516 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

8519 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

8520 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

8521 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

8522 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

8523 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

8524 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

8533 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

8534 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

8535 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

8536 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

8537 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

8538 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

8539 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

8540 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

8541 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

8542 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

8545 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

8548 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

8549 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

8552 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

8553 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

8554 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

8555 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

8556 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

8557 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

8558 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

8559 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

8560 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

8561 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

8562 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

8563 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

8564 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

8565 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

8566 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

8569 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

8570 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

8571 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

8572 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

8573 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

8574 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

8575 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

8577 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

8578 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

8579 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

8581 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

8584 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

8585 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

8586 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

8587 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

8588 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

8589 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

8590 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

8591 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

8592 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

8593 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

8594 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

8595 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

8598 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

8599 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

8600 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

8601 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

8602 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

8603 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

8604 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

8605 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

8606 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

8608 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

8616 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

8617 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

8618 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

8619 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

8620 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

8621 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

8622 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

8623 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

8625 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

8628 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

8629 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

8630 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

8631 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

8632 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

8633 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

8634 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

8635 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

8637 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

8638 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

8639 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

8641 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

8644 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

8653 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

8654 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

8657 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

8658 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

8659 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

8660 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

8662 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

8663 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

8664 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

8667 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

8668 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

8669 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

8670 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

8671 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

8672 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

8673 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

8674 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

8675 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

8676 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

8677 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

8678 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

8679 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

8680 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

8681 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

8682 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

8683 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

8685 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

8688 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

8689 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

8690 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

8691 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

8692 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

8700 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

8701 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

8702 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

8703 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

8704 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

8705 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

8706 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

8707 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

8708 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

8709 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

8710 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

8711 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

8712 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

8713 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

8714 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

8715 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

8716 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

8717 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

8718 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

8719 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

8721 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

8722 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

8723 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

8724 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

8725 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

8726 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

8727 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

8730 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

8731 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

8732 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

8733 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

8734 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

8735 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

8736 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

8737 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

8738 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

8739 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

8740 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

8741 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

8742 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

8743 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

8746 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8749 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8752 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

8753 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

8754 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

8755 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

8756 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

8757 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

8758 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

8759 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

8760 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

8761 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

8764 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

8767 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

8768 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

8769 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

8770 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

8771 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

8772 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

8773 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

8774 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

8775 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

8776 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

8777 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

8780 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

8781 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

8784 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

8798 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

8799 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

8800 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

8801 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

8802 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

8803 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

8804 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

8807 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

8808 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

8809 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

8810 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

8811 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

8814 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

8815 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

8818 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

8821 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8824 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8825 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8826 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8827 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8828 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8829 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8830 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8831 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8832 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8833 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8836 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8839 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8840 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8841 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8842 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8843 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8844 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8845 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8846 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8847 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8848 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8851 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8854 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8855 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8856 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8857 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8858 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8859 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8860 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8861 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8862 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8863 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8866 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8873 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

8874 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

8875 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8876 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8877 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8878 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8881 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8882 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8883 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8886 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8887 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8888 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8891 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8892 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8893 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8896 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8897 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8898 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8901 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8904 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8907 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8910 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8913 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8916 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8923 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

8924 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

8925 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

8926 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

8927 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

8928 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

8929 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

8930 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

8931 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

8933 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8934 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8935 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8936 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8937 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8938 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8941 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8944 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8947 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8948 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8951 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8954 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8955 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8958 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8961 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8964 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8967 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

8968 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

8975 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8976 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8977 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8978 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8979 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8980 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8981 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8982 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8983 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8984 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8985 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8986 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8987 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8988 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8989 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8990 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8991 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8992 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8993 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8994 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8995 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8996 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8997 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8998 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8999 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

9000 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

9001 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

9002 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

9003 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

9004 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

9005 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

9006 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

9007 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

9008 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

9009 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

9010 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

9011 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

9012 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

9013 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

9016 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9019 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9022 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9025 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9028 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

9029 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

9030 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

9031 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

9033 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

9034 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

9035 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

9036 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

9037 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9038 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

9039 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

9040 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

9041 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

9042 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

9043 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

9044 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9045 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

9046 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

9047 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

9048 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

9049 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

9050 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

9051 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

9052 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

9053 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

9054 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

9055 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

9056 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

9057 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

9058 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

9059 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

9060 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

9061 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

9062 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

9063 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

9064 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

9067 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

9068 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

9069 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

9070 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

9071 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

9072 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

9073 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9074 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

9075 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

9076 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

9077 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

9078 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

9079 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

9080 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

9081 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

9082 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

9083 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

9084 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

9085 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9086 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

9087 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

9088 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

9089 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

9090 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

9093 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

9094 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

9095 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

9096 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

9097 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

9098 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

9099 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

9100 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

9101 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

9102 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

9103 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

9104 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

9105 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

9106 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

9107 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

9110 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

9111 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

9112 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

9113 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

9116 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9119 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9122 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9125 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9135 #ifde‡
USE_STDPERIPH_DRIVER


9136 
	~"°m32f4xx_c⁄f.h
"

9143 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

9145 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

9147 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

9149 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

9151 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

9153 
	#READ_REG
(
REG
Ë((REG))

	)

9155 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

9161 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\include\stm32f4xx_conf.h

23 #i‚de‡
__STM32F4xx_CONF_H


24 
	#__STM32F4xx_CONF_H


	)

26 #i‡
deföed
 (
HSE_VALUE
)

28 #unde‡
HSE_VALUE


29 
	#HSE_VALUE
 ((
uöt32_t
)8000000)

	)

34 
	~"°m32f4xx_adc.h
"

35 
	~"°m32f4xx_ˇn.h
"

36 
	~"°m32f4xx_¸c.h
"

37 
	~"°m32f4xx_¸yp.h
"

38 
	~"°m32f4xx_dac.h
"

39 
	~"°m32f4xx_dbgmcu.h
"

40 
	~"°m32f4xx_dcmi.h
"

41 
	~"°m32f4xx_dma.h
"

42 
	~"°m32f4xx_exti.h
"

43 
	~"°m32f4xx_Êash.h
"

44 
	~"°m32f4xx_fsmc.h
"

45 
	~"°m32f4xx_hash.h
"

46 
	~"°m32f4xx_gpio.h
"

47 
	~"°m32f4xx_i2c.h
"

48 
	~"°m32f4xx_iwdg.h
"

49 
	~"°m32f4xx_pwr.h
"

50 
	~"°m32f4xx_rcc.h
"

51 
	~"°m32f4xx_∫g.h
"

52 
	~"°m32f4xx_πc.h
"

53 
	~"°m32f4xx_sdio.h
"

54 
	~"°m32f4xx_•i.h
"

55 
	~"°m32f4xx_syscfg.h
"

56 
	~"°m32f4xx_tim.h
"

57 
	~"°m32f4xx_ußπ.h
"

58 
	~"°m32f4xx_wwdg.h
"

59 
	~"misc.h
"

75 #ifde‡ 
USE_FULL_ASSERT


85 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

87 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

89 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\include\system_stm32f4xx.h

39 #i‚de‡
__SYSTEM_STM32F4XX_H


40 
	#__SYSTEM_STM32F4XX_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

86 
Sy°emInô
();

87 
Sy°emC‹eClockUpd©e
();

92 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\pre_main_setup.cpp

2 
	~"u£r_pb.h
"

3 
	~"boŸlﬂdî_öô.h
"

6 
£tup_ex˚±i⁄_h™dÀrs
();

7 
ìva_maö
();

10 "C" 
	$¥e_maö_£tup
()

17 
U£rPushBuâ⁄
 
	`push_buâ⁄
(
USER_PB_BOTTOM
);

18 i‡(
push_buâ⁄
.
	`ªad
())

20 
	`boŸlﬂdî_öô
();

25 
	`£tup_ex˚±i⁄_h™dÀrs
();

28 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\startup_stm32f4xx.S

32 .
sy¡ax
 
	gunifõd


33 .
¨ch
 
	g¨mv7
-
	gm


35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #ifde‡
__STACK_SIZE


38 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


40 .
equ
 
	gSèck_Size
, 0x400

42 .
globl
 
	g__SèckT›


43 .
globl
 
__SèckLimô


44 
	g__SèckLimô
:

45 .
•a˚
 
Sèck_Size


46 .
size
 
__SèckLimô
, . - __StackLimit

47 
	g__SèckT›
:

48 .
size
 
__SèckT›
, . - 
	g__SèckT›


50 .
	g£˘i⁄
 .
	ghóp


51 .
	gÆign
 3

52 #ifde‡
__HEAP_SIZE


53 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


55 .
equ
 
	gHóp_Size
, 0xC00

57 .
globl
 
	g__HópBa£


58 .
globl
 
__HópLimô


59 
	g__HópBa£
:

60 .
Hóp_Size


61 .
•a˚
 
Hóp_Size


62 .
ídif


63 .
size
 
__HópBa£
, . - __HeapBase

64 
	g__HópLimô
:

65 .
size
 
__HópLimô
, . - 
	g__HópLimô


67 .
	g£˘i⁄
 .
	gi§_ve˘‹


68 .
	gÆign
 2

69 .
globl
 
__i§_ve˘‹


70 
	g__i§_ve˘‹
:

71 .
__SèckT›


72 .
Re£t_H™dÀr


73 .
NMI_H™dÀr


74 .
H¨dFau…_H™dÀr


75 .
MemM™age_H™dÀr


76 .
BusFau…_H™dÀr


77 .
UßgeFau…_H™dÀr


82 .
SVC_H™dÀr


83 .
DebugM⁄_H™dÀr


85 .
PídSV_H™dÀr


86 .
SysTick_H™dÀr


89 .
WWDG_IRQH™dÀr


90 .
PVD_IRQH™dÀr


91 .
TAMP_STAMP_IRQH™dÀr


92 .
RTC_WKUP_IRQH™dÀr


93 .
FLASH_IRQH™dÀr


94 .
RCC_IRQH™dÀr


95 .
EXTI0_IRQH™dÀr


96 .
EXTI1_IRQH™dÀr


97 .
EXTI2_IRQH™dÀr


98 .
EXTI3_IRQH™dÀr


99 .
EXTI4_IRQH™dÀr


100 .
DMA1_Såóm0_IRQH™dÀr


101 .
DMA1_Såóm1_IRQH™dÀr


102 .
DMA1_Såóm2_IRQH™dÀr


103 .
DMA1_Såóm3_IRQH™dÀr


104 .
DMA1_Såóm4_IRQH™dÀr


105 .
DMA1_Såóm5_IRQH™dÀr


106 .
DMA1_Såóm6_IRQH™dÀr


107 .
ADC_IRQH™dÀr


108 .
CAN1_TX_IRQH™dÀr


109 .
CAN1_RX0_IRQH™dÀr


110 .
CAN1_RX1_IRQH™dÀr


111 .
CAN1_SCE_IRQH™dÀr


112 .
EXTI9_5_IRQH™dÀr


113 .
TIM1_BRK_TIM9_IRQH™dÀr


114 .
TIM1_UP_TIM10_IRQH™dÀr


115 .
TIM1_TRG_COM_TIM11_IRQH™dÀr


116 .
TIM1_CC_IRQH™dÀr


117 .
TIM2_IRQH™dÀr


118 .
TIM3_IRQH™dÀr


119 .
TIM4_IRQH™dÀr


120 .
I2C1_EV_IRQH™dÀr


121 .
I2C1_ER_IRQH™dÀr


122 .
I2C2_EV_IRQH™dÀr


123 .
I2C2_ER_IRQH™dÀr


124 .
SPI1_IRQH™dÀr


125 .
SPI2_IRQH™dÀr


126 .
USART1_IRQH™dÀr


127 .
USART2_IRQH™dÀr


128 .
USART3_IRQH™dÀr


129 .
EXTI15_10_IRQH™dÀr


130 .
RTC_Aœrm_IRQH™dÀr


131 .
OTG_FS_WKUP_IRQH™dÀr


132 .
TIM8_BRK_TIM12_IRQH™dÀr


133 .
TIM8_UP_TIM13_IRQH™dÀr


134 .
TIM8_TRG_COM_TIM14_IRQH™dÀr


135 .
TIM8_CC_IRQH™dÀr


136 .
DMA1_Såóm7_IRQH™dÀr


137 .
FSMC_IRQH™dÀr


138 .
SDIO_IRQH™dÀr


139 .
TIM5_IRQH™dÀr


140 .
SPI3_IRQH™dÀr


141 .
UART4_IRQH™dÀr


142 .
UART5_IRQH™dÀr


143 .
TIM6_DAC_IRQH™dÀr


144 .
TIM7_IRQH™dÀr


145 .
DMA2_Såóm0_IRQH™dÀr


146 .
DMA2_Såóm1_IRQH™dÀr


147 .
DMA2_Såóm2_IRQH™dÀr


148 .
DMA2_Såóm3_IRQH™dÀr


149 .
DMA2_Såóm4_IRQH™dÀr


150 .
ETH_IRQH™dÀr


151 .
ETH_WKUP_IRQH™dÀr


152 .
CAN2_TX_IRQH™dÀr


153 .
CAN2_RX0_IRQH™dÀr


154 .
CAN2_RX1_IRQH™dÀr


155 .
CAN2_SCE_IRQH™dÀr


156 .
OTG_FS_IRQH™dÀr


157 .
DMA2_Såóm5_IRQH™dÀr


158 .
DMA2_Såóm6_IRQH™dÀr


159 .
DMA2_Såóm7_IRQH™dÀr


160 .
USART6_IRQH™dÀr


161 .
I2C3_EV_IRQH™dÀr


162 .
I2C3_ER_IRQH™dÀr


163 .
OTG_HS_EP1_OUT_IRQH™dÀr


164 .
OTG_HS_EP1_IN_IRQH™dÀr


165 .
OTG_HS_WKUP_IRQH™dÀr


166 .
OTG_HS_IRQH™dÀr


167 .
DCMI_IRQH™dÀr


168 .
CRYP_IRQH™dÀr


169 .
HASH_RNG_IRQH™dÀr


170 .
FPU_IRQH™dÀr


172 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


174 .
	gãxt


175 .
	gthumb


176 .
	gthumb_func


177 .
	gÆign
 2

178 .
globl
 
	gRe£t_H™dÀr


179 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


180 
	gRe£t_H™dÀr
:

188 
ldr
 
r0
, =0x2001FFF1

189 
ldr
 
r1
, =0xDEADBEEF

190 
ldr
 
r2
, [
r0
, #0]

191 
°r
 
	gr0
, [
r0
, #0]

192 
cmp
 
	gr2
, 
r1


193 
	gb√
 .
	gn‹mÆ_lﬂdî


195 .
	gªboŸ_lﬂdî
:

197 
ldr
 
r0
, =0x1FFF0000

198 
ldr
 
•
, [
r0
, #0]

199 
ldr
 
	gr0
, [
r0
, #4]

200 
bx
 
	gr0


202 .
	gn‹mÆ_lﬂdî
:

203 
ldr
 
r1
, =
__ëext


204 
ldr
 
r2
, =
__d©a_°¨t__


205 
ldr
 
r3
, =
__d©a_íd__


211 .
Êash_to_øm_lo›
:

212 
cmp
 
r2
, 
r3


213 
ôâ
 
…


214 
ldæt
 
	gr0
, [
r1
], #4

215 
°æt
 
	gr0
, [
r2
], #4

216 
	gb…
 .
	gÊash_to_øm_lo›


218 
subs
 
	gr3
, 
r2


219 
	gbÀ
 .
	gÊash_to_øm_lo›_íd


220 .
	gÊash_to_øm_lo›
:

221 
subs
 
r3
, #4

222 
ldr
 
	gr0
, [
r1
, 
r3
]

223 
°r
 
	gr0
, [
r2
, 
r3
]

224 
	gbgt
 .
	gÊash_to_øm_lo›


225 .
	gÊash_to_øm_lo›_íd
:

228 #i‚de‡
__NO_SYSTEM_INIT


229 
ldr
 
r0
, =
Sy°emInô


230 
blx
 
r0


233 
ldr
 
r0
, =
¥e_maö_£tup


234 
blx
 
r0


236 
ldr
 
r0
, =
_°¨t


237 
bx
 
r0


238 .
poﬁ


239 .
size
 
Re£t_H™dÀr
, . - 
	gRe£t_H™dÀr


244 .
	gÆign
 1

245 .
	gthumb_func


246 .
wók
 
	g_°¨t


247 .
ty≥
 
	g_°¨t
, %
fun˘i⁄


248 
	g_°¨t
:

251 
ldr
 
r1
, = 
__bss_°¨t__


252 
ldr
 
r2
, = 
__bss_íd__


253 
movs
 
r3
, #0

254 
	gb
 .
	gfûl_zîo_bss


255 .
	glo›_zîo_bss
:

256 
°r
 
r3
, [
r1
], #4

258 .
	gfûl_zîo_bss
:

259 
cmp
 
r1
, 
r2


260 
	gbcc
 .
lo›_zîo_bss


263 
bl
 
maö


264 
	gb
 .

265 .
size
 
	g_°¨t
, . - _start

270 .
ma¸o
 
def_úq_h™dÀr
 
	gh™dÀr_«me


271 .
	gÆign
 1

272 .
	gthumb_func


273 .
	gwók
 \
	gh™dÀr_«me


274 .
	gty≥
 \
	gh™dÀr_«me
, %
	gfun˘i⁄


275 \
	gh™dÀr_«me
 :

276 
b
 .

277 .
size
 \
h™dÀr_«me
, . - \
	gh™dÀr_«me


278 .
ídm


280 
def_úq_h™dÀr
 
NMI_H™dÀr


281 
def_úq_h™dÀr
 
H¨dFau…_H™dÀr


282 
def_úq_h™dÀr
 
MemM™age_H™dÀr


283 
def_úq_h™dÀr
 
BusFau…_H™dÀr


284 
def_úq_h™dÀr
 
UßgeFau…_H™dÀr


285 
def_úq_h™dÀr
 
SVC_H™dÀr


286 
def_úq_h™dÀr
 
DebugM⁄_H™dÀr


287 
def_úq_h™dÀr
 
PídSV_H™dÀr


288 
def_úq_h™dÀr
 
SysTick_H™dÀr


289 
def_úq_h™dÀr
 
DeÁu…_H™dÀr


292 
def_úq_h™dÀr
 
WWDG_IRQH™dÀr


293 
def_úq_h™dÀr
 
PVD_IRQH™dÀr


294 
def_úq_h™dÀr
 
TAMP_STAMP_IRQH™dÀr


295 
def_úq_h™dÀr
 
RTC_WKUP_IRQH™dÀr


296 
def_úq_h™dÀr
 
FLASH_IRQH™dÀr


297 
def_úq_h™dÀr
 
RCC_IRQH™dÀr


298 
def_úq_h™dÀr
 
EXTI0_IRQH™dÀr


299 
def_úq_h™dÀr
 
EXTI1_IRQH™dÀr


300 
def_úq_h™dÀr
 
EXTI2_IRQH™dÀr


301 
def_úq_h™dÀr
 
EXTI3_IRQH™dÀr


302 
def_úq_h™dÀr
 
EXTI4_IRQH™dÀr


303 
def_úq_h™dÀr
 
DMA1_Såóm0_IRQH™dÀr


304 
def_úq_h™dÀr
 
DMA1_Såóm1_IRQH™dÀr


305 
def_úq_h™dÀr
 
DMA1_Såóm2_IRQH™dÀr


306 
def_úq_h™dÀr
 
DMA1_Såóm3_IRQH™dÀr


307 
def_úq_h™dÀr
 
DMA1_Såóm4_IRQH™dÀr


308 
def_úq_h™dÀr
 
DMA1_Såóm5_IRQH™dÀr


309 
def_úq_h™dÀr
 
DMA1_Såóm6_IRQH™dÀr


310 
def_úq_h™dÀr
 
ADC_IRQH™dÀr


311 
def_úq_h™dÀr
 
CAN1_TX_IRQH™dÀr


312 
def_úq_h™dÀr
 
CAN1_RX0_IRQH™dÀr


313 
def_úq_h™dÀr
 
CAN1_RX1_IRQH™dÀr


314 
def_úq_h™dÀr
 
CAN1_SCE_IRQH™dÀr


315 
def_úq_h™dÀr
 
EXTI9_5_IRQH™dÀr


316 
def_úq_h™dÀr
 
TIM1_BRK_TIM9_IRQH™dÀr


317 
def_úq_h™dÀr
 
TIM1_UP_TIM10_IRQH™dÀr


318 
def_úq_h™dÀr
 
TIM1_TRG_COM_TIM11_IRQH™dÀr


319 
def_úq_h™dÀr
 
TIM1_CC_IRQH™dÀr


320 
def_úq_h™dÀr
 
TIM2_IRQH™dÀr


321 
def_úq_h™dÀr
 
TIM3_IRQH™dÀr


322 
def_úq_h™dÀr
 
TIM4_IRQH™dÀr


323 
def_úq_h™dÀr
 
I2C1_EV_IRQH™dÀr


324 
def_úq_h™dÀr
 
I2C1_ER_IRQH™dÀr


325 
def_úq_h™dÀr
 
I2C2_EV_IRQH™dÀr


326 
def_úq_h™dÀr
 
I2C2_ER_IRQH™dÀr


327 
def_úq_h™dÀr
 
SPI1_IRQH™dÀr


328 
def_úq_h™dÀr
 
SPI2_IRQH™dÀr


329 
def_úq_h™dÀr
 
USART1_IRQH™dÀr


330 
def_úq_h™dÀr
 
USART2_IRQH™dÀr


331 
def_úq_h™dÀr
 
USART3_IRQH™dÀr


332 
def_úq_h™dÀr
 
EXTI15_10_IRQH™dÀr


333 
def_úq_h™dÀr
 
RTC_Aœrm_IRQH™dÀr


334 
def_úq_h™dÀr
 
OTG_FS_WKUP_IRQH™dÀr


335 
def_úq_h™dÀr
 
TIM8_BRK_TIM12_IRQH™dÀr


336 
def_úq_h™dÀr
 
TIM8_UP_TIM13_IRQH™dÀr


337 
def_úq_h™dÀr
 
TIM8_TRG_COM_TIM14_IRQH™dÀr


338 
def_úq_h™dÀr
 
TIM8_CC_IRQH™dÀr


339 
def_úq_h™dÀr
 
DMA1_Såóm7_IRQH™dÀr


340 
def_úq_h™dÀr
 
FSMC_IRQH™dÀr


341 
def_úq_h™dÀr
 
SDIO_IRQH™dÀr


342 
def_úq_h™dÀr
 
TIM5_IRQH™dÀr


343 
def_úq_h™dÀr
 
SPI3_IRQH™dÀr


344 
def_úq_h™dÀr
 
UART4_IRQH™dÀr


345 
def_úq_h™dÀr
 
UART5_IRQH™dÀr


346 
def_úq_h™dÀr
 
TIM6_DAC_IRQH™dÀr


347 
def_úq_h™dÀr
 
TIM7_IRQH™dÀr


348 
def_úq_h™dÀr
 
DMA2_Såóm0_IRQH™dÀr


349 
def_úq_h™dÀr
 
DMA2_Såóm1_IRQH™dÀr


350 
def_úq_h™dÀr
 
DMA2_Såóm2_IRQH™dÀr


351 
def_úq_h™dÀr
 
DMA2_Såóm3_IRQH™dÀr


352 
def_úq_h™dÀr
 
DMA2_Såóm4_IRQH™dÀr


353 
def_úq_h™dÀr
 
ETH_IRQH™dÀr


354 
def_úq_h™dÀr
 
ETH_WKUP_IRQH™dÀr


355 
def_úq_h™dÀr
 
CAN2_TX_IRQH™dÀr


356 
def_úq_h™dÀr
 
CAN2_RX0_IRQH™dÀr


357 
def_úq_h™dÀr
 
CAN2_RX1_IRQH™dÀr


358 
def_úq_h™dÀr
 
CAN2_SCE_IRQH™dÀr


359 
def_úq_h™dÀr
 
OTG_FS_IRQH™dÀr


360 
def_úq_h™dÀr
 
DMA2_Såóm5_IRQH™dÀr


361 
def_úq_h™dÀr
 
DMA2_Såóm6_IRQH™dÀr


362 
def_úq_h™dÀr
 
DMA2_Såóm7_IRQH™dÀr


363 
def_úq_h™dÀr
 
USART6_IRQH™dÀr


364 
def_úq_h™dÀr
 
I2C3_EV_IRQH™dÀr


365 
def_úq_h™dÀr
 
I2C3_ER_IRQH™dÀr


366 
def_úq_h™dÀr
 
OTG_HS_EP1_OUT_IRQH™dÀr


367 
def_úq_h™dÀr
 
OTG_HS_EP1_IN_IRQH™dÀr


368 
def_úq_h™dÀr
 
OTG_HS_WKUP_IRQH™dÀr


369 
def_úq_h™dÀr
 
OTG_HS_IRQH™dÀr


370 
def_úq_h™dÀr
 
DCMI_IRQH™dÀr


371 
def_úq_h™dÀr
 
CRYP_IRQH™dÀr


372 
def_úq_h™dÀr
 
HASH_RNG_IRQH™dÀr


373 
def_úq_h™dÀr
 
	gFPU_IRQH™dÀr


375 .
	gíd


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\system_stm32f4xx_eeva_revD.c

123 
	~"°m32f4xx.h
"

149 
	#VECT_TAB_OFFSET
 0x00

	)

155 
	#PLL_M
 8

	)

156 
	#PLL_N
 288

	)

159 
	#PLL_P
 2

	)

162 
	#PLL_Q
 6

	)

182 
uöt32_t
 
	gSy°emC‹eClock
 = 144000000;

184 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

194 
SëSysClock
();

195 #ifde‡
DATA_IN_ExtSRAM


196 
Sy°emInô_ExtMemCé
();

214 
	$Sy°emInô
()

217 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

218 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

222 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

225 
RCC
->
CFGR
 = 0x00000000;

228 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

231 
RCC
->
PLLCFGR
 = 0x24003010;

234 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

237 
RCC
->
CIR
 = 0x00000000;

239 #ifde‡
DATA_IN_ExtSRAM


240 
	`Sy°emInô_ExtMemCé
();

245 
	`SëSysClock
();

248 #ifde‡
VECT_TAB_SRAM


249 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

251 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

253 
	}
}

291 
	$Sy°emC‹eClockUpd©e
()

293 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

296 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

298 
tmp
)

301 
Sy°emC‹eClock
 = 
HSI_VALUE
;

304 
Sy°emC‹eClock
 = 
HSE_VALUE
;

311 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

312 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

314 i‡(
∂lsour˚
 != 0)

317 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

322 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

325 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

326 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

329 
Sy°emC‹eClock
 = 
HSI_VALUE
;

334 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

336 
Sy°emC‹eClock
 >>
tmp
;

337 
	}
}

347 
	$SëSysClock
()

352 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

355 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

360 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

361 
SèπUpCou¡î
++;

362 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

364 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

366 
HSESètus
 = (
uöt32_t
)0x01;

370 
HSESètus
 = (
uöt32_t
)0x00;

373 i‡(
HSESètus
 =(
uöt32_t
)0x01)

376 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

377 
PWR
->
CR
 &(
uöt32_t
)~(
PWR_CR_VOS
);

380 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

383 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV4
;

386 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

389 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

390 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

393 
RCC
->
CR
 |
RCC_CR_PLLON
;

396 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

401 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 |
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_4WS
;

404 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

405 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

408 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

417 
	}
}

425 #ifde‡
DATA_IN_ExtSRAM


434 
	$Sy°emInô_ExtMemCé
()

460 
RCC
->
AHB1ENR
 |= 0x00000078;

463 
GPIOD
->
AFR
[0] = 0x00cc00cc;

464 
GPIOD
->
AFR
[1] = 0xcccccccc;

466 
GPIOD
->
MODER
 = 0xaaaa0a0a;

468 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

470 
GPIOD
->
OTYPER
 = 0x00000000;

472 
GPIOD
->
PUPDR
 = 0x00000000;

475 
GPIOE
->
AFR
[0] = 0xcccccccc;

476 
GPIOE
->
AFR
[1] = 0xcccccccc;

478 
GPIOE
->
MODER
 = 0xaaaaaaaa;

480 
GPIOE
->
OSPEEDR
 = 0xffffffff;

482 
GPIOE
->
OTYPER
 = 0x00000000;

484 
GPIOE
->
PUPDR
 = 0x00000000;

487 
GPIOF
->
AFR
[0] = 0x00cccccc;

488 
GPIOF
->
AFR
[1] = 0xcccc0000;

490 
GPIOF
->
MODER
 = 0xaa000aaa;

492 
GPIOF
->
OSPEEDR
 = 0xff000fff;

494 
GPIOF
->
OTYPER
 = 0x00000000;

496 
GPIOF
->
PUPDR
 = 0x00000000;

499 
GPIOG
->
AFR
[0] = 0x00cccccc;

500 
GPIOG
->
AFR
[1] = 0x000000c0;

502 
GPIOG
->
MODER
 = 0x00080aaa;

504 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

506 
GPIOG
->
OTYPER
 = 0x00000000;

508 
GPIOG
->
PUPDR
 = 0x00000000;

512 
RCC
->
AHB3ENR
 |= 0x00000001;

515 
FSMC_B™k1
->
BTCR
[2] = 0x00001011;

516 
FSMC_B™k1
->
BTCR
[3] = 0x00000201;

517 
FSMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

545 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[256];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

383 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

439 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

442 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

444 
uöt32_t
 
cou¡
 = 0;

445 
uöt32_t
 
mask
 = 0x80000000;

447 (
d©a
 & 
mask
) == 0)

449 
cou¡
 += 1u;

450 
mask
 = mask >> 1u;

453 (
cou¡
);

463 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

464 
q31_t
 
ö
,

465 
q31_t
 * 
d°
,

466 
q31_t
 * 
pRecùTabÀ
)

469 
uöt32_t
 
out
, 
ãmpVÆ
;

470 
uöt32_t
 
ödex
, 
i
;

471 
uöt32_t
 
signBôs
;

473 if(
ö
 > 0)

475 
signBôs
 = 
__CLZ
(
ö
) - 1;

479 
signBôs
 = 
__CLZ
(-
ö
) - 1;

483 
ö
 = i¿<< 
signBôs
;

486 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

487 
ödex
 = (ödex & 
INDEX_MASK
);

490 
out
 = 
pRecùTabÀ
[
ödex
];

494 
i
 = 0u; i < 2u; i++)

496 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

497 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

500 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

504 *
d°
 = 
out
;

507  (
signBôs
 + 1u);

514 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

515 
q15_t
 
ö
,

516 
q15_t
 * 
d°
,

517 
q15_t
 * 
pRecùTabÀ
)

520 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

521 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

522 
uöt32_t
 
signBôs
 = 0;

524 if(
ö
 > 0)

526 
signBôs
 = 
__CLZ
(
ö
) - 17;

530 
signBôs
 = 
__CLZ
(-
ö
) - 17;

534 
ö
 = i¿<< 
signBôs
;

537 
ödex
 = 
ö
 >> 8;

538 
ödex
 = (ödex & 
INDEX_MASK
);

541 
out
 = 
pRecùTabÀ
[
ödex
];

545 
i
 = 0; i < 2; i++)

547 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

548 
ãmpVÆ
 = 0x7FFF -ÅempVal;

550 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

554 *
d°
 = 
out
;

557  (
signBôs
 + 1);

565 #i‡
deföed
(
ARM_MATH_CM0
)

567 
__INLINE
 
q31_t
 
__SSAT
(

568 
q31_t
 
x
,

569 
uöt32_t
 
y
)

571 
öt32_t
 
posMax
, 
√gMö
;

572 
uöt32_t
 
i
;

574 
posMax
 = 1;

575 
i
 = 0; i < (
y
 - 1); i++)

577 
posMax
 =ÖosMax * 2;

580 if(
x
 > 0)

582 
posMax
 = (posMax - 1);

584 if(
x
 > 
posMax
)

586 
x
 = 
posMax
;

591 
√gMö
 = -
posMax
;

593 if(
x
 < 
√gMö
)

595 
x
 = 
√gMö
;

598  (
x
);

610 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

615 
__INLINE
 
q31_t
 
__QADD8
(

616 
q31_t
 
x
,

617 
q31_t
 
y
)

620 
q31_t
 
sum
;

621 
q7_t
 
r
, 
s
, 
t
, 
u
;

623 
r
 = (Ë
x
;

624 
s
 = (Ë
y
;

626 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

627 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

628 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

629 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

631 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

632 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

634  
sum
;

641 
__INLINE
 
q31_t
 
__QSUB8
(

642 
q31_t
 
x
,

643 
q31_t
 
y
)

646 
q31_t
 
sum
;

647 
q31_t
 
r
, 
s
, 
t
, 
u
;

649 
r
 = (Ë
x
;

650 
s
 = (Ë
y
;

652 
r
 = 
__SSAT
(‘ - 
s
), 8);

653 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

654 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

655 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

657 
sum
 =

658 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

660  
sum
;

670 
__INLINE
 
q31_t
 
__QADD16
(

671 
q31_t
 
x
,

672 
q31_t
 
y
)

675 
q31_t
 
sum
;

676 
q31_t
 
r
, 
s
;

678 
r
 = (Ë
x
;

679 
s
 = (Ë
y
;

681 
r
 = 
__SSAT
‘ + 
s
, 16);

682 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

684 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

686  
sum
;

693 
__INLINE
 
q31_t
 
__SHADD16
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q31_t
 
r
, 
s
;

701 
r
 = (Ë
x
;

702 
s
 = (Ë
y
;

704 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

705 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

707 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

709  
sum
;

716 
__INLINE
 
q31_t
 
__QSUB16
(

717 
q31_t
 
x
,

718 
q31_t
 
y
)

721 
q31_t
 
sum
;

722 
q31_t
 
r
, 
s
;

724 
r
 = (Ë
x
;

725 
s
 = (Ë
y
;

727 
r
 = 
__SSAT
‘ - 
s
, 16);

728 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

730 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

732  
sum
;

738 
__INLINE
 
q31_t
 
__SHSUB16
(

739 
q31_t
 
x
,

740 
q31_t
 
y
)

743 
q31_t
 
diff
;

744 
q31_t
 
r
, 
s
;

746 
r
 = (Ë
x
;

747 
s
 = (Ë
y
;

749 
r
 = (‘ >> 1Ë- (
s
 >> 1));

750 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

752 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

754  
diff
;

760 
__INLINE
 
q31_t
 
__QASX
(

761 
q31_t
 
x
,

762 
q31_t
 
y
)

765 
q31_t
 
sum
 = 0;

767 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

768 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

770  
sum
;

776 
__INLINE
 
q31_t
 
__SHASX
(

777 
q31_t
 
x
,

778 
q31_t
 
y
)

781 
q31_t
 
sum
;

782 
q31_t
 
r
, 
s
;

784 
r
 = (Ë
x
;

785 
s
 = (Ë
y
;

787 
r
 = (‘ >> 1Ë- (
y
 >> 17));

788 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

790 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

792  
sum
;

799 
__INLINE
 
q31_t
 
__QSAX
(

800 
q31_t
 
x
,

801 
q31_t
 
y
)

804 
q31_t
 
sum
 = 0;

806 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

807 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

809  
sum
;

815 
__INLINE
 
q31_t
 
__SHSAX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
;

821 
q31_t
 
r
, 
s
;

823 
r
 = (Ë
x
;

824 
s
 = (Ë
y
;

826 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

827 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

829 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

831  
sum
;

837 
__INLINE
 
q31_t
 
__SMUSDX
(

838 
q31_t
 
x
,

839 
q31_t
 
y
)

842  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

843 ((Ë(
x
 >> 16Ë* (Ë
y
)));

849 
__INLINE
 
q31_t
 
__SMUADX
(

850 
q31_t
 
x
,

851 
q31_t
 
y
)

854  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

855 ((Ë(
x
 >> 16Ë* (Ë
y
)));

861 
__INLINE
 
q31_t
 
__QADD
(

862 
q31_t
 
x
,

863 
q31_t
 
y
)

865  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

871 
__INLINE
 
q31_t
 
__QSUB
(

872 
q31_t
 
x
,

873 
q31_t
 
y
)

875  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

881 
__INLINE
 
q31_t
 
__SMLAD
(

882 
q31_t
 
x
,

883 
q31_t
 
y
,

884 
q31_t
 
sum
)

887  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

888 ((Ë
x
 * (Ë
y
));

894 
__INLINE
 
q31_t
 
__SMLADX
(

895 
q31_t
 
x
,

896 
q31_t
 
y
,

897 
q31_t
 
sum
)

900  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

901 ((Ë
x
 * (Ë(
y
 >> 16)));

907 
__INLINE
 
q31_t
 
__SMLSDX
(

908 
q31_t
 
x
,

909 
q31_t
 
y
,

910 
q31_t
 
sum
)

913  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

914 ((Ë
x
 * (Ë(
y
 >> 16)));

920 
__INLINE
 
q63_t
 
__SMLALD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
,

923 
q63_t
 
sum
)

926  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

927 ((Ë
x
 * (Ë
y
));

933 
__INLINE
 
q63_t
 
__SMLALDX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
,

936 
q63_t
 
sum
)

939  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

940 ((Ë
x
 * (Ë(
y
 >> 16));

946 
__INLINE
 
q31_t
 
__SMUAD
(

947 
q31_t
 
x
,

948 
q31_t
 
y
)

951  (((
x
 >> 16Ë* (
y
 >> 16)) +

952 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

958 
__INLINE
 
q31_t
 
__SMUSD
(

959 
q31_t
 
x
,

960 
q31_t
 
y
)

963  (-((
x
 >> 16Ë* (
y
 >> 16)) +

964 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

978 
uöt16_t
 
numT≠s
;

979 
q7_t
 *
pSèã
;

980 
q7_t
 *
pC€ffs
;

981 } 
	t¨m_fú_ö°™˚_q7
;

988 
uöt16_t
 
numT≠s
;

989 
q15_t
 *
pSèã
;

990 
q15_t
 *
pC€ffs
;

991 } 
	t¨m_fú_ö°™˚_q15
;

998 
uöt16_t
 
numT≠s
;

999 
q31_t
 *
pSèã
;

1000 
q31_t
 *
pC€ffs
;

1001 } 
	t¨m_fú_ö°™˚_q31
;

1008 
uöt16_t
 
numT≠s
;

1009 
Êﬂt32_t
 *
pSèã
;

1010 
Êﬂt32_t
 *
pC€ffs
;

1011 } 
	t¨m_fú_ö°™˚_f32
;

1022 
¨m_fú_q7
(

1023 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1024 
q7_t
 * 
pSrc
,

1025 
q7_t
 * 
pD°
,

1026 
uöt32_t
 
blockSize
);

1038 
¨m_fú_öô_q7
(

1039 
¨m_fú_ö°™˚_q7
 * 
S
,

1040 
uöt16_t
 
numT≠s
,

1041 
q7_t
 * 
pC€ffs
,

1042 
q7_t
 * 
pSèã
,

1043 
uöt32_t
 
blockSize
);

1054 
¨m_fú_q15
(

1055 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1056 
q15_t
 * 
pSrc
,

1057 
q15_t
 * 
pD°
,

1058 
uöt32_t
 
blockSize
);

1068 
¨m_fú_Á°_q15
(

1069 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1070 
q15_t
 * 
pSrc
,

1071 
q15_t
 * 
pD°
,

1072 
uöt32_t
 
blockSize
);

1085 
¨m_°©us
 
¨m_fú_öô_q15
(

1086 
¨m_fú_ö°™˚_q15
 * 
S
,

1087 
uöt16_t
 
numT≠s
,

1088 
q15_t
 * 
pC€ffs
,

1089 
q15_t
 * 
pSèã
,

1090 
uöt32_t
 
blockSize
);

1100 
¨m_fú_q31
(

1101 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1102 
q31_t
 * 
pSrc
,

1103 
q31_t
 * 
pD°
,

1104 
uöt32_t
 
blockSize
);

1114 
¨m_fú_Á°_q31
(

1115 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1116 
q31_t
 * 
pSrc
,

1117 
q31_t
 * 
pD°
,

1118 
uöt32_t
 
blockSize
);

1129 
¨m_fú_öô_q31
(

1130 
¨m_fú_ö°™˚_q31
 * 
S
,

1131 
uöt16_t
 
numT≠s
,

1132 
q31_t
 * 
pC€ffs
,

1133 
q31_t
 * 
pSèã
,

1134 
uöt32_t
 
blockSize
);

1144 
¨m_fú_f32
(

1145 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1146 
Êﬂt32_t
 * 
pSrc
,

1147 
Êﬂt32_t
 * 
pD°
,

1148 
uöt32_t
 
blockSize
);

1159 
¨m_fú_öô_f32
(

1160 
¨m_fú_ö°™˚_f32
 * 
S
,

1161 
uöt16_t
 
numT≠s
,

1162 
Êﬂt32_t
 * 
pC€ffs
,

1163 
Êﬂt32_t
 * 
pSèã
,

1164 
uöt32_t
 
blockSize
);

1172 
öt8_t
 
numSèges
;

1173 
q15_t
 *
pSèã
;

1174 
q15_t
 *
pC€ffs
;

1175 
öt8_t
 
po°Shi·
;

1177 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1185 
uöt32_t
 
numSèges
;

1186 
q31_t
 *
pSèã
;

1187 
q31_t
 *
pC€ffs
;

1188 
uöt8_t
 
po°Shi·
;

1190 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1197 
uöt32_t
 
numSèges
;

1198 
Êﬂt32_t
 *
pSèã
;

1199 
Êﬂt32_t
 *
pC€ffs
;

1202 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1215 
¨m_biquad_ˇsˇde_df1_q15
(

1216 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1217 
q15_t
 * 
pSrc
,

1218 
q15_t
 * 
pD°
,

1219 
uöt32_t
 
blockSize
);

1231 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1232 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1233 
uöt8_t
 
numSèges
,

1234 
q15_t
 * 
pC€ffs
,

1235 
q15_t
 * 
pSèã
,

1236 
öt8_t
 
po°Shi·
);

1248 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1249 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1250 
q15_t
 * 
pSrc
,

1251 
q15_t
 * 
pD°
,

1252 
uöt32_t
 
blockSize
);

1264 
¨m_biquad_ˇsˇde_df1_q31
(

1265 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1266 
q31_t
 * 
pSrc
,

1267 
q31_t
 * 
pD°
,

1268 
uöt32_t
 
blockSize
);

1279 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1280 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1281 
q31_t
 * 
pSrc
,

1282 
q31_t
 * 
pD°
,

1283 
uöt32_t
 
blockSize
);

1295 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1296 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1297 
uöt8_t
 
numSèges
,

1298 
q31_t
 * 
pC€ffs
,

1299 
q31_t
 * 
pSèã
,

1300 
öt8_t
 
po°Shi·
);

1311 
¨m_biquad_ˇsˇde_df1_f32
(

1312 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1313 
Êﬂt32_t
 * 
pSrc
,

1314 
Êﬂt32_t
 * 
pD°
,

1315 
uöt32_t
 
blockSize
);

1326 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1327 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1328 
uöt8_t
 
numSèges
,

1329 
Êﬂt32_t
 * 
pC€ffs
,

1330 
Êﬂt32_t
 * 
pSèã
);

1339 
uöt16_t
 
numRows
;

1340 
uöt16_t
 
numCﬁs
;

1341 
Êﬂt32_t
 *
pD©a
;

1342 } 
	t¨m_m©rix_ö°™˚_f32
;

1350 
uöt16_t
 
numRows
;

1351 
uöt16_t
 
numCﬁs
;

1352 
q15_t
 *
pD©a
;

1354 } 
	t¨m_m©rix_ö°™˚_q15
;

1362 
uöt16_t
 
numRows
;

1363 
uöt16_t
 
numCﬁs
;

1364 
q31_t
 *
pD©a
;

1366 } 
	t¨m_m©rix_ö°™˚_q31
;

1379 
¨m_°©us
 
¨m_m©_add_f32
(

1380 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1381 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1382 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1393 
¨m_°©us
 
¨m_m©_add_q15
(

1394 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1395 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1396 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1407 
¨m_°©us
 
¨m_m©_add_q31
(

1408 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1409 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1410 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1421 
¨m_°©us
 
¨m_m©_å™s_f32
(

1422 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1423 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1434 
¨m_°©us
 
¨m_m©_å™s_q15
(

1435 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1436 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1446 
¨m_°©us
 
¨m_m©_å™s_q31
(

1447 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1448 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1460 
¨m_°©us
 
¨m_m©_mu…_f32
(

1461 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1462 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1463 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1474 
¨m_°©us
 
¨m_m©_mu…_q15
(

1475 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1476 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1477 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1478 
q15_t
 * 
pSèã
);

1490 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1491 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1492 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1493 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1494 
q15_t
 * 
pSèã
);

1505 
¨m_°©us
 
¨m_m©_mu…_q31
(

1506 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1507 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1508 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1519 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1520 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1521 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1522 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1534 
¨m_°©us
 
¨m_m©_sub_f32
(

1535 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1536 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1537 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1548 
¨m_°©us
 
¨m_m©_sub_q15
(

1549 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1550 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1551 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1562 
¨m_°©us
 
¨m_m©_sub_q31
(

1563 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1564 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1565 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1576 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1577 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1578 
Êﬂt32_t
 
sˇÀ
,

1579 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1591 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1592 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1593 
q15_t
 
sˇÀFø˘
,

1594 
öt32_t
 
shi·
,

1595 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1607 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1608 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1609 
q31_t
 
sˇÀFø˘
,

1610 
öt32_t
 
shi·
,

1611 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1623 
¨m_m©_öô_q31
(

1624 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1625 
uöt16_t
 
nRows
,

1626 
uöt16_t
 
nCﬁumns
,

1627 
q31_t
 *
pD©a
);

1638 
¨m_m©_öô_q15
(

1639 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1640 
uöt16_t
 
nRows
,

1641 
uöt16_t
 
nCﬁumns
,

1642 
q15_t
 *
pD©a
);

1653 
¨m_m©_öô_f32
(

1654 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1655 
uöt16_t
 
nRows
,

1656 
uöt16_t
 
nCﬁumns
,

1657 
Êﬂt32_t
 *
pD©a
);

1666 
q15_t
 
A0
;

1667 #ifde‡
ARM_MATH_CM0


1668 
q15_t
 
A1
;

1669 
q15_t
 
A2
;

1671 
q31_t
 
A1
;

1673 
q15_t
 
°©e
[3];

1674 
q15_t
 
Kp
;

1675 
q15_t
 
Ki
;

1676 
q15_t
 
Kd
;

1677 } 
	t¨m_pid_ö°™˚_q15
;

1684 
q31_t
 
A0
;

1685 
q31_t
 
A1
;

1686 
q31_t
 
A2
;

1687 
q31_t
 
°©e
[3];

1688 
q31_t
 
Kp
;

1689 
q31_t
 
Ki
;

1690 
q31_t
 
Kd
;

1692 } 
	t¨m_pid_ö°™˚_q31
;

1699 
Êﬂt32_t
 
A0
;

1700 
Êﬂt32_t
 
A1
;

1701 
Êﬂt32_t
 
A2
;

1702 
Êﬂt32_t
 
°©e
[3];

1703 
Êﬂt32_t
 
Kp
;

1704 
Êﬂt32_t
 
Ki
;

1705 
Êﬂt32_t
 
Kd
;

1706 } 
	t¨m_pid_ö°™˚_f32
;

1716 
¨m_pid_öô_f32
(

1717 
¨m_pid_ö°™˚_f32
 * 
S
,

1718 
öt32_t
 
ª£tSèãFœg
);

1725 
¨m_pid_ª£t_f32
(

1726 
¨m_pid_ö°™˚_f32
 * 
S
);

1735 
¨m_pid_öô_q31
(

1736 
¨m_pid_ö°™˚_q31
 * 
S
,

1737 
öt32_t
 
ª£tSèãFœg
);

1746 
¨m_pid_ª£t_q31
(

1747 
¨m_pid_ö°™˚_q31
 * 
S
);

1755 
¨m_pid_öô_q15
(

1756 
¨m_pid_ö°™˚_q15
 * 
S
,

1757 
öt32_t
 
ª£tSèãFœg
);

1764 
¨m_pid_ª£t_q15
(

1765 
¨m_pid_ö°™˚_q15
 * 
S
);

1773 
uöt32_t
 
nVÆues
;

1774 
Êﬂt32_t
 
x1
;

1775 
Êﬂt32_t
 
xS∑cög
;

1776 
Êﬂt32_t
 *
pYD©a
;

1777 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1785 
uöt16_t
 
numRows
;

1786 
uöt16_t
 
numCﬁs
;

1787 
Êﬂt32_t
 *
pD©a
;

1788 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1796 
uöt16_t
 
numRows
;

1797 
uöt16_t
 
numCﬁs
;

1798 
q31_t
 *
pD©a
;

1799 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1807 
uöt16_t
 
numRows
;

1808 
uöt16_t
 
numCﬁs
;

1809 
q15_t
 *
pD©a
;

1810 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1818 
uöt16_t
 
numRows
;

1819 
uöt16_t
 
numCﬁs
;

1820 
q7_t
 *
pD©a
;

1821 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1833 
¨m_mu…_q7
(

1834 
q7_t
 * 
pSrcA
,

1835 
q7_t
 * 
pSrcB
,

1836 
q7_t
 * 
pD°
,

1837 
uöt32_t
 
blockSize
);

1848 
¨m_mu…_q15
(

1849 
q15_t
 * 
pSrcA
,

1850 
q15_t
 * 
pSrcB
,

1851 
q15_t
 * 
pD°
,

1852 
uöt32_t
 
blockSize
);

1863 
¨m_mu…_q31
(

1864 
q31_t
 * 
pSrcA
,

1865 
q31_t
 * 
pSrcB
,

1866 
q31_t
 * 
pD°
,

1867 
uöt32_t
 
blockSize
);

1878 
¨m_mu…_f32
(

1879 
Êﬂt32_t
 * 
pSrcA
,

1880 
Êﬂt32_t
 * 
pSrcB
,

1881 
Êﬂt32_t
 * 
pD°
,

1882 
uöt32_t
 
blockSize
);

1891 
uöt16_t
 
f·Lí
;

1892 
uöt8_t
 
if·Fœg
;

1893 
uöt8_t
 
bôRevî£Fœg
;

1894 
q15_t
 *
pTwiddÀ
;

1895 
uöt16_t
 *
pBôRevTabÀ
;

1896 
uöt16_t
 
twidC€fModifõr
;

1897 
uöt16_t
 
bôRevFa˘‹
;

1898 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1906 
uöt16_t
 
f·Lí
;

1907 
uöt8_t
 
if·Fœg
;

1908 
uöt8_t
 
bôRevî£Fœg
;

1909 
q31_t
 *
pTwiddÀ
;

1910 
uöt16_t
 *
pBôRevTabÀ
;

1911 
uöt16_t
 
twidC€fModifõr
;

1912 
uöt16_t
 
bôRevFa˘‹
;

1913 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1921 
uöt16_t
 
f·Lí
;

1922 
uöt8_t
 
if·Fœg
;

1923 
uöt8_t
 
bôRevî£Fœg
;

1924 
Êﬂt32_t
 *
pTwiddÀ
;

1925 
uöt16_t
 *
pBôRevTabÀ
;

1926 
uöt16_t
 
twidC€fModifõr
;

1927 
uöt16_t
 
bôRevFa˘‹
;

1928 
Êﬂt32_t
 
⁄ebyf·Lí
;

1929 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1938 
¨m_cf·_ødix4_q15
(

1939 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1940 
q15_t
 * 
pSrc
);

1951 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1952 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1953 
uöt16_t
 
f·Lí
,

1954 
uöt8_t
 
if·Fœg
,

1955 
uöt8_t
 
bôRevî£Fœg
);

1964 
¨m_cf·_ødix4_q31
(

1965 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1966 
q31_t
 * 
pSrc
);

1977 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1978 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1979 
uöt16_t
 
f·Lí
,

1980 
uöt8_t
 
if·Fœg
,

1981 
uöt8_t
 
bôRevî£Fœg
);

1990 
¨m_cf·_ødix4_f32
(

1991 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1992 
Êﬂt32_t
 * 
pSrc
);

2003 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2004 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2005 
uöt16_t
 
f·Lí
,

2006 
uöt8_t
 
if·Fœg
,

2007 
uöt8_t
 
bôRevî£Fœg
);

2024 
¨m_ødix4_buâîÊy_f32
(

2025 
Êﬂt32_t
 * 
pSrc
,

2026 
uöt16_t
 
f·Lí
,

2027 
Êﬂt32_t
 * 
pC€f
,

2028 
uöt16_t
 
twidC€fModifõr
);

2040 
¨m_ødix4_buâîÊy_övî£_f32
(

2041 
Êﬂt32_t
 * 
pSrc
,

2042 
uöt16_t
 
f·Lí
,

2043 
Êﬂt32_t
 * 
pC€f
,

2044 
uöt16_t
 
twidC€fModifõr
,

2045 
Êﬂt32_t
 
⁄ebyf·Lí
);

2056 
¨m_bôªvîßl_f32
(

2057 
Êﬂt32_t
 *
pSrc
,

2058 
uöt16_t
 
f·Size
,

2059 
uöt16_t
 
bôRevFa˘‹
,

2060 
uöt16_t
 *
pBôRevTab
);

2071 
¨m_ødix4_buâîÊy_q31
(

2072 
q31_t
 *
pSrc
,

2073 
uöt32_t
 
f·Lí
,

2074 
q31_t
 *
pC€f
,

2075 
uöt32_t
 
twidC€fModifõr
);

2086 
¨m_ødix4_buâîÊy_övî£_q31
(

2087 
q31_t
 * 
pSrc
,

2088 
uöt32_t
 
f·Lí
,

2089 
q31_t
 * 
pC€f
,

2090 
uöt32_t
 
twidC€fModifõr
);

2101 
¨m_bôªvîßl_q31
(

2102 
q31_t
 * 
pSrc
,

2103 
uöt32_t
 
f·Lí
,

2104 
uöt16_t
 
bôRevFa˘‹
,

2105 
uöt16_t
 *
pBôRevTab
);

2116 
¨m_ødix4_buâîÊy_q15
(

2117 
q15_t
 *
pSrc16
,

2118 
uöt32_t
 
f·Lí
,

2119 
q15_t
 *
pC€f16
,

2120 
uöt32_t
 
twidC€fModifõr
);

2131 
¨m_ødix4_buâîÊy_övî£_q15
(

2132 
q15_t
 *
pSrc16
,

2133 
uöt32_t
 
f·Lí
,

2134 
q15_t
 *
pC€f16
,

2135 
uöt32_t
 
twidC€fModifõr
);

2146 
¨m_bôªvîßl_q15
(

2147 
q15_t
 * 
pSrc
,

2148 
uöt32_t
 
f·Lí
,

2149 
uöt16_t
 
bôRevFa˘‹
,

2150 
uöt16_t
 *
pBôRevTab
);

2158 
uöt32_t
 
f·LíRól
;

2159 
uöt32_t
 
f·LíBy2
;

2160 
uöt8_t
 
if·FœgR
;

2161 
uöt8_t
 
bôRevî£FœgR
;

2162 
uöt32_t
 
twidC€fRModifõr
;

2163 
q15_t
 *
pTwiddÀARól
;

2164 
q15_t
 *
pTwiddÀBRól
;

2165 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2166 } 
	t¨m_rf·_ö°™˚_q15
;

2174 
uöt32_t
 
f·LíRól
;

2175 
uöt32_t
 
f·LíBy2
;

2176 
uöt8_t
 
if·FœgR
;

2177 
uöt8_t
 
bôRevî£FœgR
;

2178 
uöt32_t
 
twidC€fRModifõr
;

2179 
q31_t
 *
pTwiddÀARól
;

2180 
q31_t
 *
pTwiddÀBRól
;

2181 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2182 } 
	t¨m_rf·_ö°™˚_q31
;

2190 
uöt32_t
 
f·LíRól
;

2191 
uöt16_t
 
f·LíBy2
;

2192 
uöt8_t
 
if·FœgR
;

2193 
uöt8_t
 
bôRevî£FœgR
;

2194 
uöt32_t
 
twidC€fRModifõr
;

2195 
Êﬂt32_t
 *
pTwiddÀARól
;

2196 
Êﬂt32_t
 *
pTwiddÀBRól
;

2197 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2198 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_rf·_q15
(

2209 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2210 
q15_t
 * 
pSrc
,

2211 
q15_t
 * 
pD°
);

2223 
¨m_°©us
 
¨m_rf·_öô_q15
(

2224 
¨m_rf·_ö°™˚_q15
 * 
S
,

2225 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2226 
uöt32_t
 
f·LíRól
,

2227 
uöt32_t
 
if·FœgR
,

2228 
uöt32_t
 
bôRevî£Fœg
);

2238 
¨m_rf·_q31
(

2239 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2240 
q31_t
 * 
pSrc
,

2241 
q31_t
 * 
pD°
);

2253 
¨m_°©us
 
¨m_rf·_öô_q31
(

2254 
¨m_rf·_ö°™˚_q31
 * 
S
,

2255 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2256 
uöt32_t
 
f·LíRól
,

2257 
uöt32_t
 
if·FœgR
,

2258 
uöt32_t
 
bôRevî£Fœg
);

2270 
¨m_°©us
 
¨m_rf·_öô_f32
(

2271 
¨m_rf·_ö°™˚_f32
 * 
S
,

2272 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2273 
uöt32_t
 
f·LíRól
,

2274 
uöt32_t
 
if·FœgR
,

2275 
uöt32_t
 
bôRevî£Fœg
);

2285 
¨m_rf·_f32
(

2286 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2287 
Êﬂt32_t
 * 
pSrc
,

2288 
Êﬂt32_t
 * 
pD°
);

2296 
uöt16_t
 
N
;

2297 
uöt16_t
 
Nby2
;

2298 
Êﬂt32_t
 
n‹mÆize
;

2299 
Êﬂt32_t
 *
pTwiddÀ
;

2300 
Êﬂt32_t
 *
pCosFa˘‹
;

2301 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2302 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2303 } 
	t¨m_d˘4_ö°™˚_f32
;

2316 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2317 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2318 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2319 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2320 
uöt16_t
 
N
,

2321 
uöt16_t
 
Nby2
,

2322 
Êﬂt32_t
 
n‹mÆize
);

2332 
¨m_d˘4_f32
(

2333 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2334 
Êﬂt32_t
 * 
pSèã
,

2335 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2343 
uöt16_t
 
N
;

2344 
uöt16_t
 
Nby2
;

2345 
q31_t
 
n‹mÆize
;

2346 
q31_t
 *
pTwiddÀ
;

2347 
q31_t
 *
pCosFa˘‹
;

2348 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2349 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2350 } 
	t¨m_d˘4_ö°™˚_q31
;

2363 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2364 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2365 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2366 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2367 
uöt16_t
 
N
,

2368 
uöt16_t
 
Nby2
,

2369 
q31_t
 
n‹mÆize
);

2379 
¨m_d˘4_q31
(

2380 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2381 
q31_t
 * 
pSèã
,

2382 
q31_t
 * 
pI∆öeBuf„r
);

2390 
uöt16_t
 
N
;

2391 
uöt16_t
 
Nby2
;

2392 
q15_t
 
n‹mÆize
;

2393 
q15_t
 *
pTwiddÀ
;

2394 
q15_t
 *
pCosFa˘‹
;

2395 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2396 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2397 } 
	t¨m_d˘4_ö°™˚_q15
;

2410 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2411 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2412 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2413 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2414 
uöt16_t
 
N
,

2415 
uöt16_t
 
Nby2
,

2416 
q15_t
 
n‹mÆize
);

2426 
¨m_d˘4_q15
(

2427 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2428 
q15_t
 * 
pSèã
,

2429 
q15_t
 * 
pI∆öeBuf„r
);

2440 
¨m_add_f32
(

2441 
Êﬂt32_t
 * 
pSrcA
,

2442 
Êﬂt32_t
 * 
pSrcB
,

2443 
Êﬂt32_t
 * 
pD°
,

2444 
uöt32_t
 
blockSize
);

2455 
¨m_add_q7
(

2456 
q7_t
 * 
pSrcA
,

2457 
q7_t
 * 
pSrcB
,

2458 
q7_t
 * 
pD°
,

2459 
uöt32_t
 
blockSize
);

2470 
¨m_add_q15
(

2471 
q15_t
 * 
pSrcA
,

2472 
q15_t
 * 
pSrcB
,

2473 
q15_t
 * 
pD°
,

2474 
uöt32_t
 
blockSize
);

2485 
¨m_add_q31
(

2486 
q31_t
 * 
pSrcA
,

2487 
q31_t
 * 
pSrcB
,

2488 
q31_t
 * 
pD°
,

2489 
uöt32_t
 
blockSize
);

2500 
¨m_sub_f32
(

2501 
Êﬂt32_t
 * 
pSrcA
,

2502 
Êﬂt32_t
 * 
pSrcB
,

2503 
Êﬂt32_t
 * 
pD°
,

2504 
uöt32_t
 
blockSize
);

2515 
¨m_sub_q7
(

2516 
q7_t
 * 
pSrcA
,

2517 
q7_t
 * 
pSrcB
,

2518 
q7_t
 * 
pD°
,

2519 
uöt32_t
 
blockSize
);

2530 
¨m_sub_q15
(

2531 
q15_t
 * 
pSrcA
,

2532 
q15_t
 * 
pSrcB
,

2533 
q15_t
 * 
pD°
,

2534 
uöt32_t
 
blockSize
);

2545 
¨m_sub_q31
(

2546 
q31_t
 * 
pSrcA
,

2547 
q31_t
 * 
pSrcB
,

2548 
q31_t
 * 
pD°
,

2549 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_f32
(

2561 
Êﬂt32_t
 * 
pSrc
,

2562 
Êﬂt32_t
 
sˇÀ
,

2563 
Êﬂt32_t
 * 
pD°
,

2564 
uöt32_t
 
blockSize
);

2576 
¨m_sˇÀ_q7
(

2577 
q7_t
 * 
pSrc
,

2578 
q7_t
 
sˇÀFø˘
,

2579 
öt8_t
 
shi·
,

2580 
q7_t
 * 
pD°
,

2581 
uöt32_t
 
blockSize
);

2593 
¨m_sˇÀ_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 
sˇÀFø˘
,

2596 
öt8_t
 
shi·
,

2597 
q15_t
 * 
pD°
,

2598 
uöt32_t
 
blockSize
);

2610 
¨m_sˇÀ_q31
(

2611 
q31_t
 * 
pSrc
,

2612 
q31_t
 
sˇÀFø˘
,

2613 
öt8_t
 
shi·
,

2614 
q31_t
 * 
pD°
,

2615 
uöt32_t
 
blockSize
);

2625 
¨m_abs_q7
(

2626 
q7_t
 * 
pSrc
,

2627 
q7_t
 * 
pD°
,

2628 
uöt32_t
 
blockSize
);

2638 
¨m_abs_f32
(

2639 
Êﬂt32_t
 * 
pSrc
,

2640 
Êﬂt32_t
 * 
pD°
,

2641 
uöt32_t
 
blockSize
);

2651 
¨m_abs_q15
(

2652 
q15_t
 * 
pSrc
,

2653 
q15_t
 * 
pD°
,

2654 
uöt32_t
 
blockSize
);

2664 
¨m_abs_q31
(

2665 
q31_t
 * 
pSrc
,

2666 
q31_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2678 
¨m_dŸ_¥od_f32
(

2679 
Êﬂt32_t
 * 
pSrcA
,

2680 
Êﬂt32_t
 * 
pSrcB
,

2681 
uöt32_t
 
blockSize
,

2682 
Êﬂt32_t
 * 
ªsu…
);

2693 
¨m_dŸ_¥od_q7
(

2694 
q7_t
 * 
pSrcA
,

2695 
q7_t
 * 
pSrcB
,

2696 
uöt32_t
 
blockSize
,

2697 
q31_t
 * 
ªsu…
);

2708 
¨m_dŸ_¥od_q15
(

2709 
q15_t
 * 
pSrcA
,

2710 
q15_t
 * 
pSrcB
,

2711 
uöt32_t
 
blockSize
,

2712 
q63_t
 * 
ªsu…
);

2723 
¨m_dŸ_¥od_q31
(

2724 
q31_t
 * 
pSrcA
,

2725 
q31_t
 * 
pSrcB
,

2726 
uöt32_t
 
blockSize
,

2727 
q63_t
 * 
ªsu…
);

2738 
¨m_shi·_q7
(

2739 
q7_t
 * 
pSrc
,

2740 
öt8_t
 
shi·Bôs
,

2741 
q7_t
 * 
pD°
,

2742 
uöt32_t
 
blockSize
);

2753 
¨m_shi·_q15
(

2754 
q15_t
 * 
pSrc
,

2755 
öt8_t
 
shi·Bôs
,

2756 
q15_t
 * 
pD°
,

2757 
uöt32_t
 
blockSize
);

2768 
¨m_shi·_q31
(

2769 
q31_t
 * 
pSrc
,

2770 
öt8_t
 
shi·Bôs
,

2771 
q31_t
 * 
pD°
,

2772 
uöt32_t
 
blockSize
);

2783 
¨m_off£t_f32
(

2784 
Êﬂt32_t
 * 
pSrc
,

2785 
Êﬂt32_t
 
off£t
,

2786 
Êﬂt32_t
 * 
pD°
,

2787 
uöt32_t
 
blockSize
);

2798 
¨m_off£t_q7
(

2799 
q7_t
 * 
pSrc
,

2800 
q7_t
 
off£t
,

2801 
q7_t
 * 
pD°
,

2802 
uöt32_t
 
blockSize
);

2813 
¨m_off£t_q15
(

2814 
q15_t
 * 
pSrc
,

2815 
q15_t
 
off£t
,

2816 
q15_t
 * 
pD°
,

2817 
uöt32_t
 
blockSize
);

2828 
¨m_off£t_q31
(

2829 
q31_t
 * 
pSrc
,

2830 
q31_t
 
off£t
,

2831 
q31_t
 * 
pD°
,

2832 
uöt32_t
 
blockSize
);

2842 
¨m_√g©e_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2855 
¨m_√g©e_q7
(

2856 
q7_t
 * 
pSrc
,

2857 
q7_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2868 
¨m_√g©e_q15
(

2869 
q15_t
 * 
pSrc
,

2870 
q15_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2881 
¨m_√g©e_q31
(

2882 
q31_t
 * 
pSrc
,

2883 
q31_t
 * 
pD°
,

2884 
uöt32_t
 
blockSize
);

2892 
¨m_c›y_f32
(

2893 
Êﬂt32_t
 * 
pSrc
,

2894 
Êﬂt32_t
 * 
pD°
,

2895 
uöt32_t
 
blockSize
);

2904 
¨m_c›y_q7
(

2905 
q7_t
 * 
pSrc
,

2906 
q7_t
 * 
pD°
,

2907 
uöt32_t
 
blockSize
);

2916 
¨m_c›y_q15
(

2917 
q15_t
 * 
pSrc
,

2918 
q15_t
 * 
pD°
,

2919 
uöt32_t
 
blockSize
);

2928 
¨m_c›y_q31
(

2929 
q31_t
 * 
pSrc
,

2930 
q31_t
 * 
pD°
,

2931 
uöt32_t
 
blockSize
);

2939 
¨m_fûl_f32
(

2940 
Êﬂt32_t
 
vÆue
,

2941 
Êﬂt32_t
 * 
pD°
,

2942 
uöt32_t
 
blockSize
);

2951 
¨m_fûl_q7
(

2952 
q7_t
 
vÆue
,

2953 
q7_t
 * 
pD°
,

2954 
uöt32_t
 
blockSize
);

2963 
¨m_fûl_q15
(

2964 
q15_t
 
vÆue
,

2965 
q15_t
 * 
pD°
,

2966 
uöt32_t
 
blockSize
);

2975 
¨m_fûl_q31
(

2976 
q31_t
 
vÆue
,

2977 
q31_t
 * 
pD°
,

2978 
uöt32_t
 
blockSize
);

2990 
¨m_c⁄v_f32
(

2991 
Êﬂt32_t
 * 
pSrcA
,

2992 
uöt32_t
 
§cALí
,

2993 
Êﬂt32_t
 * 
pSrcB
,

2994 
uöt32_t
 
§cBLí
,

2995 
Êﬂt32_t
 * 
pD°
);

3007 
¨m_c⁄v_q15
(

3008 
q15_t
 * 
pSrcA
,

3009 
uöt32_t
 
§cALí
,

3010 
q15_t
 * 
pSrcB
,

3011 
uöt32_t
 
§cBLí
,

3012 
q15_t
 * 
pD°
);

3024 
¨m_c⁄v_Á°_q15
(

3025 
q15_t
 * 
pSrcA
,

3026 
uöt32_t
 
§cALí
,

3027 
q15_t
 * 
pSrcB
,

3028 
uöt32_t
 
§cBLí
,

3029 
q15_t
 * 
pD°
);

3041 
¨m_c⁄v_q31
(

3042 
q31_t
 * 
pSrcA
,

3043 
uöt32_t
 
§cALí
,

3044 
q31_t
 * 
pSrcB
,

3045 
uöt32_t
 
§cBLí
,

3046 
q31_t
 * 
pD°
);

3058 
¨m_c⁄v_Á°_q31
(

3059 
q31_t
 * 
pSrcA
,

3060 
uöt32_t
 
§cALí
,

3061 
q31_t
 * 
pSrcB
,

3062 
uöt32_t
 
§cBLí
,

3063 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
);

3094 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3095 
Êﬂt32_t
 * 
pSrcA
,

3096 
uöt32_t
 
§cALí
,

3097 
Êﬂt32_t
 * 
pSrcB
,

3098 
uöt32_t
 
§cBLí
,

3099 
Êﬂt32_t
 * 
pD°
,

3100 
uöt32_t
 
fú°Index
,

3101 
uöt32_t
 
numPoöts
);

3115 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3116 
q15_t
 * 
pSrcA
,

3117 
uöt32_t
 
§cALí
,

3118 
q15_t
 * 
pSrcB
,

3119 
uöt32_t
 
§cBLí
,

3120 
q15_t
 * 
pD°
,

3121 
uöt32_t
 
fú°Index
,

3122 
uöt32_t
 
numPoöts
);

3136 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
uöt32_t
 
fú°Index
,

3143 
uöt32_t
 
numPoöts
);

3157 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
,

3163 
uöt32_t
 
fú°Index
,

3164 
uöt32_t
 
numPoöts
);

3179 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3180 
q31_t
 * 
pSrcA
,

3181 
uöt32_t
 
§cALí
,

3182 
q31_t
 * 
pSrcB
,

3183 
uöt32_t
 
§cBLí
,

3184 
q31_t
 * 
pD°
,

3185 
uöt32_t
 
fú°Index
,

3186 
uöt32_t
 
numPoöts
);

3200 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3201 
q7_t
 * 
pSrcA
,

3202 
uöt32_t
 
§cALí
,

3203 
q7_t
 * 
pSrcB
,

3204 
uöt32_t
 
§cBLí
,

3205 
q7_t
 * 
pD°
,

3206 
uöt32_t
 
fú°Index
,

3207 
uöt32_t
 
numPoöts
);

3216 
uöt8_t
 
M
;

3217 
uöt16_t
 
numT≠s
;

3218 
q15_t
 *
pC€ffs
;

3219 
q15_t
 *
pSèã
;

3220 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3228 
uöt8_t
 
M
;

3229 
uöt16_t
 
numT≠s
;

3230 
q31_t
 *
pC€ffs
;

3231 
q31_t
 *
pSèã
;

3233 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3241 
uöt8_t
 
M
;

3242 
uöt16_t
 
numT≠s
;

3243 
Êﬂt32_t
 *
pC€ffs
;

3244 
Êﬂt32_t
 *
pSèã
;

3246 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3259 
¨m_fú_decim©e_f32
(

3260 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3261 
Êﬂt32_t
 * 
pSrc
,

3262 
Êﬂt32_t
 * 
pD°
,

3263 
uöt32_t
 
blockSize
);

3278 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3279 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3280 
uöt16_t
 
numT≠s
,

3281 
uöt8_t
 
M
,

3282 
Êﬂt32_t
 * 
pC€ffs
,

3283 
Êﬂt32_t
 * 
pSèã
,

3284 
uöt32_t
 
blockSize
);

3295 
¨m_fú_decim©e_q15
(

3296 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3297 
q15_t
 * 
pSrc
,

3298 
q15_t
 * 
pD°
,

3299 
uöt32_t
 
blockSize
);

3310 
¨m_fú_decim©e_Á°_q15
(

3311 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3312 
q15_t
 * 
pSrc
,

3313 
q15_t
 * 
pD°
,

3314 
uöt32_t
 
blockSize
);

3330 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3331 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3332 
uöt16_t
 
numT≠s
,

3333 
uöt8_t
 
M
,

3334 
q15_t
 * 
pC€ffs
,

3335 
q15_t
 * 
pSèã
,

3336 
uöt32_t
 
blockSize
);

3347 
¨m_fú_decim©e_q31
(

3348 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3349 
q31_t
 * 
pSrc
,

3350 
q31_t
 * 
pD°
,

3351 
uöt32_t
 
blockSize
);

3362 
¨m_fú_decim©e_Á°_q31
(

3363 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3364 
q31_t
 * 
pSrc
,

3365 
q31_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3382 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
q31_t
 * 
pC€ffs
,

3386 
q31_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3397 
uöt8_t
 
L
;

3398 
uöt16_t
 
pha£Lígth
;

3399 
q15_t
 *
pC€ffs
;

3400 
q15_t
 *
pSèã
;

3401 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3409 
uöt8_t
 
L
;

3410 
uöt16_t
 
pha£Lígth
;

3411 
q31_t
 *
pC€ffs
;

3412 
q31_t
 *
pSèã
;

3413 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3421 
uöt8_t
 
L
;

3422 
uöt16_t
 
pha£Lígth
;

3423 
Êﬂt32_t
 *
pC€ffs
;

3424 
Êﬂt32_t
 *
pSèã
;

3425 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3437 
¨m_fú_öãΩﬁ©e_q15
(

3438 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3439 
q15_t
 * 
pSrc
,

3440 
q15_t
 * 
pD°
,

3441 
uöt32_t
 
blockSize
);

3456 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3457 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3458 
uöt8_t
 
L
,

3459 
uöt16_t
 
numT≠s
,

3460 
q15_t
 * 
pC€ffs
,

3461 
q15_t
 * 
pSèã
,

3462 
uöt32_t
 
blockSize
);

3473 
¨m_fú_öãΩﬁ©e_q31
(

3474 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3475 
q31_t
 * 
pSrc
,

3476 
q31_t
 * 
pD°
,

3477 
uöt32_t
 
blockSize
);

3491 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3492 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3493 
uöt8_t
 
L
,

3494 
uöt16_t
 
numT≠s
,

3495 
q31_t
 * 
pC€ffs
,

3496 
q31_t
 * 
pSèã
,

3497 
uöt32_t
 
blockSize
);

3509 
¨m_fú_öãΩﬁ©e_f32
(

3510 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3511 
Êﬂt32_t
 * 
pSrc
,

3512 
Êﬂt32_t
 * 
pD°
,

3513 
uöt32_t
 
blockSize
);

3527 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3528 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3529 
uöt8_t
 
L
,

3530 
uöt16_t
 
numT≠s
,

3531 
Êﬂt32_t
 * 
pC€ffs
,

3532 
Êﬂt32_t
 * 
pSèã
,

3533 
uöt32_t
 
blockSize
);

3541 
uöt8_t
 
numSèges
;

3542 
q63_t
 *
pSèã
;

3543 
q31_t
 *
pC€ffs
;

3544 
uöt8_t
 
po°Shi·
;

3546 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3557 
¨m_biquad_ˇs_df1_32x64_q31
(

3558 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3559 
q31_t
 * 
pSrc
,

3560 
q31_t
 * 
pD°
,

3561 
uöt32_t
 
blockSize
);

3573 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3574 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3575 
uöt8_t
 
numSèges
,

3576 
q31_t
 * 
pC€ffs
,

3577 
q63_t
 * 
pSèã
,

3578 
uöt8_t
 
po°Shi·
);

3588 
uöt8_t
 
numSèges
;

3589 
Êﬂt32_t
 *
pSèã
;

3590 
Êﬂt32_t
 *
pC€ffs
;

3591 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3603 
¨m_biquad_ˇsˇde_df2T_f32
(

3604 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3605 
Êﬂt32_t
 * 
pSrc
,

3606 
Êﬂt32_t
 * 
pD°
,

3607 
uöt32_t
 
blockSize
);

3619 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3620 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3621 
uöt8_t
 
numSèges
,

3622 
Êﬂt32_t
 * 
pC€ffs
,

3623 
Êﬂt32_t
 * 
pSèã
);

3633 
uöt16_t
 
numSèges
;

3634 
q15_t
 *
pSèã
;

3635 
q15_t
 *
pC€ffs
;

3636 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3644 
uöt16_t
 
numSèges
;

3645 
q31_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3655 
uöt16_t
 
numSèges
;

3656 
Êﬂt32_t
 *
pSèã
;

3657 
Êﬂt32_t
 *
pC€ffs
;

3658 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3669 
¨m_fú_œâi˚_öô_q15
(

3670 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3671 
uöt16_t
 
numSèges
,

3672 
q15_t
 * 
pC€ffs
,

3673 
q15_t
 * 
pSèã
);

3684 
¨m_fú_œâi˚_q15
(

3685 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3686 
q15_t
 * 
pSrc
,

3687 
q15_t
 * 
pD°
,

3688 
uöt32_t
 
blockSize
);

3699 
¨m_fú_œâi˚_öô_q31
(

3700 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3701 
uöt16_t
 
numSèges
,

3702 
q31_t
 * 
pC€ffs
,

3703 
q31_t
 * 
pSèã
);

3715 
¨m_fú_œâi˚_q31
(

3716 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3717 
q31_t
 * 
pSrc
,

3718 
q31_t
 * 
pD°
,

3719 
uöt32_t
 
blockSize
);

3730 
¨m_fú_œâi˚_öô_f32
(

3731 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3732 
uöt16_t
 
numSèges
,

3733 
Êﬂt32_t
 * 
pC€ffs
,

3734 
Êﬂt32_t
 * 
pSèã
);

3745 
¨m_fú_œâi˚_f32
(

3746 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3747 
Êﬂt32_t
 * 
pSrc
,

3748 
Êﬂt32_t
 * 
pD°
,

3749 
uöt32_t
 
blockSize
);

3756 
uöt16_t
 
numSèges
;

3757 
q15_t
 *
pSèã
;

3758 
q15_t
 *
pkC€ffs
;

3759 
q15_t
 *
pvC€ffs
;

3760 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3767 
uöt16_t
 
numSèges
;

3768 
q31_t
 *
pSèã
;

3769 
q31_t
 *
pkC€ffs
;

3770 
q31_t
 *
pvC€ffs
;

3771 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3778 
uöt16_t
 
numSèges
;

3779 
Êﬂt32_t
 *
pSèã
;

3780 
Êﬂt32_t
 *
pkC€ffs
;

3781 
Êﬂt32_t
 *
pvC€ffs
;

3782 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3793 
¨m_iú_œâi˚_f32
(

3794 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3795 
Êﬂt32_t
 * 
pSrc
,

3796 
Êﬂt32_t
 * 
pD°
,

3797 
uöt32_t
 
blockSize
);

3810 
¨m_iú_œâi˚_öô_f32
(

3811 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3812 
uöt16_t
 
numSèges
,

3813 
Êﬂt32_t
 *
pkC€ffs
,

3814 
Êﬂt32_t
 *
pvC€ffs
,

3815 
Êﬂt32_t
 *
pSèã
,

3816 
uöt32_t
 
blockSize
);

3828 
¨m_iú_œâi˚_q31
(

3829 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3830 
q31_t
 * 
pSrc
,

3831 
q31_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3846 
¨m_iú_œâi˚_öô_q31
(

3847 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3848 
uöt16_t
 
numSèges
,

3849 
q31_t
 *
pkC€ffs
,

3850 
q31_t
 *
pvC€ffs
,

3851 
q31_t
 *
pSèã
,

3852 
uöt32_t
 
blockSize
);

3864 
¨m_iú_œâi˚_q15
(

3865 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3866 
q15_t
 * 
pSrc
,

3867 
q15_t
 * 
pD°
,

3868 
uöt32_t
 
blockSize
);

3882 
¨m_iú_œâi˚_öô_q15
(

3883 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3884 
uöt16_t
 
numSèges
,

3885 
q15_t
 *
pkC€ffs
,

3886 
q15_t
 *
pvC€ffs
,

3887 
q15_t
 *
pSèã
,

3888 
uöt32_t
 
blockSize
);

3896 
uöt16_t
 
numT≠s
;

3897 
Êﬂt32_t
 *
pSèã
;

3898 
Êﬂt32_t
 *
pC€ffs
;

3899 
Êﬂt32_t
 
mu
;

3900 } 
	t¨m_lms_ö°™˚_f32
;

3913 
¨m_lms_f32
(

3914 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3915 
Êﬂt32_t
 * 
pSrc
,

3916 
Êﬂt32_t
 * 
pRef
,

3917 
Êﬂt32_t
 * 
pOut
,

3918 
Êﬂt32_t
 * 
pEº
,

3919 
uöt32_t
 
blockSize
);

3932 
¨m_lms_öô_f32
(

3933 
¨m_lms_ö°™˚_f32
 * 
S
,

3934 
uöt16_t
 
numT≠s
,

3935 
Êﬂt32_t
 * 
pC€ffs
,

3936 
Êﬂt32_t
 * 
pSèã
,

3937 
Êﬂt32_t
 
mu
,

3938 
uöt32_t
 
blockSize
);

3946 
uöt16_t
 
numT≠s
;

3947 
q15_t
 *
pSèã
;

3948 
q15_t
 *
pC€ffs
;

3949 
q15_t
 
mu
;

3950 
uöt32_t
 
po°Shi·
;

3951 } 
	t¨m_lms_ö°™˚_q15
;

3966 
¨m_lms_öô_q15
(

3967 
¨m_lms_ö°™˚_q15
 * 
S
,

3968 
uöt16_t
 
numT≠s
,

3969 
q15_t
 * 
pC€ffs
,

3970 
q15_t
 * 
pSèã
,

3971 
q15_t
 
mu
,

3972 
uöt32_t
 
blockSize
,

3973 
uöt32_t
 
po°Shi·
);

3986 
¨m_lms_q15
(

3987 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3988 
q15_t
 * 
pSrc
,

3989 
q15_t
 * 
pRef
,

3990 
q15_t
 * 
pOut
,

3991 
q15_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4001 
uöt16_t
 
numT≠s
;

4002 
q31_t
 *
pSèã
;

4003 
q31_t
 *
pC€ffs
;

4004 
q31_t
 
mu
;

4005 
uöt32_t
 
po°Shi·
;

4007 } 
	t¨m_lms_ö°™˚_q31
;

4020 
¨m_lms_q31
(

4021 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4022 
q31_t
 * 
pSrc
,

4023 
q31_t
 * 
pRef
,

4024 
q31_t
 * 
pOut
,

4025 
q31_t
 * 
pEº
,

4026 
uöt32_t
 
blockSize
);

4040 
¨m_lms_öô_q31
(

4041 
¨m_lms_ö°™˚_q31
 * 
S
,

4042 
uöt16_t
 
numT≠s
,

4043 
q31_t
 *
pC€ffs
,

4044 
q31_t
 *
pSèã
,

4045 
q31_t
 
mu
,

4046 
uöt32_t
 
blockSize
,

4047 
uöt32_t
 
po°Shi·
);

4055 
uöt16_t
 
numT≠s
;

4056 
Êﬂt32_t
 *
pSèã
;

4057 
Êﬂt32_t
 *
pC€ffs
;

4058 
Êﬂt32_t
 
mu
;

4059 
Êﬂt32_t
 
íîgy
;

4060 
Êﬂt32_t
 
x0
;

4061 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4074 
¨m_lms_n‹m_f32
(

4075 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4076 
Êﬂt32_t
 * 
pSrc
,

4077 
Êﬂt32_t
 * 
pRef
,

4078 
Êﬂt32_t
 * 
pOut
,

4079 
Êﬂt32_t
 * 
pEº
,

4080 
uöt32_t
 
blockSize
);

4093 
¨m_lms_n‹m_öô_f32
(

4094 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4095 
uöt16_t
 
numT≠s
,

4096 
Êﬂt32_t
 * 
pC€ffs
,

4097 
Êﬂt32_t
 * 
pSèã
,

4098 
Êﬂt32_t
 
mu
,

4099 
uöt32_t
 
blockSize
);

4107 
uöt16_t
 
numT≠s
;

4108 
q31_t
 *
pSèã
;

4109 
q31_t
 *
pC€ffs
;

4110 
q31_t
 
mu
;

4111 
uöt8_t
 
po°Shi·
;

4112 
q31_t
 *
ªcùTabÀ
;

4113 
q31_t
 
íîgy
;

4114 
q31_t
 
x0
;

4115 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4128 
¨m_lms_n‹m_q31
(

4129 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4130 
q31_t
 * 
pSrc
,

4131 
q31_t
 * 
pRef
,

4132 
q31_t
 * 
pOut
,

4133 
q31_t
 * 
pEº
,

4134 
uöt32_t
 
blockSize
);

4148 
¨m_lms_n‹m_öô_q31
(

4149 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4150 
uöt16_t
 
numT≠s
,

4151 
q31_t
 * 
pC€ffs
,

4152 
q31_t
 * 
pSèã
,

4153 
q31_t
 
mu
,

4154 
uöt32_t
 
blockSize
,

4155 
uöt8_t
 
po°Shi·
);

4163 
uöt16_t
 
numT≠s
;

4164 
q15_t
 *
pSèã
;

4165 
q15_t
 *
pC€ffs
;

4166 
q15_t
 
mu
;

4167 
uöt8_t
 
po°Shi·
;

4168 
q15_t
 *
ªcùTabÀ
;

4169 
q15_t
 
íîgy
;

4170 
q15_t
 
x0
;

4171 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4184 
¨m_lms_n‹m_q15
(

4185 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4186 
q15_t
 * 
pSrc
,

4187 
q15_t
 * 
pRef
,

4188 
q15_t
 * 
pOut
,

4189 
q15_t
 * 
pEº
,

4190 
uöt32_t
 
blockSize
);

4205 
¨m_lms_n‹m_öô_q15
(

4206 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4207 
uöt16_t
 
numT≠s
,

4208 
q15_t
 * 
pC€ffs
,

4209 
q15_t
 * 
pSèã
,

4210 
q15_t
 
mu
,

4211 
uöt32_t
 
blockSize
,

4212 
uöt8_t
 
po°Shi·
);

4224 
¨m_c‹ªœã_f32
(

4225 
Êﬂt32_t
 * 
pSrcA
,

4226 
uöt32_t
 
§cALí
,

4227 
Êﬂt32_t
 * 
pSrcB
,

4228 
uöt32_t
 
§cBLí
,

4229 
Êﬂt32_t
 * 
pD°
);

4241 
¨m_c‹ªœã_q15
(

4242 
q15_t
 * 
pSrcA
,

4243 
uöt32_t
 
§cALí
,

4244 
q15_t
 * 
pSrcB
,

4245 
uöt32_t
 
§cBLí
,

4246 
q15_t
 * 
pD°
);

4258 
¨m_c‹ªœã_Á°_q15
(

4259 
q15_t
 * 
pSrcA
,

4260 
uöt32_t
 
§cALí
,

4261 
q15_t
 * 
pSrcB
,

4262 
uöt32_t
 
§cBLí
,

4263 
q15_t
 * 
pD°
);

4275 
¨m_c‹ªœã_q31
(

4276 
q31_t
 * 
pSrcA
,

4277 
uöt32_t
 
§cALí
,

4278 
q31_t
 * 
pSrcB
,

4279 
uöt32_t
 
§cBLí
,

4280 
q31_t
 * 
pD°
);

4292 
¨m_c‹ªœã_Á°_q31
(

4293 
q31_t
 * 
pSrcA
,

4294 
uöt32_t
 
§cALí
,

4295 
q31_t
 * 
pSrcB
,

4296 
uöt32_t
 
§cBLí
,

4297 
q31_t
 * 
pD°
);

4309 
¨m_c‹ªœã_q7
(

4310 
q7_t
 * 
pSrcA
,

4311 
uöt32_t
 
§cALí
,

4312 
q7_t
 * 
pSrcB
,

4313 
uöt32_t
 
§cBLí
,

4314 
q7_t
 * 
pD°
);

4321 
uöt16_t
 
numT≠s
;

4322 
uöt16_t
 
°©eIndex
;

4323 
Êﬂt32_t
 *
pSèã
;

4324 
Êﬂt32_t
 *
pC€ffs
;

4325 
uöt16_t
 
maxDñay
;

4326 
öt32_t
 *
pT≠Dñay
;

4327 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4335 
uöt16_t
 
numT≠s
;

4336 
uöt16_t
 
°©eIndex
;

4337 
q31_t
 *
pSèã
;

4338 
q31_t
 *
pC€ffs
;

4339 
uöt16_t
 
maxDñay
;

4340 
öt32_t
 *
pT≠Dñay
;

4341 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4349 
uöt16_t
 
numT≠s
;

4350 
uöt16_t
 
°©eIndex
;

4351 
q15_t
 *
pSèã
;

4352 
q15_t
 *
pC€ffs
;

4353 
uöt16_t
 
maxDñay
;

4354 
öt32_t
 *
pT≠Dñay
;

4355 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4363 
uöt16_t
 
numT≠s
;

4364 
uöt16_t
 
°©eIndex
;

4365 
q7_t
 *
pSèã
;

4366 
q7_t
 *
pC€ffs
;

4367 
uöt16_t
 
maxDñay
;

4368 
öt32_t
 *
pT≠Dñay
;

4369 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4381 
¨m_fú_•¨£_f32
(

4382 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4383 
Êﬂt32_t
 * 
pSrc
,

4384 
Êﬂt32_t
 * 
pD°
,

4385 
Êﬂt32_t
 * 
pS¸©chIn
,

4386 
uöt32_t
 
blockSize
);

4400 
¨m_fú_•¨£_öô_f32
(

4401 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4402 
uöt16_t
 
numT≠s
,

4403 
Êﬂt32_t
 * 
pC€ffs
,

4404 
Êﬂt32_t
 * 
pSèã
,

4405 
öt32_t
 * 
pT≠Dñay
,

4406 
uöt16_t
 
maxDñay
,

4407 
uöt32_t
 
blockSize
);

4419 
¨m_fú_•¨£_q31
(

4420 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4421 
q31_t
 * 
pSrc
,

4422 
q31_t
 * 
pD°
,

4423 
q31_t
 * 
pS¸©chIn
,

4424 
uöt32_t
 
blockSize
);

4438 
¨m_fú_•¨£_öô_q31
(

4439 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4440 
uöt16_t
 
numT≠s
,

4441 
q31_t
 * 
pC€ffs
,

4442 
q31_t
 * 
pSèã
,

4443 
öt32_t
 * 
pT≠Dñay
,

4444 
uöt16_t
 
maxDñay
,

4445 
uöt32_t
 
blockSize
);

4458 
¨m_fú_•¨£_q15
(

4459 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4460 
q15_t
 * 
pSrc
,

4461 
q15_t
 * 
pD°
,

4462 
q15_t
 * 
pS¸©chIn
,

4463 
q31_t
 * 
pS¸©chOut
,

4464 
uöt32_t
 
blockSize
);

4479 
¨m_fú_•¨£_öô_q15
(

4480 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4481 
uöt16_t
 
numT≠s
,

4482 
q15_t
 * 
pC€ffs
,

4483 
q15_t
 * 
pSèã
,

4484 
öt32_t
 * 
pT≠Dñay
,

4485 
uöt16_t
 
maxDñay
,

4486 
uöt32_t
 
blockSize
);

4499 
¨m_fú_•¨£_q7
(

4500 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4501 
q7_t
 * 
pSrc
,

4502 
q7_t
 * 
pD°
,

4503 
q7_t
 * 
pS¸©chIn
,

4504 
q31_t
 * 
pS¸©chOut
,

4505 
uöt32_t
 
blockSize
);

4519 
¨m_fú_•¨£_öô_q7
(

4520 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4521 
uöt16_t
 
numT≠s
,

4522 
q7_t
 * 
pC€ffs
,

4523 
q7_t
 * 
pSèã
,

4524 
öt32_t
 *
pT≠Dñay
,

4525 
uöt16_t
 
maxDñay
,

4526 
uöt32_t
 
blockSize
);

4537 
¨m_sö_cos_f32
(

4538 
Êﬂt32_t
 
thëa
,

4539 
Êﬂt32_t
 *
pSöVÆ
,

4540 
Êﬂt32_t
 *
pCcosVÆ
);

4550 
¨m_sö_cos_q31
(

4551 
q31_t
 
thëa
,

4552 
q31_t
 *
pSöVÆ
,

4553 
q31_t
 *
pCosVÆ
);

4564 
¨m_cm∂x_c⁄j_f32
(

4565 
Êﬂt32_t
 * 
pSrc
,

4566 
Êﬂt32_t
 * 
pD°
,

4567 
uöt32_t
 
numSam∂es
);

4577 
¨m_cm∂x_c⁄j_q31
(

4578 
q31_t
 * 
pSrc
,

4579 
q31_t
 * 
pD°
,

4580 
uöt32_t
 
numSam∂es
);

4590 
¨m_cm∂x_c⁄j_q15
(

4591 
q15_t
 * 
pSrc
,

4592 
q15_t
 * 
pD°
,

4593 
uöt32_t
 
numSam∂es
);

4605 
¨m_cm∂x_mag_squ¨ed_f32
(

4606 
Êﬂt32_t
 * 
pSrc
,

4607 
Êﬂt32_t
 * 
pD°
,

4608 
uöt32_t
 
numSam∂es
);

4618 
¨m_cm∂x_mag_squ¨ed_q31
(

4619 
q31_t
 * 
pSrc
,

4620 
q31_t
 * 
pD°
,

4621 
uöt32_t
 
numSam∂es
);

4631 
¨m_cm∂x_mag_squ¨ed_q15
(

4632 
q15_t
 * 
pSrc
,

4633 
q15_t
 * 
pD°
,

4634 
uöt32_t
 
numSam∂es
);

4711 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4712 
¨m_pid_ö°™˚_f32
 * 
S
,

4713 
Êﬂt32_t
 
ö
)

4715 
Êﬂt32_t
 
out
;

4718 
out
 = (
S
->
A0
 * 
ö
) +

4719 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4722 
S
->
°©e
[1] = S->state[0];

4723 
S
->
°©e
[0] = 
ö
;

4724 
S
->
°©e
[2] = 
out
;

4727  (
out
);

4746 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4747 
¨m_pid_ö°™˚_q31
 * 
S
,

4748 
q31_t
 
ö
)

4750 
q63_t
 
acc
;

4751 
q31_t
 
out
;

4754 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4757 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4760 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4763 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4766 
out
 +
S
->
°©e
[2];

4769 
S
->
°©e
[1] = S->state[0];

4770 
S
->
°©e
[0] = 
ö
;

4771 
S
->
°©e
[2] = 
out
;

4774  (
out
);

4794 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4795 
¨m_pid_ö°™˚_q15
 * 
S
,

4796 
q15_t
 
ö
)

4798 
q63_t
 
acc
;

4799 
q15_t
 
out
;

4803 #ifde‡
ARM_MATH_CM0


4806 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4811 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4815 #ifde‡
ARM_MATH_CM0


4818 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4819 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4824 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4829 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4832 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4835 
S
->
°©e
[1] = S->state[0];

4836 
S
->
°©e
[0] = 
ö
;

4837 
S
->
°©e
[2] = 
out
;

4840  (
out
);

4857 
¨m_°©us
 
¨m_m©_övî£_f32
(

4858 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4859 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4905 
__INLINE
 
¨m_˛¨ke_f32
(

4906 
Êﬂt32_t
 
Ia
,

4907 
Êﬂt32_t
 
Ib
,

4908 
Êﬂt32_t
 * 
pIÆpha
,

4909 
Êﬂt32_t
 * 
pIbëa
)

4912 *
pIÆpha
 = 
Ia
;

4915 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4934 
__INLINE
 
¨m_˛¨ke_q31
(

4935 
q31_t
 
Ia
,

4936 
q31_t
 
Ib
,

4937 
q31_t
 * 
pIÆpha
,

4938 
q31_t
 * 
pIbëa
)

4940 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4943 *
pIÆpha
 = 
Ia
;

4946 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4949 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4952 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4966 
¨m_q7_to_q31
(

4967 
q7_t
 * 
pSrc
,

4968 
q31_t
 * 
pD°
,

4969 
uöt32_t
 
blockSize
);

5009 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5010 
Êﬂt32_t
 
IÆpha
,

5011 
Êﬂt32_t
 
Ibëa
,

5012 
Êﬂt32_t
 * 
pIa
,

5013 
Êﬂt32_t
 * 
pIb
)

5016 *
pIa
 = 
IÆpha
;

5019 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5038 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5039 
q31_t
 
IÆpha
,

5040 
q31_t
 
Ibëa
,

5041 
q31_t
 * 
pIa
,

5042 
q31_t
 * 
pIb
)

5044 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5047 *
pIa
 = 
IÆpha
;

5050 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5053 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5056 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5071 
¨m_q7_to_q15
(

5072 
q7_t
 * 
pSrc
,

5073 
q15_t
 * 
pD°
,

5074 
uöt32_t
 
blockSize
);

5125 
__INLINE
 
¨m_∑rk_f32
(

5126 
Êﬂt32_t
 
IÆpha
,

5127 
Êﬂt32_t
 
Ibëa
,

5128 
Êﬂt32_t
 * 
pId
,

5129 
Êﬂt32_t
 * 
pIq
,

5130 
Êﬂt32_t
 
söVÆ
,

5131 
Êﬂt32_t
 
cosVÆ
)

5134 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5137 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5159 
__INLINE
 
¨m_∑rk_q31
(

5160 
q31_t
 
IÆpha
,

5161 
q31_t
 
Ibëa
,

5162 
q31_t
 * 
pId
,

5163 
q31_t
 * 
pIq
,

5164 
q31_t
 
söVÆ
,

5165 
q31_t
 
cosVÆ
)

5167 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5168 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5171 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5174 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5178 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5181 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5184 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5187 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5201 
¨m_q7_to_Êﬂt
(

5202 
q7_t
 * 
pSrc
,

5203 
Êﬂt32_t
 * 
pD°
,

5204 
uöt32_t
 
blockSize
);

5244 
__INLINE
 
¨m_öv_∑rk_f32
(

5245 
Êﬂt32_t
 
Id
,

5246 
Êﬂt32_t
 
Iq
,

5247 
Êﬂt32_t
 * 
pIÆpha
,

5248 
Êﬂt32_t
 * 
pIbëa
,

5249 
Êﬂt32_t
 
söVÆ
,

5250 
Êﬂt32_t
 
cosVÆ
)

5253 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5256 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5279 
__INLINE
 
¨m_öv_∑rk_q31
(

5280 
q31_t
 
Id
,

5281 
q31_t
 
Iq
,

5282 
q31_t
 * 
pIÆpha
,

5283 
q31_t
 * 
pIbëa
,

5284 
q31_t
 
söVÆ
,

5285 
q31_t
 
cosVÆ
)

5287 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5288 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5291 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5294 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5298 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5301 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5304 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5307 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5323 
¨m_q31_to_Êﬂt
(

5324 
q31_t
 * 
pSrc
,

5325 
Êﬂt32_t
 * 
pD°
,

5326 
uöt32_t
 
blockSize
);

5377 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5378 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5379 
Êﬂt32_t
 
x
)

5382 
Êﬂt32_t
 
y
;

5383 
Êﬂt32_t
 
x0
, 
x1
;

5384 
Êﬂt32_t
 
y0
, 
y1
;

5385 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5386 
öt32_t
 
i
;

5387 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5390 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5392 if(
i
 < 0)

5395 
y
 = 
pYD©a
[0];

5397 if(
i
 >
S
->
nVÆues
)

5400 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5405 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5406 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5409 
y0
 = 
pYD©a
[
i
];

5410 
y1
 = 
pYD©a
[
i
 + 1];

5413 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5418  (
y
);

5436 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5437 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5439 
q31_t
 
y
;

5440 
q31_t
 
y0
, 
y1
;

5441 
q31_t
 
‰a˘
;

5442 
öt32_t
 
ödex
;

5447 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5449 if(
ödex
 >(
nVÆues
 - 1))

5451 (
pYD©a
[
nVÆues
 - 1]);

5453 if(
ödex
 < 0)

5455 (
pYD©a
[0]);

5462 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5465 
y0
 = 
pYD©a
[
ödex
];

5466 
y1
 = 
pYD©a
[
ödex
 + 1u];

5469 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5472 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5475  (
y
 << 1u);

5496 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5498 
q63_t
 
y
;

5499 
q15_t
 
y0
, 
y1
;

5500 
q31_t
 
‰a˘
;

5501 
öt32_t
 
ödex
;

5506 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5508 if(
ödex
 >(
nVÆues
 - 1))

5510 (
pYD©a
[
nVÆues
 - 1]);

5512 if(
ödex
 < 0)

5514 (
pYD©a
[0]);

5520 
‰a˘
 = (
x
 & 0x000FFFFF);

5523 
y0
 = 
pYD©a
[
ödex
];

5524 
y1
 = 
pYD©a
[
ödex
 + 1u];

5527 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5530 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5533  (
y
 >> 20);

5553 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5555 
q31_t
 
y
;

5556 
q7_t
 
y0
, 
y1
;

5557 
q31_t
 
‰a˘
;

5558 
öt32_t
 
ödex
;

5563 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5566 if(
ödex
 >(
nVÆues
 - 1))

5568 (
pYD©a
[
nVÆues
 - 1]);

5570 if(
ödex
 < 0)

5572 (
pYD©a
[0]);

5579 
‰a˘
 = (
x
 & 0x000FFFFF);

5582 
y0
 = 
pYD©a
[
ödex
];

5583 
y1
 = 
pYD©a
[
ödex
 + 1u];

5586 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5589 
y
 +(
y1
 * 
‰a˘
);

5592  (
y
 >> 20u);

5607 
Êﬂt32_t
 
¨m_sö_f32
(

5608 
Êﬂt32_t
 
x
);

5616 
q31_t
 
¨m_sö_q31
(

5617 
q31_t
 
x
);

5625 
q15_t
 
¨m_sö_q15
(

5626 
q15_t
 
x
);

5634 
Êﬂt32_t
 
¨m_cos_f32
(

5635 
Êﬂt32_t
 
x
);

5643 
q31_t
 
¨m_cos_q31
(

5644 
q31_t
 
x
);

5652 
q15_t
 
¨m_cos_q15
(

5653 
q15_t
 
x
);

5695 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5696 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5698 if(
ö
 > 0)

5702 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5703 *
pOut
 = 
__sqπf
(
ö
);

5705 *
pOut
 = 
sqπf
(
ö
);

5708  (
ARM_MATH_SUCCESS
);

5712 *
pOut
 = 0.0f;

5713  (
ARM_MATH_ARGUMENT_ERROR
);

5726 
¨m_°©us
 
¨m_sqπ_q31
(

5727 
q31_t
 
ö
, q31_à*
pOut
);

5736 
¨m_°©us
 
¨m_sqπ_q15
(

5737 
q15_t
 
ö
, q15_à*
pOut
);

5752 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5753 
öt32_t
 * 
cúcBuf„r
,

5754 
öt32_t
 
L
,

5755 
uöt16_t
 * 
wrôeOff£t
,

5756 
öt32_t
 
buf„rInc
,

5757 c⁄° 
öt32_t
 * 
§c
,

5758 
öt32_t
 
§cInc
,

5759 
uöt32_t
 
blockSize
)

5761 
uöt32_t
 
i
 = 0u;

5762 
öt32_t
 
wOff£t
;

5766 
wOff£t
 = *
wrôeOff£t
;

5769 
i
 = 
blockSize
;

5771 
i
 > 0u)

5774 
cúcBuf„r
[
wOff£t
] = *
§c
;

5777 
§c
 +
§cInc
;

5780 
wOff£t
 +
buf„rInc
;

5781 if(
wOff£t
 >
L
)

5782 
wOff£t
 -
L
;

5785 
i
--;

5789 *
wrôeOff£t
 = 
wOff£t
;

5797 
__INLINE
 
¨m_cúcuœrRód_f32
(

5798 
öt32_t
 * 
cúcBuf„r
,

5799 
öt32_t
 
L
,

5800 
öt32_t
 * 
ªadOff£t
,

5801 
öt32_t
 
buf„rInc
,

5802 
öt32_t
 * 
d°
,

5803 
öt32_t
 * 
d°_ba£
,

5804 
öt32_t
 
d°_Àngth
,

5805 
öt32_t
 
d°Inc
,

5806 
uöt32_t
 
blockSize
)

5808 
uöt32_t
 
i
 = 0u;

5809 
öt32_t
 
rOff£t
, 
d°_íd
;

5813 
rOff£t
 = *
ªadOff£t
;

5814 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5817 
i
 = 
blockSize
;

5819 
i
 > 0u)

5822 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5825 
d°
 +
d°Inc
;

5827 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5829 
d°
 = 
d°_ba£
;

5833 
rOff£t
 +
buf„rInc
;

5835 if(
rOff£t
 >
L
)

5837 
rOff£t
 -
L
;

5841 
i
--;

5845 *
ªadOff£t
 = 
rOff£t
;

5852 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5853 
q15_t
 * 
cúcBuf„r
,

5854 
öt32_t
 
L
,

5855 
uöt16_t
 * 
wrôeOff£t
,

5856 
öt32_t
 
buf„rInc
,

5857 c⁄° 
q15_t
 * 
§c
,

5858 
öt32_t
 
§cInc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
wOff£t
;

5866 
wOff£t
 = *
wrôeOff£t
;

5869 
i
 = 
blockSize
;

5871 
i
 > 0u)

5874 
cúcBuf„r
[
wOff£t
] = *
§c
;

5877 
§c
 +
§cInc
;

5880 
wOff£t
 +
buf„rInc
;

5881 if(
wOff£t
 >
L
)

5882 
wOff£t
 -
L
;

5885 
i
--;

5889 *
wrôeOff£t
 = 
wOff£t
;

5897 
__INLINE
 
¨m_cúcuœrRód_q15
(

5898 
q15_t
 * 
cúcBuf„r
,

5899 
öt32_t
 
L
,

5900 
öt32_t
 * 
ªadOff£t
,

5901 
öt32_t
 
buf„rInc
,

5902 
q15_t
 * 
d°
,

5903 
q15_t
 * 
d°_ba£
,

5904 
öt32_t
 
d°_Àngth
,

5905 
öt32_t
 
d°Inc
,

5906 
uöt32_t
 
blockSize
)

5908 
uöt32_t
 
i
 = 0;

5909 
öt32_t
 
rOff£t
, 
d°_íd
;

5913 
rOff£t
 = *
ªadOff£t
;

5915 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5918 
i
 = 
blockSize
;

5920 
i
 > 0u)

5923 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5926 
d°
 +
d°Inc
;

5928 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5930 
d°
 = 
d°_ba£
;

5934 
rOff£t
 +
buf„rInc
;

5936 if(
rOff£t
 >
L
)

5938 
rOff£t
 -
L
;

5942 
i
--;

5946 *
ªadOff£t
 = 
rOff£t
;

5954 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

5955 
q7_t
 * 
cúcBuf„r
,

5956 
öt32_t
 
L
,

5957 
uöt16_t
 * 
wrôeOff£t
,

5958 
öt32_t
 
buf„rInc
,

5959 c⁄° 
q7_t
 * 
§c
,

5960 
öt32_t
 
§cInc
,

5961 
uöt32_t
 
blockSize
)

5963 
uöt32_t
 
i
 = 0u;

5964 
öt32_t
 
wOff£t
;

5968 
wOff£t
 = *
wrôeOff£t
;

5971 
i
 = 
blockSize
;

5973 
i
 > 0u)

5976 
cúcBuf„r
[
wOff£t
] = *
§c
;

5979 
§c
 +
§cInc
;

5982 
wOff£t
 +
buf„rInc
;

5983 if(
wOff£t
 >
L
)

5984 
wOff£t
 -
L
;

5987 
i
--;

5991 *
wrôeOff£t
 = 
wOff£t
;

5999 
__INLINE
 
¨m_cúcuœrRód_q7
(

6000 
q7_t
 * 
cúcBuf„r
,

6001 
öt32_t
 
L
,

6002 
öt32_t
 * 
ªadOff£t
,

6003 
öt32_t
 
buf„rInc
,

6004 
q7_t
 * 
d°
,

6005 
q7_t
 * 
d°_ba£
,

6006 
öt32_t
 
d°_Àngth
,

6007 
öt32_t
 
d°Inc
,

6008 
uöt32_t
 
blockSize
)

6010 
uöt32_t
 
i
 = 0;

6011 
öt32_t
 
rOff£t
, 
d°_íd
;

6015 
rOff£t
 = *
ªadOff£t
;

6017 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6020 
i
 = 
blockSize
;

6022 
i
 > 0u)

6025 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6028 
d°
 +
d°Inc
;

6030 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6032 
d°
 = 
d°_ba£
;

6036 
rOff£t
 +
buf„rInc
;

6038 if(
rOff£t
 >
L
)

6040 
rOff£t
 -
L
;

6044 
i
--;

6048 *
ªadOff£t
 = 
rOff£t
;

6060 
¨m_powî_q31
(

6061 
q31_t
 * 
pSrc
,

6062 
uöt32_t
 
blockSize
,

6063 
q63_t
 * 
pResu…
);

6073 
¨m_powî_f32
(

6074 
Êﬂt32_t
 * 
pSrc
,

6075 
uöt32_t
 
blockSize
,

6076 
Êﬂt32_t
 * 
pResu…
);

6086 
¨m_powî_q15
(

6087 
q15_t
 * 
pSrc
,

6088 
uöt32_t
 
blockSize
,

6089 
q63_t
 * 
pResu…
);

6099 
¨m_powî_q7
(

6100 
q7_t
 * 
pSrc
,

6101 
uöt32_t
 
blockSize
,

6102 
q31_t
 * 
pResu…
);

6112 
¨m_món_q7
(

6113 
q7_t
 * 
pSrc
,

6114 
uöt32_t
 
blockSize
,

6115 
q7_t
 * 
pResu…
);

6124 
¨m_món_q15
(

6125 
q15_t
 * 
pSrc
,

6126 
uöt32_t
 
blockSize
,

6127 
q15_t
 * 
pResu…
);

6136 
¨m_món_q31
(

6137 
q31_t
 * 
pSrc
,

6138 
uöt32_t
 
blockSize
,

6139 
q31_t
 * 
pResu…
);

6148 
¨m_món_f32
(

6149 
Êﬂt32_t
 * 
pSrc
,

6150 
uöt32_t
 
blockSize
,

6151 
Êﬂt32_t
 * 
pResu…
);

6161 
¨m_v¨_f32
(

6162 
Êﬂt32_t
 * 
pSrc
,

6163 
uöt32_t
 
blockSize
,

6164 
Êﬂt32_t
 * 
pResu…
);

6174 
¨m_v¨_q31
(

6175 
q31_t
 * 
pSrc
,

6176 
uöt32_t
 
blockSize
,

6177 
q63_t
 * 
pResu…
);

6187 
¨m_v¨_q15
(

6188 
q15_t
 * 
pSrc
,

6189 
uöt32_t
 
blockSize
,

6190 
q31_t
 * 
pResu…
);

6200 
¨m_rms_f32
(

6201 
Êﬂt32_t
 * 
pSrc
,

6202 
uöt32_t
 
blockSize
,

6203 
Êﬂt32_t
 * 
pResu…
);

6213 
¨m_rms_q31
(

6214 
q31_t
 * 
pSrc
,

6215 
uöt32_t
 
blockSize
,

6216 
q31_t
 * 
pResu…
);

6226 
¨m_rms_q15
(

6227 
q15_t
 * 
pSrc
,

6228 
uöt32_t
 
blockSize
,

6229 
q15_t
 * 
pResu…
);

6239 
¨m_°d_f32
(

6240 
Êﬂt32_t
 * 
pSrc
,

6241 
uöt32_t
 
blockSize
,

6242 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_°d_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6265 
¨m_°d_q15
(

6266 
q15_t
 * 
pSrc
,

6267 
uöt32_t
 
blockSize
,

6268 
q15_t
 * 
pResu…
);

6278 
¨m_cm∂x_mag_f32
(

6279 
Êﬂt32_t
 * 
pSrc
,

6280 
Êﬂt32_t
 * 
pD°
,

6281 
uöt32_t
 
numSam∂es
);

6291 
¨m_cm∂x_mag_q31
(

6292 
q31_t
 * 
pSrc
,

6293 
q31_t
 * 
pD°
,

6294 
uöt32_t
 
numSam∂es
);

6304 
¨m_cm∂x_mag_q15
(

6305 
q15_t
 * 
pSrc
,

6306 
q15_t
 * 
pD°
,

6307 
uöt32_t
 
numSam∂es
);

6319 
¨m_cm∂x_dŸ_¥od_q15
(

6320 
q15_t
 * 
pSrcA
,

6321 
q15_t
 * 
pSrcB
,

6322 
uöt32_t
 
numSam∂es
,

6323 
q31_t
 * 
ªÆResu…
,

6324 
q31_t
 * 
imagResu…
);

6336 
¨m_cm∂x_dŸ_¥od_q31
(

6337 
q31_t
 * 
pSrcA
,

6338 
q31_t
 * 
pSrcB
,

6339 
uöt32_t
 
numSam∂es
,

6340 
q63_t
 * 
ªÆResu…
,

6341 
q63_t
 * 
imagResu…
);

6353 
¨m_cm∂x_dŸ_¥od_f32
(

6354 
Êﬂt32_t
 * 
pSrcA
,

6355 
Êﬂt32_t
 * 
pSrcB
,

6356 
uöt32_t
 
numSam∂es
,

6357 
Êﬂt32_t
 * 
ªÆResu…
,

6358 
Êﬂt32_t
 * 
imagResu…
);

6369 
¨m_cm∂x_mu…_ªÆ_q15
(

6370 
q15_t
 * 
pSrcCm∂x
,

6371 
q15_t
 * 
pSrcRól
,

6372 
q15_t
 * 
pCm∂xD°
,

6373 
uöt32_t
 
numSam∂es
);

6384 
¨m_cm∂x_mu…_ªÆ_q31
(

6385 
q31_t
 * 
pSrcCm∂x
,

6386 
q31_t
 * 
pSrcRól
,

6387 
q31_t
 * 
pCm∂xD°
,

6388 
uöt32_t
 
numSam∂es
);

6399 
¨m_cm∂x_mu…_ªÆ_f32
(

6400 
Êﬂt32_t
 * 
pSrcCm∂x
,

6401 
Êﬂt32_t
 * 
pSrcRól
,

6402 
Êﬂt32_t
 * 
pCm∂xD°
,

6403 
uöt32_t
 
numSam∂es
);

6414 
¨m_mö_q7
(

6415 
q7_t
 * 
pSrc
,

6416 
uöt32_t
 
blockSize
,

6417 
q7_t
 * 
ªsu…
,

6418 
uöt32_t
 * 
ödex
);

6429 
¨m_mö_q15
(

6430 
q15_t
 * 
pSrc
,

6431 
uöt32_t
 
blockSize
,

6432 
q15_t
 * 
pResu…
,

6433 
uöt32_t
 * 
pIndex
);

6443 
¨m_mö_q31
(

6444 
q31_t
 * 
pSrc
,

6445 
uöt32_t
 
blockSize
,

6446 
q31_t
 * 
pResu…
,

6447 
uöt32_t
 * 
pIndex
);

6458 
¨m_mö_f32
(

6459 
Êﬂt32_t
 * 
pSrc
,

6460 
uöt32_t
 
blockSize
,

6461 
Êﬂt32_t
 * 
pResu…
,

6462 
uöt32_t
 * 
pIndex
);

6473 
¨m_max_q7
(

6474 
q7_t
 * 
pSrc
,

6475 
uöt32_t
 
blockSize
,

6476 
q7_t
 * 
pResu…
,

6477 
uöt32_t
 * 
pIndex
);

6488 
¨m_max_q15
(

6489 
q15_t
 * 
pSrc
,

6490 
uöt32_t
 
blockSize
,

6491 
q15_t
 * 
pResu…
,

6492 
uöt32_t
 * 
pIndex
);

6503 
¨m_max_q31
(

6504 
q31_t
 * 
pSrc
,

6505 
uöt32_t
 
blockSize
,

6506 
q31_t
 * 
pResu…
,

6507 
uöt32_t
 * 
pIndex
);

6518 
¨m_max_f32
(

6519 
Êﬂt32_t
 * 
pSrc
,

6520 
uöt32_t
 
blockSize
,

6521 
Êﬂt32_t
 * 
pResu…
,

6522 
uöt32_t
 * 
pIndex
);

6533 
¨m_cm∂x_mu…_cm∂x_q15
(

6534 
q15_t
 * 
pSrcA
,

6535 
q15_t
 * 
pSrcB
,

6536 
q15_t
 * 
pD°
,

6537 
uöt32_t
 
numSam∂es
);

6548 
¨m_cm∂x_mu…_cm∂x_q31
(

6549 
q31_t
 * 
pSrcA
,

6550 
q31_t
 * 
pSrcB
,

6551 
q31_t
 * 
pD°
,

6552 
uöt32_t
 
numSam∂es
);

6563 
¨m_cm∂x_mu…_cm∂x_f32
(

6564 
Êﬂt32_t
 * 
pSrcA
,

6565 
Êﬂt32_t
 * 
pSrcB
,

6566 
Êﬂt32_t
 * 
pD°
,

6567 
uöt32_t
 
numSam∂es
);

6576 
¨m_Êﬂt_to_q31
(

6577 
Êﬂt32_t
 * 
pSrc
,

6578 
q31_t
 * 
pD°
,

6579 
uöt32_t
 
blockSize
);

6588 
¨m_Êﬂt_to_q15
(

6589 
Êﬂt32_t
 * 
pSrc
,

6590 
q15_t
 * 
pD°
,

6591 
uöt32_t
 
blockSize
);

6600 
¨m_Êﬂt_to_q7
(

6601 
Êﬂt32_t
 * 
pSrc
,

6602 
q7_t
 * 
pD°
,

6603 
uöt32_t
 
blockSize
);

6613 
¨m_q31_to_q15
(

6614 
q31_t
 * 
pSrc
,

6615 
q15_t
 * 
pD°
,

6616 
uöt32_t
 
blockSize
);

6625 
¨m_q31_to_q7
(

6626 
q31_t
 * 
pSrc
,

6627 
q7_t
 * 
pD°
,

6628 
uöt32_t
 
blockSize
);

6637 
¨m_q15_to_Êﬂt
(

6638 
q15_t
 * 
pSrc
,

6639 
Êﬂt32_t
 * 
pD°
,

6640 
uöt32_t
 
blockSize
);

6650 
¨m_q15_to_q31
(

6651 
q15_t
 * 
pSrc
,

6652 
q31_t
 * 
pD°
,

6653 
uöt32_t
 
blockSize
);

6663 
¨m_q15_to_q7
(

6664 
q15_t
 * 
pSrc
,

6665 
q7_t
 * 
pD°
,

6666 
uöt32_t
 
blockSize
);

6740 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6741 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6742 
Êﬂt32_t
 
X
,

6743 
Êﬂt32_t
 
Y
)

6745 
Êﬂt32_t
 
out
;

6746 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6747 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6748 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6749 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6750 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6752 
xIndex
 = (
öt32_t
Ë
X
;

6753 
yIndex
 = (
öt32_t
Ë
Y
;

6757 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6763 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6767 
f00
 = 
pD©a
[
ödex
];

6768 
f01
 = 
pD©a
[
ödex
 + 1];

6771 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6775 
f10
 = 
pD©a
[
ödex
];

6776 
f11
 = 
pD©a
[
ödex
 + 1];

6779 
b1
 = 
f00
;

6780 
b2
 = 
f01
 - 
f00
;

6781 
b3
 = 
f10
 - 
f00
;

6782 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6785 
xdiff
 = 
X
 - 
xIndex
;

6788 
ydiff
 = 
Y
 - 
yIndex
;

6791 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6794  (
out
);

6807 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6808 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6809 
q31_t
 
X
,

6810 
q31_t
 
Y
)

6812 
q31_t
 
out
;

6813 
q31_t
 
acc
 = 0;

6814 
q31_t
 
x‰a˘
, 
y‰a˘
;

6815 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6816 
öt32_t
 
rI
, 
cI
;

6817 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6818 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6824 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6829 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6833 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6840 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6843 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6844 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6848 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6851 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6852 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6855 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6856 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6859 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6860 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6863 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6864 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6867 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6868 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6871  (
acc
 << 2u);

6883 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6884 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6885 
q31_t
 
X
,

6886 
q31_t
 
Y
)

6888 
q63_t
 
acc
 = 0;

6889 
q31_t
 
out
;

6890 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6891 
q31_t
 
x‰a˘
, 
y‰a˘
;

6892 
öt32_t
 
rI
, 
cI
;

6893 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6894 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6899 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6904 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6908 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6915 
x‰a˘
 = (
X
 & 0x000FFFFF);

6918 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6919 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6924 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6927 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6928 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6934 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6935 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6938 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6939 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6951  (
acc
 >> 36);

6963 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6964 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6965 
q31_t
 
X
,

6966 
q31_t
 
Y
)

6968 
q63_t
 
acc
 = 0;

6969 
q31_t
 
out
;

6970 
q31_t
 
x‰a˘
, 
y‰a˘
;

6971 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6972 
öt32_t
 
rI
, 
cI
;

6973 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6974 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6979 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6984 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6988 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6995 
x‰a˘
 = (
X
 & 0x000FFFFF);

6998 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6999 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7004 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7007 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7008 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7011 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7012 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7015 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7016 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7019 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7020 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7023 
out
 = ((
y2
 * (
y‰a˘
)));

7024 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7027  (
acc
 >> 40);

7040 #ifdef 
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

76 
	#__CM4_CMSIS_VERSION_MAIN
 (0x02Ë

	)

77 
	#__CM4_CMSIS_VERSION_SUB
 (0x10Ë

	)

78 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM4_CMSIS_VERSION_SUB
Ë

	)

80 
	#__CORTEX_M
 (0x04Ë

	)

83 #i‡ 
deföed
 ( 
__CC_ARM
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
__ölöe


	)

87 #ñi‡
deföed
 ( 
__ICCARM__
 )

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
ölöe


	)

91 #ñi‡
deföed
 ( 
__GNUC__
 )

92 
	#__ASM
 
__asm


	)

93 
	#__INLINE
 
ölöe


	)

95 #ñi‡
deföed
 ( 
__TASKING__
 )

96 
	#__ASM
 
__asm


	)

97 
	#__INLINE
 
ölöe


	)

102 #i‡
deföed
 ( 
__CC_ARM
 )

103 #i‡
deföed
 
__TARGET_FPU_VFP


104 #i‡(
__FPU_PRESENT
 == 1)

105 
	#__FPU_USED
 1

	)

108 
	#__FPU_USED
 0

	)

111 
	#__FPU_USED
 0

	)

114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__TASKING__
 )

140 
	#__FPU_USED
 0

	)

143 
	~<°döt.h
>

144 
	~<c‹e_cmIn°r.h
>

145 
	~<c‹e_cmFunc.h
>

146 
	~<c‹e_cm4_simd.h
>

150 #i‚de‡
__CMSIS_GENERIC


152 #i‚de‡
__CORE_CM4_H_DEPENDANT


153 
	#__CORE_CM4_H_DEPENDANT


	)

156 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


157 #i‚de‡
__CM4_REV


158 
	#__CM4_REV
 0x0000

	)

162 #i‚de‡
__FPU_PRESENT


163 
	#__FPU_PRESENT
 0

	)

167 #i‚de‡
__MPU_PRESENT


168 
	#__MPU_PRESENT
 0

	)

172 #i‚de‡
__NVIC_PRIO_BITS


173 
	#__NVIC_PRIO_BITS
 4

	)

177 #i‚de‡
__Víd‹_SysTickC⁄fig


178 
	#__Víd‹_SysTickC⁄fig
 0

	)

184 #ifde‡
__˝lu•lus


185 
	#__I
 vﬁ©ûê

	)

187 
	#__I
 vﬁ©ûêc⁄°

	)

189 
	#__O
 vﬁ©ûê

	)

190 
	#__IO
 vﬁ©ûê

	)

222 #i‡(
__CORTEX_M
 != 0x04)

223 
uöt32_t
 
_ª£rved0
:27;

225 
uöt32_t
 
_ª£rved0
:16;

226 
uöt32_t
 
GE
:4;

227 
uöt32_t
 
_ª£rved1
:7;

229 
uöt32_t
 
Q
:1;

230 
uöt32_t
 
V
:1;

231 
uöt32_t
 
C
:1;

232 
uöt32_t
 
Z
:1;

233 
uöt32_t
 
N
:1;

234 } 
b
;

235 
uöt32_t
 
w
;

236 } 
	tAPSR_Ty≥
;

245 
uöt32_t
 
ISR
:9;

246 
uöt32_t
 
_ª£rved0
:23;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tIPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 #i‡(
__CORTEX_M
 != 0x04)

260 
uöt32_t
 
_ª£rved0
:15;

262 
uöt32_t
 
_ª£rved0
:7;

263 
uöt32_t
 
GE
:4;

264 
uöt32_t
 
_ª£rved1
:4;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
IT
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

284 
uöt32_t
 
nPRIV
:1;

285 
uöt32_t
 
SPSEL
:1;

286 
uöt32_t
 
FPCA
:1;

287 
uöt32_t
 
_ª£rved0
:29;

288 } 
b
;

289 
uöt32_t
 
w
;

290 } 
	tCONTROL_Ty≥
;

305 
__IO
 
uöt32_t
 
ISER
[8];

306 
uöt32_t
 
RESERVED0
[24];

307 
__IO
 
uöt32_t
 
ICER
[8];

308 
uöt32_t
 
RSERVED1
[24];

309 
__IO
 
uöt32_t
 
ISPR
[8];

310 
uöt32_t
 
RESERVED2
[24];

311 
__IO
 
uöt32_t
 
ICPR
[8];

312 
uöt32_t
 
RESERVED3
[24];

313 
__IO
 
uöt32_t
 
IABR
[8];

314 
uöt32_t
 
RESERVED4
[56];

315 
__IO
 
uöt8_t
 
IP
[240];

316 
uöt32_t
 
RESERVED5
[644];

317 
__O
 
uöt32_t
 
STIR
;

318 } 
	tNVIC_Ty≥
;

321 
	#NVIC_STIR_INTID_Pos
 0

	)

322 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

337 
__I
 
uöt32_t
 
CPUID
;

338 
__IO
 
uöt32_t
 
ICSR
;

339 
__IO
 
uöt32_t
 
VTOR
;

340 
__IO
 
uöt32_t
 
AIRCR
;

341 
__IO
 
uöt32_t
 
SCR
;

342 
__IO
 
uöt32_t
 
CCR
;

343 
__IO
 
uöt8_t
 
SHP
[12];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 
__IO
 
uöt32_t
 
CFSR
;

346 
__IO
 
uöt32_t
 
HFSR
;

347 
__IO
 
uöt32_t
 
DFSR
;

348 
__IO
 
uöt32_t
 
MMFAR
;

349 
__IO
 
uöt32_t
 
BFAR
;

350 
__IO
 
uöt32_t
 
AFSR
;

351 
__I
 
uöt32_t
 
PFR
[2];

352 
__I
 
uöt32_t
 
DFR
;

353 
__I
 
uöt32_t
 
ADR
;

354 
__I
 
uöt32_t
 
MMFR
[4];

355 
__I
 
uöt32_t
 
ISAR
[5];

356 
uöt32_t
 
RESERVED0
[5];

357 
__IO
 
uöt32_t
 
CPACR
;

358 } 
	tSCB_Ty≥
;

361 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

362 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

364 
	#SCB_CPUID_VARIANT_Pos
 20

	)

365 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

367 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

368 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

370 
	#SCB_CPUID_PARTNO_Pos
 4

	)

371 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

373 
	#SCB_CPUID_REVISION_Pos
 0

	)

374 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

377 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

378 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

381 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

384 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

386 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

387 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

389 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

390 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

392 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

393 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

395 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

396 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

398 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

399 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

401 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

402 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

404 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

405 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

412 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

413 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

418 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

419 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

421 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

422 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

424 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

427 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

430 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

431 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

434 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

435 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

437 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

438 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

440 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

441 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

444 
	#SCB_CCR_STKALIGN_Pos
 9

	)

445 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

447 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

448 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

450 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

451 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

453 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

454 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

457 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

459 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

460 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

463 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

464 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

466 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

469 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

472 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

475 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

478 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

481 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

484 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

485 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

487 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

488 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

490 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

491 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

494 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

497 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

506 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

507 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

509 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

510 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

512 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

513 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

516 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

517 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

519 
	#SCB_HFSR_FORCED_Pos
 30

	)

520 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

522 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

523 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

526 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

527 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

529 
	#SCB_DFSR_VCATCH_Pos
 3

	)

530 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

532 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

533 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

535 
	#SCB_DFSR_BKPT_Pos
 1

	)

536 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

538 
	#SCB_DFSR_HALTED_Pos
 0

	)

539 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

554 
uöt32_t
 
RESERVED0
[1];

555 
__I
 
uöt32_t
 
ICTR
;

556 
__IO
 
uöt32_t
 
ACTLR
;

557 } 
	tSCnSCB_Ty≥
;

560 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

561 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

564 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

565 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

567 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

568 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 } 
	tITM_Ty≥
;

657 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

658 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

661 
	#ITM_TCR_BUSY_Pos
 23

	)

662 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

664 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

665 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

667 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

668 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

670 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

671 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

673 
	#ITM_TCR_SWOENA_Pos
 4

	)

674 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

676 
	#ITM_TCR_TXENA_Pos
 3

	)

677 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

679 
	#ITM_TCR_SYNCENA_Pos
 2

	)

680 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

682 
	#ITM_TCR_TSENA_Pos
 1

	)

683 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

685 
	#ITM_TCR_ITMENA_Pos
 0

	)

686 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

691 #i‡(
__MPU_PRESENT
 == 1)

702 
__I
 
uöt32_t
 
TYPE
;

703 
__IO
 
uöt32_t
 
CTRL
;

704 
__IO
 
uöt32_t
 
RNR
;

705 
__IO
 
uöt32_t
 
RBAR
;

706 
__IO
 
uöt32_t
 
RASR
;

707 
__IO
 
uöt32_t
 
RBAR_A1
;

708 
__IO
 
uöt32_t
 
RASR_A1
;

709 
__IO
 
uöt32_t
 
RBAR_A2
;

710 
__IO
 
uöt32_t
 
RASR_A2
;

711 
__IO
 
uöt32_t
 
RBAR_A3
;

712 
__IO
 
uöt32_t
 
RASR_A3
;

713 } 
	tMPU_Ty≥
;

716 
	#MPU_TYPE_IREGION_Pos
 16

	)

717 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

719 
	#MPU_TYPE_DREGION_Pos
 8

	)

720 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

722 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

723 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

726 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

727 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

729 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

730 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

732 
	#MPU_CTRL_ENABLE_Pos
 0

	)

733 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

736 
	#MPU_RNR_REGION_Pos
 0

	)

737 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

740 
	#MPU_RBAR_ADDR_Pos
 5

	)

741 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

743 
	#MPU_RBAR_VALID_Pos
 4

	)

744 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

746 
	#MPU_RBAR_REGION_Pos
 0

	)

747 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

750 
	#MPU_RASR_ATTRS_Pos
 16

	)

751 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

753 
	#MPU_RASR_SRD_Pos
 8

	)

754 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

756 
	#MPU_RASR_SIZE_Pos
 1

	)

757 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

759 
	#MPU_RASR_ENABLE_Pos
 0

	)

760 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

766 #i‡(
__FPU_PRESENT
 == 1)

777 
uöt32_t
 
RESERVED0
[1];

778 
__IO
 
uöt32_t
 
FPCCR
;

779 
__IO
 
uöt32_t
 
FPCAR
;

780 
__IO
 
uöt32_t
 
FPDSCR
;

781 
__I
 
uöt32_t
 
MVFR0
;

782 
__I
 
uöt32_t
 
MVFR1
;

783 } 
	tFPU_Ty≥
;

786 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

787 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

789 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

790 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

792 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

793 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

795 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

796 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

798 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

799 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

801 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

802 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

804 
	#FPU_FPCCR_THREAD_Pos
 3

	)

805 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

807 
	#FPU_FPCCR_USER_Pos
 1

	)

808 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

810 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

811 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

814 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

815 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

818 
	#FPU_FPDSCR_AHP_Pos
 26

	)

819 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

821 
	#FPU_FPDSCR_DN_Pos
 25

	)

822 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

824 
	#FPU_FPDSCR_FZ_Pos
 24

	)

825 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

827 
	#FPU_FPDSCR_RMode_Pos
 22

	)

828 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

831 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

832 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

834 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

835 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

837 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

838 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

840 
	#FPU_MVFR0_Divide_Pos
 16

	)

841 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

843 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

844 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

846 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

847 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

849 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

850 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

852 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

853 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

856 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

857 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

859 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

860 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

862 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

863 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

865 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

866 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

882 
__IO
 
uöt32_t
 
DHCSR
;

883 
__O
 
uöt32_t
 
DCRSR
;

884 
__IO
 
uöt32_t
 
DCRDR
;

885 
__IO
 
uöt32_t
 
DEMCR
;

886 } 
	tC‹eDebug_Ty≥
;

889 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

890 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

892 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

893 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

895 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

896 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

898 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

899 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

901 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

902 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

904 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

905 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

907 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

908 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

910 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

911 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

913 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

914 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

916 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

917 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

919 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

920 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

922 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

923 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

926 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

927 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

929 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

930 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

933 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

934 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

936 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

937 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

939 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

940 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

942 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

943 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

945 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

946 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

948 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

949 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

951 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

952 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

954 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

955 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

957 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

958 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

960 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

961 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

963 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

964 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

966 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

967 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

969 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

970 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

980 
	#SCS_BASE
 (0xE000E000ULË

	)

981 
	#ITM_BASE
 (0xE0000000ULË

	)

982 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

983 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

984 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

985 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

987 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

988 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

989 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

990 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

991 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

992 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

994 #i‡(
__MPU_PRESENT
 == 1)

995 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

996 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

999 #i‡(
__FPU_PRESENT
 == 1)

1000 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1001 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1037 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1039 
uöt32_t
 
ªg_vÆue
;

1040 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1042 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1043 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1044 
ªg_vÆue
 = (reg_value |

1045 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1046 (
Pri‹ôyGroupTmp
 << 8));

1047 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1058 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1060  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1071 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1085 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1087 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1100 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1102 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1113 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1115 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1126 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1128 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1139 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1141 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1156 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1158 if(
IRQn
 < 0) {

1159 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1161 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1177 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1180 if(
IRQn
 < 0) {

1181 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1183 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1201 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1203 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1204 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1205 
uöt32_t
 
SubPri‹ôyBôs
;

1207 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1208 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1211 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1212 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1231 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1233 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1234 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1235 
uöt32_t
 
SubPri‹ôyBôs
;

1237 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1238 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1240 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1241 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1249 
__INLINE
 
NVIC_Sy°emRe£t
()

1251 
__DSB
();

1253 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1254 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1255 
SCB_AIRCR_SYSRESETREQ_Msk
);

1256 
__DSB
();

1270 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1281 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1283 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1285 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1286 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1287 
SysTick
->
VAL
 = 0;

1288 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1289 
SysTick_CTRL_TICKINT_Msk
 |

1290 
SysTick_CTRL_ENABLE_Msk
;

1306 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1307 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1319 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1321 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1322 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1323 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1325 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1326 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1328  (
	gch
);

1341 
__INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1342 
öt32_t
 
	gch
 = -1;

1344 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1345 
ch
 = 
ITM_RxBuf„r
;

1346 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1349  (
	gch
);

1361 
__INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1363 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1376 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

121 
	~<cmsis_ür.h
>

190 #ñi‡
deföed
 ( 
__GNUC__
 )

194 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

196 
uöt32_t
 
ªsu…
;

198 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

199 (
ªsu…
);

200 
	}
}

202 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

204 
uöt32_t
 
ªsu…
;

206 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

207 (
ªsu…
);

208 
	}
}

210 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

215 (
ªsu…
);

216 
	}
}

218 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

223 (
ªsu…
);

224 
	}
}

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

228 
uöt32_t
 
ªsu…
;

230 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

231 (
ªsu…
);

232 
	}
}

234 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

236 
uöt32_t
 
ªsu…
;

238 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

239 (
ªsu…
);

240 
	}
}

243 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

245 
uöt32_t
 
ªsu…
;

247 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

248 (
ªsu…
);

249 
	}
}

251 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

253 
uöt32_t
 
ªsu…
;

255 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

256 (
ªsu…
);

257 
	}
}

259 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

261 
uöt32_t
 
ªsu…
;

263 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

264 (
ªsu…
);

265 
	}
}

267 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

269 
uöt32_t
 
ªsu…
;

271 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

272 (
ªsu…
);

273 
	}
}

275 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

277 
uöt32_t
 
ªsu…
;

279 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

280 (
ªsu…
);

281 
	}
}

283 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

285 
uöt32_t
 
ªsu…
;

287 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

288 (
ªsu…
);

289 
	}
}

292 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

297 (
ªsu…
);

298 
	}
}

300 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

302 
uöt32_t
 
ªsu…
;

304 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

305 (
ªsu…
);

306 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

310 
uöt32_t
 
ªsu…
;

312 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

313 (
ªsu…
);

314 
	}
}

316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

321 (
ªsu…
);

322 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

329 (
ªsu…
);

330 
	}
}

332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

334 
uöt32_t
 
ªsu…
;

336 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

337 (
ªsu…
);

338 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

345 (
ªsu…
);

346 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

353 (
ªsu…
);

354 
	}
}

356 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

361 (
ªsu…
);

362 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

369 (
ªsu…
);

370 
	}
}

372 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

374 
uöt32_t
 
ªsu…
;

376 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

377 (
ªsu…
);

378 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

385 (
ªsu…
);

386 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

393 (
ªsu…
);

394 
	}
}

396 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

398 
uöt32_t
 
ªsu…
;

400 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

401 (
ªsu…
);

402 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

406 
uöt32_t
 
ªsu…
;

408 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

409 (
ªsu…
);

410 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

417 (
ªsu…
);

418 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

422 
uöt32_t
 
ªsu…
;

424 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

425 (
ªsu…
);

426 
	}
}

428 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

433 (
ªsu…
);

434 
	}
}

436 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

438 
uöt32_t
 
ªsu…
;

440 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

441 (
ªsu…
);

442 
	}
}

444 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

446 
uöt32_t
 
ªsu…
;

448 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

449 (
ªsu…
);

450 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

454 
uöt32_t
 
ªsu…
;

456 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

457 (
ªsu…
);

458 
	}
}

460 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

462 
uöt32_t
 
ªsu…
;

464 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

465 (
ªsu…
);

466 
	}
}

468 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

470 
uöt32_t
 
ªsu…
;

472 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

473 (
ªsu…
);

474 
	}
}

476 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

481 (
ªsu…
);

482 
	}
}

484 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

486 
uöt32_t
 
ªsu…
;

488 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

489 (
ªsu…
);

490 
	}
}

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

494 
uöt32_t
 
ªsu…
;

496 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

497 (
ªsu…
);

498 
	}
}

500 
	#__SSAT16
(
ARG1
,
ARG2
) \

502 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

503 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

504 
__RES
; \

505 })

	)

507 
	#__USAT16
(
ARG1
,
ARG2
) \

509 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

510 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

511 
__RES
; \

512 })

	)

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

516 
uöt32_t
 
ªsu…
;

518 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

519 (
ªsu…
);

520 
	}
}

522 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

524 
uöt32_t
 
ªsu…
;

526 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

527 (
ªsu…
);

528 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

532 
uöt32_t
 
ªsu…
;

534 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

535 (
ªsu…
);

536 
	}
}

538 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

540 
uöt32_t
 
ªsu…
;

542 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

543 (
ªsu…
);

544 
	}
}

546 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

548 
uöt32_t
 
ªsu…
;

550 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

551 (
ªsu…
);

552 
	}
}

554 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

556 
uöt32_t
 
ªsu…
;

558 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

559 (
ªsu…
);

560 
	}
}

562 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

564 
uöt32_t
 
ªsu…
;

566 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

567 (
ªsu…
);

568 
	}
}

570 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

572 
uöt32_t
 
ªsu…
;

574 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

575 (
ªsu…
);

576 
	}
}

578 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

580 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

581 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

582 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

583 })

	)

585 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

587 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

588 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

589 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

590 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

594 
uöt32_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

597 (
ªsu…
);

598 
	}
}

600 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

602 
uöt32_t
 
ªsu…
;

604 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

605 (
ªsu…
);

606 
	}
}

608 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

610 
uöt32_t
 
ªsu…
;

612 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

613 (
ªsu…
);

614 
	}
}

616 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

618 
uöt32_t
 
ªsu…
;

620 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

621 (
ªsu…
);

622 
	}
}

624 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

626 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

627 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

628 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

629 })

	)

631 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

633 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

634 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

635 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

636 })

	)

638 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

640 
uöt32_t
 
ªsu…
;

642 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

643 (
ªsu…
);

644 
	}
}

646 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

648 
uöt32_t
 
ªsu…
;

650 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

651 (
ªsu…
);

652 
	}
}

654 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

656 
uöt32_t
 
ªsu…
;

658 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

659 (
ªsu…
);

660 
	}
}

662 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

664 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

665 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

666 
__RES
; \

667 })

	)

669 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

671 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

672 i‡(
ARG3
 == 0) \

673 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

675 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

676 
__RES
; \

677 })

	)

683 #ñi‡
deföed
 ( 
__TASKING__
 )

699 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

300 #ñi‡
deföed
 ( 
__GNUC__
 )

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_úq
()

310 
__ASM
 volatile ("cpsie i");

311 
	}
}

319 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_úq
()

321 
__ASM
 volatile ("cpsid i");

322 
	}
}

331 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

333 
uöt32_t
 
ªsu…
;

335 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

336 (
ªsu…
);

337 
	}
}

346 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

348 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

349 
	}
}

358 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

360 
uöt32_t
 
ªsu…
;

362 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

363 (
ªsu…
);

364 
	}
}

373 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

405 
uöt32_t
 
ªsu…
;

407 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

408 (
ªsu…
);

409 
	}
}

418 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

420 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

421 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

432 
uöt32_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

435 (
ªsu…
);

436 
	}
}

445 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

447 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

448 
	}
}

457 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

459 
uöt32_t
 
ªsu…
;

461 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

462 (
ªsu…
);

463 
	}
}

472 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

474 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

475 
	}
}

478 #i‡ (
__CORTEX_M
 >= 0x03)

485 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_Áu…_úq
()

487 
__ASM
 volatile ("cpsie f");

488 
	}
}

496 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_Áu…_úq
()

498 
__ASM
 volatile ("cpsid f");

499 
	}
}

508 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

510 
uöt32_t
 
ªsu…
;

512 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

513 (
ªsu…
);

514 
	}
}

523 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

525 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

526 
	}
}

535 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

537 
uöt32_t
 
ªsu…
;

539 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

540 (
ªsu…
);

541 
	}
}

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

552 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

553 
	}
}

558 #i‡ (
__CORTEX_M
 == 0x04)

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

568 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

572 (
ªsu…
);

576 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

587 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

588 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

590 
	}
}

595 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡ (
__CORTEX_M
 >= 0x03)

144 
	#__RBIT
 
__rbô


	)

154 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

164 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

174 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

186 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

198 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

210 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

218 
	#__CLREX
 
__˛ªx


	)

229 
	#__SSAT
 
__sßt


	)

240 
	#__USAT
 
__ußt


	)

250 
	#__CLZ
 
__˛z


	)

256 #ñi‡
deföed
 ( 
__ICCARM__
 )

259 
	~<cmsis_ür.h
>

262 #ñi‡
deföed
 ( 
__GNUC__
 )

269 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__NOP
()

271 
__ASM
 volatile ("nop");

272 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFI
()

282 
__ASM
 volatile ("wfi");

283 
	}
}

291 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFE
()

293 
__ASM
 volatile ("wfe");

294 
	}
}

301 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__SEV
()

303 
__ASM
 volatile ("sev");

304 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__ISB
()

315 
__ASM
 volatile ("isb");

316 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DSB
()

326 
__ASM
 volatile ("dsb");

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DMB
()

337 
__ASM
 volatile ("dmb");

338 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

353 (
ªsu…
);

354 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

369 (
ªsu…
);

370 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

385 (
ªsu…
);

386 
	}
}

389 #i‡ (
__CORTEX_M
 >= 0x03)

398 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

400 
uöt32_t
 
ªsu…
;

402 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

403 (
ªsu…
);

404 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

416 
uöt8_t
 
ªsu…
;

418 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

419 (
ªsu…
);

420 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

432 
uöt16_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

435 (
ªsu…
);

436 
	}
}

446 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

451 (
ªsu…
);

452 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

469 (
ªsu…
);

470 
	}
}

482 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

487 (
ªsu…
);

488 
	}
}

500 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

502 
uöt32_t
 
ªsu…
;

504 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

505 (
ªsu…
);

506 
	}
}

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__CLREX
()

516 
__ASM
 volatile ("clrex");

517 
	}
}

528 
	#__SSAT
(
ARG1
,
ARG2
) \

530 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

531 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

532 
__RES
; \

533 })

	)

544 
	#__USAT
(
ARG1
,
ARG2
) \

546 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

547 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

548 
__RES
; \

549 })

	)

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

561 
uöt8_t
 
ªsu…
;

563 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

564 (
ªsu…
);

565 
	}
}

572 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\glo_rx_link.cpp

2 
	~"¸c.h
"

3 
	~"glo_rx_lök.h
"

4 
	~"globs.h
"

5 
	~"ãÀmëry_£nd_èsk.h
"

6 
	~"utû_as£π.h
"

9 
	gGloRxLök
::
	$GloRxLök
(
Ußπ
 * 
p‹t
, 
√w_mesßge_ˇŒback_t
 
√w_mesßge_ˇŒback
) :

10 
	`p‹t_
(
p‹t
),

11 
	`√w_mesßge_ˇŒback_
(
√w_mesßge_ˇŒback
),

12 
	`∑r£_°©e_
(-1),

13 
	`num_body_byãs_
(0),

14 
	`body_°¨t_idx_
(0),

15 
	`d©a_idx_
(0),

16 
	`num_mesßges_ª˚ived_
(0),

17 
	$œ°_rx_∑ckë_num_
(0)

19 
	`ª£tP¨£
();

20 
	}
}

23 
	gGloRxLök
::
	$∑r£
()

25 c⁄° 
uöt8_t
 
msg_°¨t_byã
 = 0xFE;

27 
uöt8_t
 
ö_byã
 = 0;

28 
boﬁ
 
com∂ëe_mesßge_ª˚ived
 = 
Ál£
;

30 i‡(
p‹t_
 =
NULL
)

32 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "Parse failed dueÅoÇullÖort.");

36 i‡(
p‹t_
->
	`gëByã
(&
ö_byã
))

38 
∑r£_°©e_
)

41 i‡(
ö_byã
 =
msg_°¨t_byã
)

43 
mesßge_d©a_
[
d©a_idx_
++] = 
ö_byã
;

44 
	`adv™˚P¨£
();

52 
mesßge_d©a_
[
d©a_idx_
++] = 
ö_byã
;

53 
	`adv™˚P¨£
();

56 
num_body_byãs_
 = 
ö_byã
;

57 
mesßge_d©a_
[
d©a_idx_
++] = 
ö_byã
;

58 
body_°¨t_idx_
 = 
d©a_idx_
;

59 
	`adv™˚P¨£
();

60 i‡(
num_body_byãs_
 == 0)

62 
	`adv™˚P¨£
();

66 
mesßge_d©a_
[
d©a_idx_
++] = 
ö_byã
;

67 i‡((
d©a_idx_
 - 
body_°¨t_idx_
Ë>
num_body_byãs_
)

69 
	`adv™˚P¨£
();

73 
ex≥˘ed_¸c1_
 = 
ö_byã
;

74 
	`adv™˚P¨£
();

77 
ex≥˘ed_¸c2_
 = 
ö_byã
;

78 
com∂ëe_mesßge_ª˚ived
 = 
åue
;

82 
	`ª£tP¨£
();

86 i‡(
com∂ëe_mesßge_ª˚ived
)

88 
com∂ëe_mesßge_ª˚ived
 = 
Ál£
;

90 
uöt8_t
 
¸c_ªlübÀ
 = 
mesßge_d©a_
[1];

92 i‡(!
¸c_ªlübÀ
 || 
	`vîifyCRC
())

94 
	`h™dÀRe˚ivedMesßge
();

97 
	`ª£tP¨£
();

100 
	}
}

103 
boﬁ
 
	gGloRxLök
::
	$vîifyCRC
()

105 
uöt16_t
 
ex≥˘ed_¸c
 = (uöt16_t)
ex≥˘ed_¸c1_
 + (uöt16_t)(
ex≥˘ed_¸c2_
 << 8);

107 
uöt16_t
 
a˘uÆ_¸c
 = 
	`ˇlcuœã_¸c
(
mesßge_d©a_
, 
d©a_idx_
, 0xFFFF);

109 
boﬁ
 
¸c_m©ches
 = (
a˘uÆ_¸c
 =
ex≥˘ed_¸c
);

111 
	`as£π_msg
(
¸c_m©ches
, 
ASSERT_CONTINUE
, "Bad CRC. Ex≥˘ed %xá˘uÆ %x", 
ex≥˘ed_¸c
, 
a˘uÆ_¸c
);

113  
¸c_m©ches
;

114 
	}
}

117 
	gGloRxLök
::
	$h™dÀRe˚ivedMesßge
()

119 
uöt8_t
 
∑ckë_num_ªlübÀ
 = 
mesßge_d©a_
[1];

120 
uöt8_t
 
obje˘_id
 = 
mesßge_d©a_
[2];

121 
uöt16_t
 
ö°™˚
 = 
mesßge_d©a_
[3] + (uint16_t)(message_data_[4] << 8);

122 
uöt8_t
 
∑ckë_num
 = 
mesßge_d©a_
[5];

123 * 
glob_d©a
 = 
mesßge_d©a_
 + 
body_°¨t_idx_
;

125 i‡(!
∑ckë_num_ªlübÀ
)

127 
∑ckë_num
 = 
œ°_rx_∑ckë_num_
 + 1;

130 i‡(
√w_mesßge_ˇŒback_
)

132 
	`√w_mesßge_ˇŒback_
(
obje˘_id
, 
ö°™˚
, 
glob_d©a
);

135 
num_mesßges_ª˚ived_
++;

147 
œ°_rx_∑ckë_num_
 = 
∑ckë_num
;

149 
	}
}

152 
	gGloRxLök
::
	$ª£tP¨£
()

154 
body_°¨t_idx_
 = 0;

155 
d©a_idx_
 = 0;

156 
∑r£_°©e_
 = -1;

157 
	}
}

160 
	gGloRxLök
::
	$adv™˚P¨£
()

162 
∑r£_°©e_
++;

163 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\glo_tx_link.cpp

2 
	~"¸c.h
"

3 
	~"glo_tx_lök.h
"

4 
	~"globs.h
"

5 
	~"utû_as£π.h
"

9 
	gGloTxLök
::
	$GloTxLök
(
Ußπ
 * 
p‹t
) :

10 
	`p‹t_
(
p‹t
),

11 
	`num_mesßges_£¡_
(0),

12 
	`num_mesßges_Áûed_
(0),

13 
	$√xt_∑ckë_num_
(0)

15 
	}
}

18 
uöt8_t
 
	gGloTxLök
::
	$£nd
(
uöt8_t
 
glob_id
, 
uöt16_t
 
glob_ö°™˚
, * 
d©a_buf„r
)

20 
	`as£π
(
p‹t_
 !
NULL
, 
ASSERT_STOP
);

22 i‡(
glob_id
 >
NUM_GLOBS
)

24 
num_mesßges_Áûed_
++;

25 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "C™'à£nd glob %d beˇu£ highe° glob ID i†%d", ()
glob_id
, ()
NUM_GLOBS
-1);

26  
SEND_ERROR_BAD_ID
;

29 
GlobBa£
 * 
glob
 = 
globs
[
glob_id
];

31 
uöt8_t
 
num_d©a_byãs
 = 
glob
->
	`gë_num_byãs
();

33 c⁄° 
uöt16_t
 
num_hódî_byãs
 = 7;

34 
£nd_buf„r_
[0] = 0xFE;

35 
£nd_buf„r_
[1] = 1;

36 
£nd_buf„r_
[2] = 
glob_id
;

37 
£nd_buf„r_
[3] = (
uöt8_t
)
glob_ö°™˚
;

38 
£nd_buf„r_
[4] = (
uöt8_t
)(
glob_ö°™˚
 >> 8);

39 
£nd_buf„r_
[5] = 
√xt_∑ckë_num_
;

40 
£nd_buf„r_
[6] = 
num_d©a_byãs
;

42 i‡(
d©a_buf„r
 =
NULL
)

44 
glob
->
	`c›y_to_buf„r
(
£nd_buf„r_
 + 
num_hódî_byãs
, 
glob_ö°™˚
);

48 
	`mem˝y
(
£nd_buf„r_
 + 
num_hódî_byãs
, 
d©a_buf„r
, 
num_d©a_byãs
);

51 
uöt16_t
 
foŸî_°¨t
 = 
num_d©a_byãs
 + 
num_hódî_byãs
;

53 
uöt16_t
 
¸c
 = 
	`ˇlcuœã_¸c
(
£nd_buf„r_
, 
foŸî_°¨t
, 0xFFFF);

55 c⁄° 
uöt16_t
 
num_foŸî_byãs
 = 2;

56 
£nd_buf„r_
[
foŸî_°¨t
] = (
uöt8_t
)
¸c
;

57 
£nd_buf„r_
[
foŸî_°¨t
+1] = (
uöt8_t
)(
¸c
 >> 8);

59 
uöt16_t
 
∑ckë_size
 = 
num_d©a_byãs
 + 
num_hódî_byãs
 + 
num_foŸî_byãs
;

61 i‡(!
p‹t_
->
	`£ndBuf„r
(
£nd_buf„r_
, 
∑ckë_size
))

63 
num_mesßges_Áûed_
++;

64  
SEND_ERROR_NO_ROOM
;

67 
num_mesßges_£¡_
++;

68 
√xt_∑ckë_num_
++;

70  
SEND_SUCCESS
;

71 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\include\glo_rx_link.h

1 #i‚de‡
GLO_RX_LINK_H_INCLUDED


2 
	#GLO_RX_LINK_H_INCLUDED


	)

4 
	~<c°döt
>

5 
	~"ußπ.h
"

7 (*
	t√w_mesßge_ˇŒback_t
)(
	tuöt8_t
, 
	tuöt16_t
, *);

11 ˛as†
	cGloRxLök


13 
public
:

16 
ex∂icô
 
	`GloRxLök
(
Ußπ
 * 
p‹t
, 
√w_mesßge_ˇŒback_t
 
√w_mesßge_ˇŒback
);

23 
	`∑r£
();

26 
boﬁ
 
	$d©aRódy
(Ëc⁄° {  !
p‹t_
->
	`em±y
(); }

28 
	$£tP‹t
(
Ußπ
 * 
√w_p‹t
Ë{ 
p‹t_
 =Çew_p‹t; 
	}
}

30 
	g¥iv©e
:

32 
h™dÀRe˚ivedMesßge
();

35 
boﬁ
 
vîifyCRC
();

37 
adv™˚P¨£
();

39 
ª£tP¨£
();

41 
	g¥iv©e
:

44 
Ußπ
 * 
p‹t_
;

47 
√w_mesßge_ˇŒback_t
 
	g√w_mesßge_ˇŒback_
;

50 
öt8_t
 
	g∑r£_°©e_
;

51 
uöt8_t
 
	gnum_body_byãs_
;

52 
uöt8_t
 
	gbody_°¨t_idx_
;

53 
uöt8_t
 
	gex≥˘ed_¸c1_
;

54 
uöt8_t
 
	gex≥˘ed_¸c2_
;

58 
uöt8_t
 
	gmesßge_d©a_
[300];

61 
uöt16_t
 
	gd©a_idx_
;

64 
uöt32_t
 
	gnum_mesßges_ª˚ived_
;

67 
uöt8_t
 
	gœ°_rx_∑ckë_num_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\include\glo_tx_link.h

1 #i‚de‡
GLO_TX_LINK_H_INCLUDED


2 
	#GLO_TX_LINK_H_INCLUDED


	)

5 
	~<c°döt
>

6 
	~<c°dio
>

7 
	~"ußπ.h
"

12 
	mSEND_SUCCESS
,

13 
	mSEND_ERROR_BAD_ID
,

14 
	mSEND_ERROR_NO_ROOM
,

18 ˛as†
	cGloTxLök


20 
	mpublic
:

23 
ex∂icô
 
GloTxLök
(
Ußπ
 * 
p‹t
);

29 
uöt8_t
 
£nd
(uöt8_à
id
, 
uöt16_t
 
ö°™˚
, * 
d©a_buf„r
=
NULL
);

31 
	$£t_p‹t
(
Ußπ
 * 
√w_p‹t
Ë{ 
p‹t_
 =Çew_port; }

33 
¥iv©e
:

36 
Ußπ
 * 
p‹t_
;

38 
uöt32_t
 
num_mesßges_£¡_
;

39 
uöt32_t
 
num_mesßges_Áûed_
;

42 
uöt8_t
 
√xt_∑ckë_num_
;

45 
uöt8_t
 
£nd_buf„r_
[300];

47 
	}
};

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\misc.h

30 #i‚de‡
__MISC_H


31 
	#__MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

66 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

71 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

74 } 
	tNVIC_InôTy≥Def
;

86 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

87 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

88 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

89 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

98 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

99 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

100 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

101 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

102 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

103 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

112 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

114 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

116 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

118 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

120 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

123 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

124 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

125 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

126 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

127 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

129 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

131 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

133 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

143 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

144 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

145 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

146 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

158 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

159 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

160 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

161 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

162 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

164 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_adc.h

30 #i‚de‡
__STM32F4xx_ADC_H


31 
	#__STM32F4xx_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
ADC_Resﬁuti⁄
;

57 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

61 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

68 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

72 
uöt32_t
 
ADC_D©aAlign
;

75 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

79 }
	tADC_InôTy≥Def
;

86 
uöt32_t
 
ADC_Mode
;

89 
uöt32_t
 
ADC_PªsˇÀr
;

92 
uöt32_t
 
ADC_DMAAc˚ssMode
;

96 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

100 }
	tADC_Comm⁄InôTy≥Def
;

108 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

109 ((
PERIPH
Ë=
ADC2
) || \

110 ((
PERIPH
Ë=
ADC3
))

	)

115 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

116 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

117 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

118 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

119 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

120 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

121 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

122 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

123 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

124 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

125 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

126 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

127 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

128 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

129 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

135 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

136 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

137 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

138 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

139 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

140 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

	)

149 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

150 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

151 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

152 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

153 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
) || \

154 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

155 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

156 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

	)

165 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

167 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

168 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

169 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
) || \

170 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

171 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

172 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

	)

182 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

183 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

184 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

185 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

186 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

187 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

188 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

189 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

190 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

191 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

192 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

193 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

194 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

195 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

196 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

197 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

198 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
) || \

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

208 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

209 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

210 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

211 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

212 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

213 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

	)

223 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

224 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

225 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

226 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

227 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
) || \

228 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

229 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

230 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

	)

240 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

241 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

242 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

243 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

244 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
) || \

245 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

246 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

247 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

	)

256 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

266 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

267 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

268 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

269 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

270 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

271 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

272 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

282 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

283 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

284 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

285 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

286 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

287 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

	)

296 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

297 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

298 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

299 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

308 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

309 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

310 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

311 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

312 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

313 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

314 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

315 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

316 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

317 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

318 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

319 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

320 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

321 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

322 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

323 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

324 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

325 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

326 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

328 #i‡
deföed
 (
STM32F40_41xxx
)

329 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

332 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

333 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

336 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

337 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

339 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
) || \

340 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

345 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

346 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

347 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

348 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

349 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

350 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

351 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

352 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

353 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

354 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

355 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

356 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

357 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

	)

366 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

367 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

368 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

369 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

370 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

371 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

372 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

373 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

374 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
) || \

375 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

376 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

377 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

378 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

379 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

380 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

381 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

	)

390 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

391 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

392 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

393 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

394 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
) || \

395 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

396 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

397 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

	)

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

410 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

411 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

412 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

413 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

414 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

415 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

416 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

417 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

418 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

419 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

420 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

421 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

422 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

423 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

426 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

427 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

428 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

429 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

430 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

431 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

432 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

433 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

434 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

435 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

436 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

437 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

438 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

	)

447 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

448 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

449 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

450 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

451 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

452 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

453 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

454 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

463 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

464 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

465 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

466 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

467 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

468 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

469 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

470 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

471 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

472 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

473 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

474 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

475 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

476 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

485 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

486 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

487 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

488 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

489 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

490 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

	)

499 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

500 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

501 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

502 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

503 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

504 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

506 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

507 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
) || \

508 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

509 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

510 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

511 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

512 ((
FLAG
)=
ADC_FLAG_OVR
))

	)

521 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

530 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

539 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

548 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

557 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

566 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

575 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

589 
ADC_DeInô
();

592 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

593 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

594 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

595 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

596 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

600 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

601 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

604 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

609 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

610 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

611 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

612 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

613 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

614 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

615 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

616 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

619 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

621 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

625 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

626 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

627 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

628 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

629 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

630 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

631 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

632 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

633 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

636 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

637 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

638 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

639 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

640 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

642 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_dma.h

30 #i‚de‡
__STM32F4xx_DMA_H


31 
	#__STM32F4xx_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA_Ch™√l
;

59 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

61 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

65 
uöt32_t
 
DMA_DIR
;

69 
uöt32_t
 
DMA_Buf„rSize
;

73 
uöt32_t
 
DMA_PîùhîÆInc
;

76 
uöt32_t
 
DMA_Mem‹yInc
;

79 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

82 
uöt32_t
 
DMA_Mem‹yD©aSize
;

85 
uöt32_t
 
DMA_Mode
;

90 
uöt32_t
 
DMA_Pri‹ôy
;

93 
uöt32_t
 
DMA_FIFOMode
;

98 
uöt32_t
 
DMA_FIFOThªshﬁd
;

101 
uöt32_t
 
DMA_Mem‹yBur°
;

106 
uöt32_t
 
DMA_PîùhîÆBur°
;

110 }
	tDMA_InôTy≥Def
;

118 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
) || \

119 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

120 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

121 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

122 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

123 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

124 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

125 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

128 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

129 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

130 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

131 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

132 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

133 ((
PERIPH
Ë=
DMA2_Såóm7
))

	)

135 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
) || \

136 ((
CONTROLLER
Ë=
DMA2
))

	)

141 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

142 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

143 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

144 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

145 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

146 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

147 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

148 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

150 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
) || \

151 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

152 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

153 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

154 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

155 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

156 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

157 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

	)

166 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

167 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

168 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

170 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

171 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

172 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

	)

181 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

190 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

191 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

194 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

203 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

204 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

206 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

207 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

216 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

217 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

218 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

220 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

221 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

222 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

231 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

232 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

235 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

236 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

237 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

	)

246 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

247 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

249 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

250 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

	)

259 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

260 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

261 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

262 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

264 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

265 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

266 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

267 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

	)

276 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

277 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

279 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

280 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

	)

289 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

290 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

294 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

295 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

296 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

297 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

	)

306 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

307 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

308 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

309 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

311 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
) || \

312 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

313 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

314 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

	)

323 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

324 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

328 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
) || \

329 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

330 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

331 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

	)

340 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

341 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

342 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

343 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

344 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

345 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

347 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

348 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

349 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

350 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

351 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

352 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

	)

360 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

361 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

362 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

363 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

364 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

365 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

366 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

367 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

368 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

369 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

370 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

371 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

372 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

373 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

374 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

375 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

376 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

377 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

378 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

379 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

380 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

381 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

382 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

383 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

384 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

385 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

386 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

387 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

388 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

389 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

390 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

391 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

392 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

393 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

394 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

395 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

396 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

397 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

398 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

399 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

401 
	#IS_DMA_CLEAR_FLAG
(
FLAG
) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) && \

402 (((
FLAG
Ë& 0xC002F082Ë=0x00Ë&& ((FLAGË!0x00))

	)

404 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
) || \

405 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

406 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

407 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

408 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

410 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

411 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

412 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

413 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

415 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

416 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

417 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

418 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

419 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

420 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

421 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

422 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

423 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

	)

432 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

433 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

434 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

435 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

436 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

438 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

447 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

448 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

449 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

450 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

451 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

452 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

453 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

454 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

455 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

456 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

457 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

458 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

459 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

460 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

461 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

462 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

463 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

464 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

465 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

466 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

467 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

468 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

469 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

470 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

471 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

472 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

473 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

474 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

475 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

476 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

477 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

478 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

479 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

480 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

481 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

482 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

483 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

484 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

485 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

486 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

488 
	#IS_DMA_CLEAR_IT
(
IT
) ((((IT) & 0x30000000) != 0x30000000) && \

489 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

490 (((
IT
Ë& 0x40820082Ë=0x00))

	)

492 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
) || \

493 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

494 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

495 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

496 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

497 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

498 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

499 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

500 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

501 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

502 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

503 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

504 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

505 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

506 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

507 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

508 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

509 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

510 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

511 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

	)

520 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

521 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

523 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
) || \

524 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

	)

533 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

534 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

536 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
) || \

537 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

	)

546 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

547 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

549 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

562 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

565 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

566 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

567 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

570 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

571 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

574 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

575 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

578 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

579 
uöt32_t
 
DMA_CuºítMem‹y
);

580 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

582 
uöt32_t
 
DMA_Mem‹yT¨gë
);

583 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

586 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

587 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

588 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

589 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

590 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

592 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

594 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_exti.h

30 #i‚de‡
__STM32F4xx_EXTI_H


31 
	#__STM32F4xx_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

105 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

106 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

107 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

108 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

109 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

110 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

111 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

112 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

113 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

114 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

115 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

116 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

117 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

118 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

119 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

120 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

121 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

122 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

123 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

124 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

126 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

127 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

131 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

132 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

133 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

134 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

135 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

136 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

137 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

138 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

139 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

140 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

141 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

142 ((
LINE
Ë=
EXTI_Löe22
))

	)

156 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

164 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

166 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

167 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

169 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_flash.h

30 #i‚de‡
__STM32F4xx_FLASH_H


31 
	#__STM32F4xx_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
FLASH_BUSY
 = 1,

55 
FLASH_ERROR_RD
,

56 
FLASH_ERROR_PGS
,

57 
FLASH_ERROR_PGP
,

58 
FLASH_ERROR_PGA
,

59 
FLASH_ERROR_WRP
,

60 
FLASH_ERROR_PROGRAM
,

61 
FLASH_ERROR_OPERATION
,

62 
FLASH_COMPLETE


63 }
	tFLASH_Sètus
;

74 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

75 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

76 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

77 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

78 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

79 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

80 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

81 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

82 
	#FLASH_L©ícy_8
 ((
uöt8_t
)0x0008Ë

	)

83 
	#FLASH_L©ícy_9
 ((
uöt8_t
)0x0009Ë

	)

84 
	#FLASH_L©ícy_10
 ((
uöt8_t
)0x000AË

	)

85 
	#FLASH_L©ícy_11
 ((
uöt8_t
)0x000BË

	)

86 
	#FLASH_L©ícy_12
 ((
uöt8_t
)0x000CË

	)

87 
	#FLASH_L©ícy_13
 ((
uöt8_t
)0x000DË

	)

88 
	#FLASH_L©ícy_14
 ((
uöt8_t
)0x000EË

	)

89 
	#FLASH_L©ícy_15
 ((
uöt8_t
)0x000FË

	)

92 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

93 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

94 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

95 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

96 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

97 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

98 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

99 ((
LATENCY
Ë=
FLASH_L©ícy_7
) || \

100 ((
LATENCY
Ë=
FLASH_L©ícy_8
) || \

101 ((
LATENCY
Ë=
FLASH_L©ícy_9
) || \

102 ((
LATENCY
Ë=
FLASH_L©ícy_10
) || \

103 ((
LATENCY
Ë=
FLASH_L©ícy_11
) || \

104 ((
LATENCY
Ë=
FLASH_L©ícy_12
) || \

105 ((
LATENCY
Ë=
FLASH_L©ícy_13
) || \

106 ((
LATENCY
Ë=
FLASH_L©ícy_14
) || \

107 ((
LATENCY
Ë=
FLASH_L©ícy_15
))

	)

115 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

116 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

117 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

118 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

120 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
) || \

121 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

122 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

123 ((
RANGE
Ë=
VﬁègeR™ge_4
))

	)

131 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

132 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

133 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

134 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

135 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

136 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

137 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

138 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

139 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

140 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

141 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

142 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

143 
	#FLASH_Se˘‹_12
 ((
uöt16_t
)0x0080Ë

	)

144 
	#FLASH_Se˘‹_13
 ((
uöt16_t
)0x0088Ë

	)

145 
	#FLASH_Se˘‹_14
 ((
uöt16_t
)0x0090Ë

	)

146 
	#FLASH_Se˘‹_15
 ((
uöt16_t
)0x0098Ë

	)

147 
	#FLASH_Se˘‹_16
 ((
uöt16_t
)0x00A0Ë

	)

148 
	#FLASH_Se˘‹_17
 ((
uöt16_t
)0x00A8Ë

	)

149 
	#FLASH_Se˘‹_18
 ((
uöt16_t
)0x00B0Ë

	)

150 
	#FLASH_Se˘‹_19
 ((
uöt16_t
)0x00B8Ë

	)

151 
	#FLASH_Se˘‹_20
 ((
uöt16_t
)0x00C0Ë

	)

152 
	#FLASH_Se˘‹_21
 ((
uöt16_t
)0x00C8Ë

	)

153 
	#FLASH_Se˘‹_22
 ((
uöt16_t
)0x00D0Ë

	)

154 
	#FLASH_Se˘‹_23
 ((
uöt16_t
)0x00D8Ë

	)

156 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
) ||\

157 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

158 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

159 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

160 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

161 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
) ||\

162 ((
SECTOR
Ë=
FLASH_Se˘‹_12
Ë|| ((SECTORË=
FLASH_Se˘‹_13
) ||\

163 ((
SECTOR
Ë=
FLASH_Se˘‹_14
Ë|| ((SECTORË=
FLASH_Se˘‹_15
) ||\

164 ((
SECTOR
Ë=
FLASH_Se˘‹_16
Ë|| ((SECTORË=
FLASH_Se˘‹_17
) ||\

165 ((
SECTOR
Ë=
FLASH_Se˘‹_18
Ë|| ((SECTORË=
FLASH_Se˘‹_19
) ||\

166 ((
SECTOR
Ë=
FLASH_Se˘‹_20
Ë|| ((SECTORË=
FLASH_Se˘‹_21
) ||\

167 ((
SECTOR
Ë=
FLASH_Se˘‹_22
Ë|| ((SECTORË=
FLASH_Se˘‹_23
))

	)

169 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

170 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x081FFFFF)) ||\

171 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

174 #i‡
deföed
 (
STM32F40_41xxx
)

175 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x080FFFFF)) ||\

176 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

179 #i‡
deföed
 (
STM32F401xx
)

180 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0803FFFF)) ||\

181 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

184 #i‡
deföed
 (
STM32F411xE
)

185 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0807FFFF)) ||\

186 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

196 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

197 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

198 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

199 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

200 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

201 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

202 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

203 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

204 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

205 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

206 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

207 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

208 
	#OB_WRP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

209 
	#OB_WRP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

210 
	#OB_WRP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

211 
	#OB_WRP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

212 
	#OB_WRP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

213 
	#OB_WRP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

214 
	#OB_WRP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

215 
	#OB_WRP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

216 
	#OB_WRP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

217 
	#OB_WRP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

218 
	#OB_WRP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

219 
	#OB_WRP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

220 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

222 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

230 
	#OB_PcROP_DißbÀ
 ((
uöt8_t
)0x00Ë

	)

231 
	#OB_PcROP_E«bÀ
 ((
uöt8_t
)0x80Ë

	)

232 
	#IS_OB_PCROP_SELECT
(
PCROP
Ë(((PCROPË=
OB_PcROP_DißbÀ
Ë|| ((PCROPË=
OB_PcROP_E«bÀ
))

	)

240 
	#OB_PCROP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

241 
	#OB_PCROP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

242 
	#OB_PCROP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

243 
	#OB_PCROP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

244 
	#OB_PCROP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

245 
	#OB_PCROP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

246 
	#OB_PCROP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

247 
	#OB_PCROP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

248 
	#OB_PCROP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

249 
	#OB_PCROP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

250 
	#OB_PCROP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

251 
	#OB_PCROP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

252 
	#OB_PCROP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

253 
	#OB_PCROP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

254 
	#OB_PCROP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

255 
	#OB_PCROP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

256 
	#OB_PCROP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

257 
	#OB_PCROP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

258 
	#OB_PCROP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

259 
	#OB_PCROP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

260 
	#OB_PCROP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

261 
	#OB_PCROP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

262 
	#OB_PCROP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

263 
	#OB_PCROP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

264 
	#OB_PCROP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

266 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

274 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

275 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

278 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

279 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

	)

288 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

289 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

290 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

298 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

299 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

300 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

309 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

310 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

311 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

319 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

320 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

321 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

322 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

323 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
) ||\

324 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

	)

332 
	#OB_DuÆ_BoŸE«bÀd
 ((
uöt8_t
)0x10Ë

	)

333 
	#OB_DuÆ_BoŸDißbÀd
 ((
uöt8_t
)0x00Ë

	)

334 
	#IS_OB_BOOT
(
BOOT
Ë(((BOOTË=
OB_DuÆ_BoŸE«bÀd
Ë|| ((BOOTË=
OB_DuÆ_BoŸDißbÀd
))

	)

342 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

343 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

344 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

352 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

353 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

354 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

355 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

356 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

357 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

358 
	#FLASH_FLAG_RDERR
 ((
uöt32_t
)0x00000100Ë

	)

359 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

360 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFE0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

361 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
) || \

362 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

363 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

364 ((
FLAG
Ë=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_RDERR
))

	)

372 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

373 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

374 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

375 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

376 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

384 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

385 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

386 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

387 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

388 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

396 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

400 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

404 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

408 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

412 
	#OPTCR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023C17)

	)

417 
	#OPTCR1_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C1A)

	)

427 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

428 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
FLASH_In°ru˘i⁄CacheRe£t
();

432 
FLASH_D©aCacheRe£t
();

435 
FLASH_U∆ock
();

436 
FLASH_Lock
();

437 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

438 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

439 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

440 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

441 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

442 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

443 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

444 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

447 
FLASH_OB_U∆ock
();

448 
FLASH_OB_Lock
();

449 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
);

452 
FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

455 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

456 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

457 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

458 
FLASH_Sètus
 
FLASH_OB_Launch
();

459 
uöt8_t
 
FLASH_OB_GëU£r
();

460 
uöt16_t
 
FLASH_OB_GëWRP
();

461 
uöt16_t
 
FLASH_OB_GëWRP1
();

462 
uöt16_t
 
FLASH_OB_GëPCROP
();

463 
uöt16_t
 
FLASH_OB_GëPCROP1
();

464 
FœgSètus
 
FLASH_OB_GëRDP
();

465 
uöt8_t
 
FLASH_OB_GëBOR
();

468 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

469 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

470 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

471 
FLASH_Sètus
 
FLASH_GëSètus
();

472 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

474 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_gpio.h

30 #i‚de‡
__STM32F4xx_GPIO_H


31 
	#__STM32F4xx_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOF
) || \

56 ((
PERIPH
Ë=
GPIOG
) || \

57 ((
PERIPH
Ë=
GPIOH
) || \

58 ((
PERIPH
Ë=
GPIOI
) || \

59 ((
PERIPH
Ë=
GPIOJ
) || \

60 ((
PERIPH
Ë=
GPIOK
))

	)

67 
GPIO_Mode_IN
 = 0x00,

68 
GPIO_Mode_OUT
 = 0x01,

69 
GPIO_Mode_AF
 = 0x02,

70 
GPIO_Mode_AN
 = 0x03

71 }
	tGPIOMode_Ty≥Def
;

72 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
) || \

73 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

	)

80 
GPIO_OTy≥_PP
 = 0x00,

81 
GPIO_OTy≥_OD
 = 0x01

82 }
	tGPIOOTy≥_Ty≥Def
;

83 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

91 
GPIO_Low_S≥ed
 = 0x00,

92 
GPIO_Medium_S≥ed
 = 0x01,

93 
GPIO_Fa°_S≥ed
 = 0x02,

94 
GPIO_High_S≥ed
 = 0x03

95 }
	tGPIOS≥ed_Ty≥Def
;

98 
	#GPIO_S≥ed_2MHz
 
GPIO_Low_S≥ed


	)

99 
	#GPIO_S≥ed_25MHz
 
GPIO_Medium_S≥ed


	)

100 
	#GPIO_S≥ed_50MHz
 
GPIO_Fa°_S≥ed


	)

101 
	#GPIO_S≥ed_100MHz
 
GPIO_High_S≥ed


	)

103 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_Low_S≥ed
Ë|| ((SPEEDË=
GPIO_Medium_S≥ed
) || \

104 ((
SPEED
Ë=
GPIO_Fa°_S≥ed
)|| ((SPEEDË=
GPIO_High_S≥ed
))

	)

111 
GPIO_PuPd_NOPULL
 = 0x00,

112 
GPIO_PuPd_UP
 = 0x01,

113 
GPIO_PuPd_DOWN
 = 0x02

114 }
	tGPIOPuPd_Ty≥Def
;

115 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
) || \

116 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

	)

123 
Bô_RESET
 = 0,

124 
Bô_SET


125 }
	tBôA˘i⁄
;

126 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

134 
uöt32_t
 
GPIO_Pö
;

137 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

140 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

143 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

146 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

148 }
	tGPIO_InôTy≥Def
;

159 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

160 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

161 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

162 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

163 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

164 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

165 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

166 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

167 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

168 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

169 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

170 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

171 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

172 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

173 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

174 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

175 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

177 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

178 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

179 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

180 ((
PIN
Ë=
GPIO_Pö_1
) || \

181 ((
PIN
Ë=
GPIO_Pö_2
) || \

182 ((
PIN
Ë=
GPIO_Pö_3
) || \

183 ((
PIN
Ë=
GPIO_Pö_4
) || \

184 ((
PIN
Ë=
GPIO_Pö_5
) || \

185 ((
PIN
Ë=
GPIO_Pö_6
) || \

186 ((
PIN
Ë=
GPIO_Pö_7
) || \

187 ((
PIN
Ë=
GPIO_Pö_8
) || \

188 ((
PIN
Ë=
GPIO_Pö_9
) || \

189 ((
PIN
Ë=
GPIO_Pö_10
) || \

190 ((
PIN
Ë=
GPIO_Pö_11
) || \

191 ((
PIN
Ë=
GPIO_Pö_12
) || \

192 ((
PIN
Ë=
GPIO_Pö_13
) || \

193 ((
PIN
Ë=
GPIO_Pö_14
) || \

194 ((
PIN
Ë=
GPIO_Pö_15
))

	)

203 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

204 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

205 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

206 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

207 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

208 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

209 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

210 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

211 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

212 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

213 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

214 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

215 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

216 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

217 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

218 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

220 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

221 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

222 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

223 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

224 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

225 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

226 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

227 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

228 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

229 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

246 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

247 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

248 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

249 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

250 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

255 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

256 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

261 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

262 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

263 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

268 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

269 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

270 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

271 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

276 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

277 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

278 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

283 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

284 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

285 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

286 
	#GPIO_AF_SPI4
 ((
uöt8_t
)0x05Ë

	)

287 
	#GPIO_AF_SPI5
 ((
uöt8_t
)0x05Ë

	)

288 
	#GPIO_AF_SPI6
 ((
uöt8_t
)0x05Ë

	)

293 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

294 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

295 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

296 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

297 
	#GPIO_AF_SAI1
 ((
uöt8_t
)0x06Ë

	)

302 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

303 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

304 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

305 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

310 
	#GPIO_AF_I2S3ext
 
GPIO_AF7_SPI3


	)

315 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

316 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

317 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

318 
	#GPIO_AF_UART7
 ((
uöt8_t
)0x08Ë

	)

319 
	#GPIO_AF_UART8
 ((
uöt8_t
)0x08Ë

	)

324 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

325 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

326 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

327 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

328 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

330 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

331 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

336 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

337 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

342 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

347 #i‡
deföed
 (
STM32F40_41xxx
)

348 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

351 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

352 
	#GPIO_AF_FMC
 ((
uöt8_t
)0xCË

	)

355 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

356 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

361 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

367 
	#GPIO_AF_LTDC
 ((
uöt8_t
)0x0EË

	)

372 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

374 #i‡
deföed
 (
STM32F40_41xxx
)

375 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

376 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

377 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

378 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

379 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

380 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

381 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

382 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

383 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

384 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

385 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

386 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

387 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

388 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

389 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

390 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

391 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

392 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_FSMC
))

	)

395 #i‡
deföed
 (
STM32F401xx
)

396 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

397 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

398 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

399 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

400 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

401 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

402 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

403 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

404 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

405 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

406 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

407 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_USART6
) || \

408 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

409 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
))

	)

412 #i‡
deföed
 (
STM32F411xE
)

413 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!13Ë&& ((AFË!14))

	)

416 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

417 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

418 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

419 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

420 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

421 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

422 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

423 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

424 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

425 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

426 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

427 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

428 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

429 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

430 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

431 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

432 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

433 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

434 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
) || \

435 ((
AF
Ë=
GPIO_AF_SPI5
Ë|| ((AFË=
GPIO_AF_SPI6
) || \

436 ((
AF
Ë=
GPIO_AF_UART7
Ë|| ((AFË=
GPIO_AF_UART8
) || \

437 ((
AF
Ë=
GPIO_AF_FMC
Ë|| ((AFË=
GPIO_AF_SAI1
) || \

438 ((
AF
Ë=
GPIO_AF_LTDC
))

	)

449 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

451 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

452 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

453 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

467 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

470 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

471 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

472 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

475 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

476 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

477 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

478 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

479 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

480 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

481 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

482 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

483 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

486 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

488 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_pwr.h

30 #i‚de‡
__STM32F4xx_PWR_H


31 
	#__STM32F4xx_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

59 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

60 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

61 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

62 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

63 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

64 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

65 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

67 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

	)

79 
	#PWR_MaöReguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

80 
	#PWR_LowPowîReguœt‹_ON
 
PWR_CR_LPDS


	)

83 
	#PWR_Reguœt‹_ON
 
PWR_MaöReguœt‹_ON


	)

84 
	#PWR_Reguœt‹_LowPowî
 
PWR_LowPowîReguœt‹_ON


	)

86 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_ON
) || \

87 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_ON
))

	)

96 
	#PWR_MaöReguœt‹_UndîDrive_ON
 
PWR_CR_MRUDS


	)

97 
	#PWR_LowPowîReguœt‹_UndîDrive_ON
 ((
uöt32_t
)(
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
))

	)

99 
	#IS_PWR_REGULATOR_UNDERDRIVE
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_UndîDrive_ON
) || \

100 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_UndîDrive_ON
))

	)

109 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

110 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

111 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

119 
	#PWR_Reguœt‹_Vﬁège_SˇÀ1
 ((
uöt32_t
)0x0000C000)

	)

120 
	#PWR_Reguœt‹_Vﬁège_SˇÀ2
 ((
uöt32_t
)0x00008000)

	)

121 
	#PWR_Reguœt‹_Vﬁège_SˇÀ3
 ((
uöt32_t
)0x00004000)

	)

122 
	#IS_PWR_REGULATOR_VOLTAGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ1
) || \

123 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ2
) || \

124 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ3
))

	)

132 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

133 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

134 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

135 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

136 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

137 
	#PWR_FLAG_ODRDY
 
PWR_CSR_ODRDY


	)

138 
	#PWR_FLAG_ODSWRDY
 
PWR_CSR_ODSWRDY


	)

139 
	#PWR_FLAG_UDRDY
 
PWR_CSR_UDSWRDY


	)

142 
	#PWR_FLAG_REGRDY
 
PWR_FLAG_VOSRDY


	)

144 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

145 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

146 ((
FLAG
Ë=
PWR_FLAG_VOSRDY
Ë|| ((FLAGË=
PWR_FLAG_ODRDY
) || \

147 ((
FLAG
Ë=
PWR_FLAG_ODSWRDY
Ë|| ((FLAGË=
PWR_FLAG_UDRDY
))

	)

150 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

151 ((
FLAG
Ë=
PWR_FLAG_UDRDY
))

	)

165 
PWR_DeInô
();

168 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

171 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

172 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

175 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

178 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

179 
PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
);

180 
PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

182 
PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

183 
PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

184 
PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

190 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

191 
PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

192 
PWR_E¡îSTANDBYMode
();

195 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

196 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

198 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_rcc.h

29 #i‚de‡
__STM32F4xx_RCC_H


30 
	#__STM32F4xx_RCC_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

50 
uöt32_t
 
SYSCLK_Fªquícy
;

51 
uöt32_t
 
HCLK_Fªquícy
;

52 
uöt32_t
 
PCLK1_Fªquícy
;

53 
uöt32_t
 
PCLK2_Fªquícy
;

54 }
	tRCC_ClocksTy≥Def
;

65 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

66 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

67 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

68 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

69 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

77 
	#RCC_LSE_LOWPOWER_MODE
 ((
uöt8_t
)0x00)

	)

78 
	#RCC_LSE_HIGHDRIVE_MODE
 ((
uöt8_t
)0x01)

	)

79 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
) || \

80 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

	)

88 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

89 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
) || \

91 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

	)

92 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

93 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

94 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

95 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

97 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

98 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

99 
	#IS_RCC_PLLI2SM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

101 
	#IS_RCC_PLLI2SQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

102 
	#IS_RCC_PLLSAIN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

103 
	#IS_RCC_PLLSAIQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

104 
	#IS_RCC_PLLSAIR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

106 
	#IS_RCC_PLLSAI_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

107 
	#IS_RCC_PLLI2S_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

109 
	#RCC_PLLSAIDivR_Div2
 ((
uöt32_t
)0x00000000)

	)

110 
	#RCC_PLLSAIDivR_Div4
 ((
uöt32_t
)0x00010000)

	)

111 
	#RCC_PLLSAIDivR_Div8
 ((
uöt32_t
)0x00020000)

	)

112 
	#RCC_PLLSAIDivR_Div16
 ((
uöt32_t
)0x00030000)

	)

113 
	#IS_RCC_PLLSAI_DIVR_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIDivR_Div2
) ||\

114 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div4
) ||\

115 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div8
) ||\

116 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div16
))

	)

125 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

126 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

127 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

128 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

129 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

130 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

138 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

139 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

140 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

141 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

142 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

143 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

144 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

145 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

146 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

147 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

148 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

149 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

150 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

151 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

159 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

160 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

161 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

162 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

163 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

164 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

165 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

166 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

174 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

175 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

176 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

177 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

178 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

179 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

180 
	#RCC_IT_PLLSAIRDY
 ((
uöt8_t
)0x40)

	)

181 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

183 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

184 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

185 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

186 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

187 ((
IT
Ë=
RCC_IT_PLLSAIRDY
Ë|| ((ITË=
RCC_IT_PLLI2SRDY
))

	)

188 
	#IS_RCC_CLEAR_IT
(
IT
)((ITË!0x00)

	)

197 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

198 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

199 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

200 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

201 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

209 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

210 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

211 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

212 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

213 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

214 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

215 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

216 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

217 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

218 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

219 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

220 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

221 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

222 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

223 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

224 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

225 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

226 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

227 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

228 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

229 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

230 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

231 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

232 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

233 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

234 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

235 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

236 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

237 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

238 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

239 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

240 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

241 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

242 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

243 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

244 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

245 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

246 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

247 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

248 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

249 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

250 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

251 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

252 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

253 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

254 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

255 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

256 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

257 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

258 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

259 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

260 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

261 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

262 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

263 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

264 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

265 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

266 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

267 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

268 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

269 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

270 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

271 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

272 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

	)

280 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

281 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

283 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

291 
	#RCC_SAIACLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

292 
	#RCC_SAIACLKSour˚_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

293 
	#RCC_SAIACLKSour˚_Ext
 ((
uöt32_t
)0x00200000)

	)

295 
	#IS_RCC_SAIACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIACLKSour˚_PLLI2S
) ||\

296 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_PLLSAI
) ||\

297 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_Ext
))

	)

305 
	#RCC_SAIBCLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

306 
	#RCC_SAIBCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00400000)

	)

307 
	#RCC_SAIBCLKSour˚_Ext
 ((
uöt32_t
)0x00800000)

	)

309 
	#IS_RCC_SAIBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIBCLKSour˚_PLLI2S
) ||\

310 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_PLLSAI
) ||\

311 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_Ext
))

	)

319 
	#RCC_TIMPªscDeß˘iv©ed
 ((
uöt8_t
)0x00)

	)

320 
	#RCC_TIMPªscA˘iv©ed
 ((
uöt8_t
)0x01)

	)

322 
	#IS_RCC_TIMCLK_PRESCALER
(
VALUE
Ë(((VALUEË=
RCC_TIMPªscDeß˘iv©ed
Ë|| ((VALUEË=
RCC_TIMPªscA˘iv©ed
))

	)

330 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

331 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

332 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

333 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

334 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

335 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

336 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

337 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

338 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

339 
	#RCC_AHB1Pîùh_GPIOJ
 ((
uöt32_t
)0x00000200)

	)

340 
	#RCC_AHB1Pîùh_GPIOK
 ((
uöt32_t
)0x00000400)

	)

341 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

342 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

343 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

344 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

345 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

346 
	#RCC_AHB1Pîùh_SRAM3
 ((
uöt32_t
)0x00080000)

	)

347 
	#RCC_AHB1Pîùh_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

348 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

349 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

350 
	#RCC_AHB1Pîùh_DMA2D
 ((
uöt32_t
)0x00800000)

	)

351 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

352 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

353 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

354 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

355 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

356 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

358 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x810BE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

359 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xDD1FE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

360 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81106800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

369 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

370 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

371 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

372 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

373 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

374 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

382 #i‡
deföed
 (
STM32F40_41xxx
)

383 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

386 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

387 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

390 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

398 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

399 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

400 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

401 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

402 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

403 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

404 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

405 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

406 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

407 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

408 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

409 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

410 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

411 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

412 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

413 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

414 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

415 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

416 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

417 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

418 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

419 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

420 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

421 
	#RCC_APB1Pîùh_UART7
 ((
uöt32_t
)0x40000000)

	)

422 
	#RCC_APB1Pîùh_UART8
 ((
uöt32_t
)0x80000000)

	)

423 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x09013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

431 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

432 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

433 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

434 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

435 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

436 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

437 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

438 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

439 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

440 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

441 
	#RCC_APB2Pîùh_SPI4
 ((
uöt32_t
)0x00002000)

	)

442 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

443 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

444 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

445 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

446 
	#RCC_APB2Pîùh_SPI5
 ((
uöt32_t
)0x00100000)

	)

447 
	#RCC_APB2Pîùh_SPI6
 ((
uöt32_t
)0x00200000)

	)

448 
	#RCC_APB2Pîùh_SAI1
 ((
uöt32_t
)0x00400000)

	)

449 
	#RCC_APB2Pîùh_LTDC
 ((
uöt32_t
)0x04000000)

	)

451 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFB8880CCË=0x00Ë&& ((PERIPHË!0x00))

	)

452 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFB8886CCË=0x00Ë&& ((PERIPHË!0x00))

	)

461 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

462 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

463 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

464 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

465 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

466 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

467 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

468 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

469 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

470 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
) || \

471 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

	)

473 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
) || \

474 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

475 ((
DIV
Ë=
RCC_MCO1Div_5
))

	)

483 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

484 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

485 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

486 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

487 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

488 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

489 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

490 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

491 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

492 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

493 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

	)

495 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
) || \

496 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

497 ((
DIV
Ë=
RCC_MCO2Div_5
))

	)

505 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

506 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

507 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

508 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

509 
	#RCC_FLAG_PLLSAIRDY
 ((
uöt8_t
)0x3D)

	)

510 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

511 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

512 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

513 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

514 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

515 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

516 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

517 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

518 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

520 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

521 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

522 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

523 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

524 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

525 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
Ë|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

526 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
)|| ((FLAGË=
RCC_FLAG_PLLSAIRDY
))

	)

528 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

541 
RCC_DeInô
();

544 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

545 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

546 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

547 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

548 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

549 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

550 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

551 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

553 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
)

554 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

555 #ñi‡
deföed
 (
STM32F411xE
)

556 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
);

557 #ñi‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

558 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

562 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
);

564 
RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

566 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

567 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

570 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

571 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

572 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

573 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

574 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

575 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

578 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

579 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

582 
RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
);

583 
RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
);

584 
RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
);

585 
RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
);

586 
RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
);

587 
RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
);

589 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

590 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

592 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

593 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

596 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

597 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

598 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

602 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

603 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

607 
RCC_LSEModeC⁄fig
(
uöt8_t
 
Mode
);

610 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

612 
RCC_CÀ¨Fœg
();

613 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

614 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

616 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_rtc.h

30 #i‚de‡
__STM32F4xx_RTC_H


31 
	#__STM32F4xx_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
) || \

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

	)

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
) || \

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

	)

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
) || \

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

	)

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
) || \

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

	)

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
) || \

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

	)

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
) || \

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

	)

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
) || \

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

	)

426 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

427 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

428 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
) || \

429 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

	)

430 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

439 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

440 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

441 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
) || \

442 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

	)

450 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

452 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

454 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

456 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
) || \

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

458 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

	)

467 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

470 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

472 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
) || \

473 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

	)

482 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

491 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

492 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

493 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
) || \

494 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

	)

496 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

497 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

498 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
) || \

499 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

	)

507 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

508 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

509 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

510 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

511 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
) || \

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

514 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

	)

523 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

525 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

527 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

529 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

531 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
) || \

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

534 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

	)

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

554 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

556 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

558 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

565 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

	)

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

576 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

578 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

580 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

583 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
) || \

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

586 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

	)

594 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
))

	)

604 
	#RTC_Tam≥rPö_PC13
 ((
uöt32_t
)0x00000000)

	)

605 
	#RTC_Tam≥rPö_PI8
 ((
uöt32_t
)0x00010000)

	)

606 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_PC13
) || \

607 ((
PIN
Ë=
RTC_Tam≥rPö_PI8
))

	)

615 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

616 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

617 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
) || \

618 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

	)

626 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

627 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

628 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
) || \

629 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

	)

638 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

639 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

640 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
) || \

641 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

	)

649 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

659 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

660 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

661 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

662 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

663 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

664 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

665 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

666 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

667 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

668 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

669 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

670 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

671 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

672 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

673 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

674 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

675 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

676 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

677 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

678 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

679 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

680 ((
BKP
Ë=
RTC_BKP_DR1
) || \

681 ((
BKP
Ë=
RTC_BKP_DR2
) || \

682 ((
BKP
Ë=
RTC_BKP_DR3
) || \

683 ((
BKP
Ë=
RTC_BKP_DR4
) || \

684 ((
BKP
Ë=
RTC_BKP_DR5
) || \

685 ((
BKP
Ë=
RTC_BKP_DR6
) || \

686 ((
BKP
Ë=
RTC_BKP_DR7
) || \

687 ((
BKP
Ë=
RTC_BKP_DR8
) || \

688 ((
BKP
Ë=
RTC_BKP_DR9
) || \

689 ((
BKP
Ë=
RTC_BKP_DR10
) || \

690 ((
BKP
Ë=
RTC_BKP_DR11
) || \

691 ((
BKP
Ë=
RTC_BKP_DR12
) || \

692 ((
BKP
Ë=
RTC_BKP_DR13
) || \

693 ((
BKP
Ë=
RTC_BKP_DR14
) || \

694 ((
BKP
Ë=
RTC_BKP_DR15
) || \

695 ((
BKP
Ë=
RTC_BKP_DR16
) || \

696 ((
BKP
Ë=
RTC_BKP_DR17
) || \

697 ((
BKP
Ë=
RTC_BKP_DR18
) || \

698 ((
BKP
Ë=
RTC_BKP_DR19
))

	)

706 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

707 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

708 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

717 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

718 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

719 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

720 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

721 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

722 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

723 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

724 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

725 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

726 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

727 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

728 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

729 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

730 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

731 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
) || \

732 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

733 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

734 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

735 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

736 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

737 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

	)

738 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

746 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

747 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

748 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

749 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

750 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

751 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

753 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

754 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
) || \

755 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

756 ((
IT
Ë=
RTC_IT_TAMP1
))

	)

757 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFD0FFFË=(uöt32_t)RESET))

	)

766 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

767 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

781 
Eº‹Sètus
 
RTC_DeInô
();

784 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

785 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

786 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

787 
Eº‹Sètus
 
RTC_E¡îInôMode
();

788 
RTC_ExôInôMode
();

789 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

790 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

791 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

794 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

795 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

796 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

797 
uöt32_t
 
RTC_GëSubSec⁄d
();

798 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

799 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

800 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

803 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

804 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

805 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

806 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

807 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

808 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

811 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

812 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

813 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

814 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

817 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

818 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

821 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

824 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

825 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

826 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

827 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

828 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

829 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

830 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

833 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

834 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

835 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

836 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

839 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

840 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

841 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

842 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

843 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

844 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

845 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

848 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

849 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

853 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

854 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

855 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

858 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

861 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

862 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

863 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

864 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

865 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

867 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_spi.h

30 #i‚de‡
__STM32F4xx_SPI_H


31 
	#__STM32F4xx_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
) || \

122 ((
PERIPH
Ë=
SPI4
) || \

123 ((
PERIPH
Ë=
SPI5
) || \

124 ((
PERIPH
Ë=
SPI6
))

	)

126 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

127 ((
PERIPH
Ë=
SPI2
) || \

128 ((
PERIPH
Ë=
SPI3
) || \

129 ((
PERIPH
Ë=
SPI4
) || \

130 ((
PERIPH
Ë=
SPI5
) || \

131 ((
PERIPH
Ë=
SPI6
) || \

132 ((
PERIPH
Ë=
I2S2ext
) || \

133 ((
PERIPH
Ë=
I2S3ext
))

	)

135 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

136 ((
PERIPH
Ë=
SPI3
))

	)

138 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

139 ((
PERIPH
Ë=
SPI3
) || \

140 ((
PERIPH
Ë=
I2S2ext
) || \

141 ((
PERIPH
Ë=
I2S3ext
))

	)

143 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
) || \

144 ((
PERIPH
Ë=
I2S3ext
))

	)

151 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

152 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

153 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

154 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

155 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

156 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

157 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

158 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

167 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

168 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

170 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

179 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

180 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

181 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

182 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

191 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

193 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

194 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

203 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

205 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

206 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

215 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

216 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

217 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

218 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

227 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

229 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

230 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

231 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

232 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

233 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

234 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

235 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

236 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

237 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

238 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

239 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

240 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

241 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

242 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

251 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

252 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

253 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

254 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

263 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

264 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

265 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

266 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

267 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

268 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

269 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

270 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

	)

280 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

281 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

282 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

283 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

284 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

285 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

286 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

287 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

288 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

289 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

298 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

299 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

300 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

301 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

302 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

303 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

304 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

305 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

314 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

315 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

316 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

317 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

326 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

327 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

328 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

329 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

330 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

331 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

332 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

333 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

334 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

335 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

337 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

338 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

339 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

348 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

349 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

350 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

351 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

360 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

361 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

362 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

371 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

372 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

373 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

374 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

383 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

384 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

385 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

394 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

395 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

396 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

397 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

406 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

407 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

408 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

409 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

410 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

412 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

413 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

414 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

416 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

417 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

418 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

420 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

422 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
) || \

423 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

424 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

425 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

	)

434 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

435 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

436 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

437 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

438 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

439 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

440 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

441 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

442 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

444 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

445 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

446 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

447 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

448 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

449 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

	)

458 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

467 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

468 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

469 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

470 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

471 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

472 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

473 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

474 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

475 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

476 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

477 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

478 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

479 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

480 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

481 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

482 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

483 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

484 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

485 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

498 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

501 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

502 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

503 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

504 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

505 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

508 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

509 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

510 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

516 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

517 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

520 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

521 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

522 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

523 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

526 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

531 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

532 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

533 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

535 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_syscfg.h

30 #i‚de‡
__STM32F4xx_SYSCFG_H


31 
	#__STM32F4xx_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

59 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

60 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

61 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

62 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

63 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

64 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

65 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

66 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

67 
	#EXTI_P‹tSour˚GPIOJ
 ((
uöt8_t
)0x09)

	)

68 
	#EXTI_P‹tSour˚GPIOK
 ((
uöt8_t
)0x0A)

	)

70 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
) || \

71 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

72 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

73 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

74 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

75 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

76 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

77 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

78 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
) || \

79 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOJ
) || \

80 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOK
))

	)

90 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

91 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

92 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

93 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

94 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

95 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

96 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

97 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

98 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

99 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

100 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

101 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

102 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

103 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

104 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

105 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

106 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
) || \

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

111 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

112 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

113 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

114 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

115 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

116 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

117 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

118 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

119 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

120 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

121 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

	)

130 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

131 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

132 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

133 
	#SYSCFG_Mem‹yRem≠_SDRAM
 ((
uöt8_t
)0x04)

	)

135 #i‡
deföed
 (
STM32F40_41xxx
)

136 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

139 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

140 
	#SYSCFG_Mem‹yRem≠_FMC
 ((
uöt8_t
)0x02)

	)

143 #i‡
deföed
 (
STM32F40_41xxx
)

144 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

145 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

146 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

147 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

	)

150 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

151 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

152 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

153 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

	)

156 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

157 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

158 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

159 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

160 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
) || \

161 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FMC
))

	)

172 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

173 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

175 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
) || \

176 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

	)

188 
SYSCFG_DeInô
();

189 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

190 
SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
);

191 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

192 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

193 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

194 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

196 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_tim.h

30 #i‚de‡
__STM32F4xx_TIM_H


31 
	#__STM32F4xx_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

78 } 
	tTIM_TimeBa£InôTy≥Def
;

86 
uöt16_t
 
TIM_OCMode
;

89 
uöt16_t
 
TIM_OuçutSèã
;

92 
uöt16_t
 
TIM_OuçutNSèã
;

96 
uöt32_t
 
TIM_Pul£
;

99 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

106 
uöt16_t
 
TIM_OCIdÀSèã
;

110 
uöt16_t
 
TIM_OCNIdÀSèã
;

113 } 
	tTIM_OCInôTy≥Def
;

122 
uöt16_t
 
TIM_Ch™√l
;

125 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

128 
uöt16_t
 
TIM_ICSñe˘i⁄
;

131 
uöt16_t
 
TIM_ICPªsˇÀr
;

134 
uöt16_t
 
TIM_ICFûãr
;

136 } 
	tTIM_ICInôTy≥Def
;

146 
uöt16_t
 
TIM_OSSRSèã
;

149 
uöt16_t
 
TIM_OSSISèã
;

152 
uöt16_t
 
TIM_LOCKLevñ
;

155 
uöt16_t
 
TIM_DódTime
;

159 
uöt16_t
 
TIM_Bªak
;

162 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

165 
uöt16_t
 
TIM_Autom©icOuçut
;

167 } 
	tTIM_BDTRInôTy≥Def
;

175 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

176 ((
PERIPH
Ë=
TIM2
) || \

177 ((
PERIPH
Ë=
TIM3
) || \

178 ((
PERIPH
Ë=
TIM4
) || \

179 ((
PERIPH
Ë=
TIM5
) || \

180 ((
PERIPH
Ë=
TIM6
) || \

181 ((
PERIPH
Ë=
TIM7
) || \

182 ((
PERIPH
Ë=
TIM8
) || \

183 ((
PERIPH
Ë=
TIM9
) || \

184 ((
PERIPH
Ë=
TIM10
) || \

185 ((
PERIPH
Ë=
TIM11
) || \

186 ((
PERIPH
Ë=
TIM12
) || \

187 (((
PERIPH
Ë=
TIM13
) || \

188 ((
PERIPH
Ë=
TIM14
)))

	)

190 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

191 ((
PERIPH
Ë=
TIM2
) || \

192 ((
PERIPH
Ë=
TIM3
) || \

193 ((
PERIPH
Ë=
TIM4
) || \

194 ((
PERIPH
Ë=
TIM5
) || \

195 ((
PERIPH
Ë=
TIM8
) || \

196 ((
PERIPH
Ë=
TIM9
) || \

197 ((
PERIPH
Ë=
TIM10
) || \

198 ((
PERIPH
Ë=
TIM11
) || \

199 ((
PERIPH
Ë=
TIM12
) || \

200 ((
PERIPH
Ë=
TIM13
) || \

201 ((
PERIPH
Ë=
TIM14
))

	)

204 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

205 ((
PERIPH
Ë=
TIM2
) || \

206 ((
PERIPH
Ë=
TIM3
) || \

207 ((
PERIPH
Ë=
TIM4
) || \

208 ((
PERIPH
Ë=
TIM5
) || \

209 ((
PERIPH
Ë=
TIM8
) || \

210 ((
PERIPH
Ë=
TIM9
) || \

211 ((
PERIPH
Ë=
TIM12
))

	)

213 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

214 ((
PERIPH
Ë=
TIM2
) || \

215 ((
PERIPH
Ë=
TIM3
) || \

216 ((
PERIPH
Ë=
TIM4
) || \

217 ((
PERIPH
Ë=
TIM5
) || \

218 ((
PERIPH
Ë=
TIM8
))

	)

220 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

221 ((
PERIPH
Ë=
TIM8
))

	)

223 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

224 ((
PERIPH
Ë=
TIM2
) || \

225 ((
PERIPH
Ë=
TIM3
) || \

226 ((
PERIPH
Ë=
TIM4
) || \

227 ((
PERIPH
Ë=
TIM5
) || \

228 ((
PERIPH
Ë=
TIM6
) || \

229 ((
PERIPH
Ë=
TIM7
) || \

230 ((
PERIPH
Ë=
TIM8
))

	)

232 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
) || \

233 ((
TIMx
Ë=
TIM5
) || \

234 ((
TIMx
Ë=
TIM11
))

	)

240 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

241 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

242 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

243 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

244 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

245 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

246 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

252 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

253 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

254 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

255 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

256 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

257 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

258 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

259 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

268 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

269 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

270 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

271 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

280 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

281 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

282 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

283 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

285 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

286 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

290 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

291 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

292 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

293 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

294 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

303 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

305 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

306 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

307 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

308 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

317 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

318 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

319 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

320 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

321 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

322 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

323 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

324 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

325 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

326 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

335 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

336 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

337 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

338 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

347 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

348 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

349 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

350 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

359 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

360 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

361 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

362 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

371 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

372 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

373 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

374 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

383 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

384 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

385 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

386 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

395 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

396 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

397 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

398 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

407 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

408 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

409 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

410 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

419 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

420 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

421 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

422 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

431 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

432 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

433 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

434 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

443 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

444 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

445 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

446 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

447 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

448 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

449 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

450 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

459 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

460 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

461 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

462 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

471 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

472 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

473 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

474 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

483 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

484 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

485 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

486 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

495 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

496 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

497 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

498 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

507 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

508 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

509 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

510 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

511 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

512 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

521 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

523 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

525 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

526 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

527 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

528 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

537 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

538 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

539 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

540 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

541 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

542 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

543 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

544 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

553 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

554 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

556 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

557 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

558 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

559 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

560 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

561 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

563 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

564 ((
IT
Ë=
TIM_IT_CC1
) || \

565 ((
IT
Ë=
TIM_IT_CC2
) || \

566 ((
IT
Ë=
TIM_IT_CC3
) || \

567 ((
IT
Ë=
TIM_IT_CC4
) || \

568 ((
IT
Ë=
TIM_IT_COM
) || \

569 ((
IT
Ë=
TIM_IT_Triggî
) || \

570 ((
IT
Ë=
TIM_IT_Bªak
))

	)

579 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

580 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

581 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

582 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

583 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

584 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

585 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

586 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

587 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

588 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

589 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

590 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

591 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

592 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

593 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

594 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

595 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

597 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

598 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

599 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

600 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

602 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

603 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

604 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

609 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

610 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

613 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

614 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

615 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

616 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

617 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

618 ((
BASE
Ë=
TIM_DMABa£_OR
))

	)

627 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

629 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

630 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

631 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

632 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

633 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

634 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

635 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

636 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

637 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

638 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

639 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

640 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

641 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

642 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

643 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

644 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

645 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

657 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

658 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

659 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

660 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

661 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

662 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

671 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

672 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

673 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

674 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

675 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

676 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

677 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

678 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

688 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

689 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

691 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

692 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

693 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

694 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

695 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

704 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

705 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

706 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

707 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

708 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

709 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

710 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

711 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

712 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

713 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

714 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

716 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

717 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

718 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

719 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

720 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

721 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

722 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

723 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

732 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

733 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

734 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

743 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

744 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

745 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

746 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

755 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

756 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

757 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

758 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

767 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

768 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

769 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

770 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

779 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

780 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

781 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

782 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

783 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

784 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

794 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

795 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

796 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

797 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

798 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

799 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

800 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

801 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

802 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

812 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

815 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

816 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

817 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

826 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

827 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

828 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

829 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

838 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

839 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

840 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

841 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

851 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

852 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

853 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

854 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

863 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

864 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

865 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

866 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

867 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

868 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

869 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

870 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

871 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

873 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

874 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

875 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

876 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

877 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

878 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

887 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

888 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

889 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

890 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

891 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

892 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

893 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

894 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

903 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

904 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

905 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

906 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

914 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

915 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

916 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

917 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

919 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

920 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

921 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

922 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

924 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

925 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

927 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

928 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

929 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

930 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

931 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

932 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

933 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

934 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

935 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

936 ((
TIM_REMAP
Ë=
TIM11_HSE
))

	)

945 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

946 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

947 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

948 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

949 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

950 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

951 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

952 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

953 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

954 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

955 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

956 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

957 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

958 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

962 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

963 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

964 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

965 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

966 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

967 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

968 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

978 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

987 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

996 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

997 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1008 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1009 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1010 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1011 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1012 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1013 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1026 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1027 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1028 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1029 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1030 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1031 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1032 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1033 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1034 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1035 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1036 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1037 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1039 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1040 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1043 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1044 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1045 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1046 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1047 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1048 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1049 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1050 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1051 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1052 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1053 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1054 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1055 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1056 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1057 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1058 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1059 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1060 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1061 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1062 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1063 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1064 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1065 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1066 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1067 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1068 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1069 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1071 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1072 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1073 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1074 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1075 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1076 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1077 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1080 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1081 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1082 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1083 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1084 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1085 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1086 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1087 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1088 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1089 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1090 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1093 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1094 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1095 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1097 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1101 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1102 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1103 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1104 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1105 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1106 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1107 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1108 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1111 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1112 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1113 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1114 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1115 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1116 
uöt16_t
 
ExtTRGFûãr
);

1117 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1121 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1126 
uöt16_t
 
ExtTRGFûãr
);

1129 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1130 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1131 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1134 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1136 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_usart.h

30 #i‚de‡
__STM32F4xx_USART_H


31 
	#__STM32F4xx_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
USART_BaudR©e
;

62 
uöt16_t
 
USART_W‹dLígth
;

65 
uöt16_t
 
USART_St›Bôs
;

68 
uöt16_t
 
USART_P¨ôy
;

75 
uöt16_t
 
USART_Mode
;

78 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

81 } 
	tUSART_InôTy≥Def
;

90 
uöt16_t
 
USART_Clock
;

93 
uöt16_t
 
USART_CPOL
;

96 
uöt16_t
 
USART_CPHA
;

99 
uöt16_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
) || \

115 ((
PERIPH
Ë=
USART6
) || \

116 ((
PERIPH
Ë=
UART7
) || \

117 ((
PERIPH
Ë=
UART8
))

	)

119 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

120 ((
PERIPH
Ë=
USART2
) || \

121 ((
PERIPH
Ë=
USART3
) || \

122 ((
PERIPH
Ë=
USART6
))

	)

128 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

129 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

131 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

132 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

141 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

142 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

143 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

144 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

145 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

146 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

147 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

148 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

157 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

158 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

159 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

160 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

161 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

162 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

171 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

172 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

173 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

182 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

183 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

184 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

185 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

186 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

187 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

188 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

189 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

197 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

198 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

199 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

200 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

209 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

210 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

211 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

221 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

222 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

223 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

233 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

234 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

235 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

236 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

245 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

246 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

247 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

248 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

249 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

250 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

251 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

252 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

253 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

254 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

255 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

256 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

261 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

266 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

267 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

268 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

269 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

270 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

271 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

272 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

273 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

274 ((
IT
Ë=
USART_IT_ORE_RX
Ë|| ((ITË=
USART_IT_ORE_ER
) || \

275 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

276 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

277 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

286 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

287 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

288 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

298 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

299 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

300 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

301 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

310 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

311 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

312 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

313 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

314 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

323 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

324 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

325 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

326 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

335 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

336 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

337 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

338 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

339 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

340 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

341 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

342 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

343 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

344 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

345 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

346 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

347 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

348 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

349 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

351 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

353 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

354 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

355 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

369 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

372 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

373 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

374 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

375 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

376 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

378 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

382 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

383 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

386 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

387 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

388 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

392 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

396 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

404 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

405 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

408 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

413 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

414 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

415 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

417 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\misc.c

76 
	~"misc.h
"

89 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

118 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

121 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

124 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

125 
	}
}

136 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

138 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

141 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

142 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

143 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

145 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

148 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

149 
tmµª
 = (0x4 - 
tmµri‹ôy
);

150 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

152 
tmµri‹ôy
 = 
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

153 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

155 
tmµri‹ôy
 =Åmppriority << 0x04;

157 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

160 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

166 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

167 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

169 
	}
}

180 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

183 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

184 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

186 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

187 
	}
}

199 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

202 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

205 i‡(
NewSèã
 !
DISABLE
)

207 
SCB
->
SCR
 |
LowPowîMode
;

211 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

213 
	}
}

223 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

226 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

227 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

229 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

233 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

235 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_adc.c

106 
	~"°m32f4xx_adc.h
"

107 
	~"°m32f4xx_rcc.h
"

122 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

125 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

128 
	#CR1_AWDMode_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

131 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

134 
	#CR2_EXTEN_RESET
 ((
uöt32_t
)0xCFFFFFFF)

	)

137 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

140 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

143 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

146 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

147 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

148 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

151 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFF0FFFFF)

	)

154 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

157 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

158 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

161 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

162 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

165 
	#JDR_OFFSET
 ((
uöt8_t
)0x28)

	)

168 
	#CDR_ADDRESS
 ((
uöt32_t
)0x40012308)

	)

171 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC30E0)

	)

213 
	$ADC_DeInô
()

216 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
ENABLE
);

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
DISABLE
);

220 
	}
}

235 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

237 
uöt32_t
 
tm¥eg1
 = 0;

238 
uöt8_t
 
tm¥eg2
 = 0;

240 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

241 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

244 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

245 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

246 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

247 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

251 
tm¥eg1
 = 
ADCx
->
CR1
;

254 
tm¥eg1
 &
CR1_CLEAR_MASK
;

259 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8) | \

260 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
);

262 
ADCx
->
CR1
 = 
tm¥eg1
;

265 
tm¥eg1
 = 
ADCx
->
CR2
;

268 
tm¥eg1
 &
CR2_CLEAR_MASK
;

276 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | \

277 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 |

278 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | \

279 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

282 
ADCx
->
CR2
 = 
tm¥eg1
;

285 
tm¥eg1
 = 
ADCx
->
SQR1
;

288 
tm¥eg1
 &
SQR1_L_RESET
;

292 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

293 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

296 
ADCx
->
SQR1
 = 
tm¥eg1
;

297 
	}
}

310 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

313 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

316 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

319 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

322 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

325 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

328 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

331 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

332 
	}
}

341 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

343 
uöt32_t
 
tm¥eg1
 = 0;

345 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

346 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

347 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

348 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

351 
tm¥eg1
 = 
ADC
->
CCR
;

354 
tm¥eg1
 &
CR_CLEAR_MASK
;

362 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

363 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 |

364 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

365 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
);

368 
ADC
->
CCR
 = 
tm¥eg1
;

369 
	}
}

377 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

380 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

383 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

386 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

389 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

390 
	}
}

399 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

412 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

414 
	}
}

455 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

457 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

463 
tm¥eg
 = 
ADCx
->
CR1
;

466 
tm¥eg
 &
CR1_AWDMode_RESET
;

469 
tm¥eg
 |
ADC_A«logW©chdog
;

472 
ADCx
->
CR1
 = 
tm¥eg
;

473 
	}
}

484 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

485 
uöt16_t
 
LowThªshﬁd
)

488 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

489 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

490 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

493 
ADCx
->
HTR
 = 
HighThªshﬁd
;

496 
ADCx
->
LTR
 = 
LowThªshﬁd
;

497 
	}
}

525 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

527 
uöt32_t
 
tm¥eg
 = 0;

529 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

530 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

533 
tm¥eg
 = 
ADCx
->
CR1
;

536 
tm¥eg
 &
CR1_AWDCH_RESET
;

539 
tm¥eg
 |
ADC_Ch™√l
;

542 
ADCx
->
CR1
 = 
tm¥eg
;

543 
	}
}

589 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

592 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

593 i‡(
NewSèã
 !
DISABLE
)

596 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

601 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

603 
	}
}

615 
	$ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

618 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 i‡(
NewSèã
 !
DISABLE
)

622 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_VBATE
;

627 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_VBATE
);

629 
	}
}

715 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

717 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

719 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

720 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

721 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

722 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

725 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

728 
tm¥eg1
 = 
ADCx
->
SMPR1
;

731 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

734 
tm¥eg1
 &~
tm¥eg2
;

737 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

740 
tm¥eg1
 |
tm¥eg2
;

743 
ADCx
->
SMPR1
 = 
tm¥eg1
;

748 
tm¥eg1
 = 
ADCx
->
SMPR2
;

751 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

754 
tm¥eg1
 &~
tm¥eg2
;

757 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

760 
tm¥eg1
 |
tm¥eg2
;

763 
ADCx
->
SMPR2
 = 
tm¥eg1
;

766 i‡(
R™k
 < 7)

769 
tm¥eg1
 = 
ADCx
->
SQR3
;

772 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 1));

775 
tm¥eg1
 &~
tm¥eg2
;

778 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

781 
tm¥eg1
 |
tm¥eg2
;

784 
ADCx
->
SQR3
 = 
tm¥eg1
;

787 i‡(
R™k
 < 13)

790 
tm¥eg1
 = 
ADCx
->
SQR2
;

793 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 7));

796 
tm¥eg1
 &~
tm¥eg2
;

799 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

802 
tm¥eg1
 |
tm¥eg2
;

805 
ADCx
->
SQR2
 = 
tm¥eg1
;

811 
tm¥eg1
 = 
ADCx
->
SQR1
;

814 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 13));

817 
tm¥eg1
 &~
tm¥eg2
;

820 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

823 
tm¥eg1
 |
tm¥eg2
;

826 
ADCx
->
SQR1
 = 
tm¥eg1
;

828 
	}
}

835 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

838 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

841 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

842 
	}
}

849 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

851 
FœgSètus
 
bô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

856 i‡((
ADCx
->
CR2
 & 
ADC_CR2_SWSTART
Ë!(
uöt32_t
)
RESET
)

859 
bô°©us
 = 
SET
;

864 
bô°©us
 = 
RESET
;

868  
bô°©us
;

869 
	}
}

879 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

882 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

883 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

885 i‡(
NewSèã
 !
DISABLE
)

888 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_EOCS
;

893 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_EOCS
);

895 
	}
}

904 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

907 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

908 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

910 i‡(
NewSèã
 !
DISABLE
)

913 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

918 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

920 
	}
}

930 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

932 
uöt32_t
 
tm¥eg1
 = 0;

933 
uöt32_t
 
tm¥eg2
 = 0;

936 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

937 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

940 
tm¥eg1
 = 
ADCx
->
CR1
;

943 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

946 
tm¥eg2
 = 
Numbî
 - 1;

947 
tm¥eg1
 |
tm¥eg2
 << 13;

950 
ADCx
->
CR1
 = 
tm¥eg1
;

951 
	}
}

962 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

965 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

966 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

968 i‡(
NewSèã
 !
DISABLE
)

971 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

976 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

978 
	}
}

985 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

988 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

991  (
uöt16_t
Ë
ADCx
->
DR
;

992 
	}
}

1006 
uöt32_t
 
	$ADC_GëMu…iModeC⁄vîsi⁄VÆue
()

1009  (*(
__IO
 
uöt32_t
 *Ë
CDR_ADDRESS
);

1010 
	}
}

1052 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1055 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1056 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1057 i‡(
NewSèã
 !
DISABLE
)

1060 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1065 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1067 
	}
}

1076 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1079 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1080 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1081 i‡(
NewSèã
 !
DISABLE
)

1084 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DDS
;

1089 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DDS
);

1091 
	}
}

1103 
	$ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1110 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_DDS
;

1115 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_DDS
);

1117 
	}
}

1190 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1192 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1194 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1195 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1196 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1197 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1199 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1202 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1204 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3*(
ADC_Ch™√l
 - 10));

1206 
tm¥eg1
 &~
tm¥eg2
;

1208 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

1210 
tm¥eg1
 |
tm¥eg2
;

1212 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1217 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1219 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1221 
tm¥eg1
 &~
tm¥eg2
;

1223 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1225 
tm¥eg1
 |
tm¥eg2
;

1227 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1231 
tm¥eg1
 = 
ADCx
->
JSQR
;

1233 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1235 
tm¥eg2
 = 
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1237 
tm¥eg1
 &~
tm¥eg2
;

1239 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1241 
tm¥eg1
 |
tm¥eg2
;

1243 
ADCx
->
JSQR
 = 
tm¥eg1
;

1244 
	}
}

1253 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1255 
uöt32_t
 
tm¥eg1
 = 0;

1256 
uöt32_t
 
tm¥eg2
 = 0;

1258 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1259 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1262 
tm¥eg1
 = 
ADCx
->
JSQR
;

1265 
tm¥eg1
 &
JSQR_JL_RESET
;

1268 
tm¥eg2
 = 
Lígth
 - 1;

1269 
tm¥eg1
 |
tm¥eg2
 << 20;

1272 
ADCx
->
JSQR
 = 
tm¥eg1
;

1273 
	}
}

1288 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1290 
__IO
 
uöt32_t
 
tmp
 = 0;

1292 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1293 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1294 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1296 
tmp
 = (
uöt32_t
)
ADCx
;

1297 
tmp
 +
ADC_Inje˘edCh™√l
;

1300 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1301 
	}
}

1326 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1328 
uöt32_t
 
tm¥eg
 = 0;

1330 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1331 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1334 
tm¥eg
 = 
ADCx
->
CR2
;

1337 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1340 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1343 
ADCx
->
CR2
 = 
tm¥eg
;

1344 
	}
}

1360 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1362 
uöt32_t
 
tm¥eg
 = 0;

1364 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1365 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1367 
tm¥eg
 = 
ADCx
->
CR2
;

1369 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1371 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1373 
ADCx
->
CR2
 = 
tm¥eg
;

1374 
	}
}

1381 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1384 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1386 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1387 
	}
}

1394 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1396 
FœgSètus
 
bô°©us
 = 
RESET
;

1398 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1401 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1404 
bô°©us
 = 
SET
;

1409 
bô°©us
 = 
RESET
;

1412  
bô°©us
;

1413 
	}
}

1423 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1436 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1438 
	}
}

1449 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1452 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1454 i‡(
NewSèã
 !
DISABLE
)

1457 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1462 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1464 
	}
}

1477 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1479 
__IO
 
uöt32_t
 
tmp
 = 0;

1482 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1483 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1485 
tmp
 = (
uöt32_t
)
ADCx
;

1486 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1489  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1490 
	}
}

1584 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1586 
uöt32_t
 
ômask
 = 0;

1588 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1590 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1593 
ômask
 = (
uöt8_t
)
ADC_IT
;

1594 
ômask
 = (
uöt32_t
)0x01 << itmask;

1596 i‡(
NewSèã
 !
DISABLE
)

1599 
ADCx
->
CR1
 |
ômask
;

1604 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1606 
	}
}

1621 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1623 
FœgSètus
 
bô°©us
 = 
RESET
;

1625 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1626 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1629 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1632 
bô°©us
 = 
SET
;

1637 
bô°©us
 = 
RESET
;

1640  
bô°©us
;

1641 
	}
}

1656 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1659 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1660 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1663 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1664 
	}
}

1677 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1679 
ITSètus
 
bô°©us
 = 
RESET
;

1680 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1683 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1684 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1687 
ômask
 = 
ADC_IT
 >> 8;

1690 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
)) ;

1693 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1696 
bô°©us
 = 
SET
;

1701 
bô°©us
 = 
RESET
;

1704  
bô°©us
;

1705 
	}
}

1718 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1720 
uöt8_t
 
ômask
 = 0;

1722 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1723 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1725 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1727 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1728 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_dma.c

124 
	~"°m32f4xx_dma.h
"

125 
	~"°m32f4xx_rcc.h
"

140 
	#TRANSFER_IT_ENABLE_MASK
 (
uöt32_t
)(
DMA_SxCR_TCIE
 | 
DMA_SxCR_HTIE
 | \

141 
DMA_SxCR_TEIE
 | 
DMA_SxCR_DMEIE
)

	)

143 
	#DMA_Såóm0_IT_MASK
 (
uöt32_t
)(
DMA_LISR_FEIF0
 | 
DMA_LISR_DMEIF0
 | \

144 
DMA_LISR_TEIF0
 | 
DMA_LISR_HTIF0
 | \

145 
DMA_LISR_TCIF0
)

	)

147 
	#DMA_Såóm1_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 6)

	)

148 
	#DMA_Såóm2_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 16)

	)

149 
	#DMA_Såóm3_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 22)

	)

150 
	#DMA_Såóm4_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 | (uöt32_t)0x20000000)

	)

151 
	#DMA_Såóm5_IT_MASK
 (
uöt32_t
)(
DMA_Såóm1_IT_MASK
 | (uöt32_t)0x20000000)

	)

152 
	#DMA_Såóm6_IT_MASK
 (
uöt32_t
)(
DMA_Såóm2_IT_MASK
 | (uöt32_t)0x20000000)

	)

153 
	#DMA_Såóm7_IT_MASK
 (
uöt32_t
)(
DMA_Såóm3_IT_MASK
 | (uöt32_t)0x20000000)

	)

154 
	#TRANSFER_IT_MASK
 (
uöt32_t
)0x0F3C0F3C

	)

155 
	#HIGH_ISR_MASK
 (
uöt32_t
)0x20000000

	)

156 
	#RESERVED_MASK
 (
uöt32_t
)0x0F7D0F7D

	)

196 
	$DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

199 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

202 
DMAy_Såómx
->
CR
 &~((
uöt32_t
)
DMA_SxCR_EN
);

205 
DMAy_Såómx
->
CR
 = 0;

208 
DMAy_Såómx
->
NDTR
 = 0;

211 
DMAy_Såómx
->
PAR
 = 0;

214 
DMAy_Såómx
->
M0AR
 = 0;

217 
DMAy_Såómx
->
M1AR
 = 0;

220 
DMAy_Såómx
->
FCR
 = (
uöt32_t
)0x00000021;

223 i‡(
DMAy_Såómx
 =
DMA1_Såóm0
)

226 
DMA1
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

228 i‡(
DMAy_Såómx
 =
DMA1_Såóm1
)

231 
DMA1
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

233 i‡(
DMAy_Såómx
 =
DMA1_Såóm2
)

236 
DMA1
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

238 i‡(
DMAy_Såómx
 =
DMA1_Såóm3
)

241 
DMA1
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

243 i‡(
DMAy_Såómx
 =
DMA1_Såóm4
)

246 
DMA1
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

248 i‡(
DMAy_Såómx
 =
DMA1_Såóm5
)

251 
DMA1
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

253 i‡(
DMAy_Såómx
 =
DMA1_Såóm6
)

256 
DMA1
->
HIFCR
 = (
uöt32_t
)
DMA_Såóm6_IT_MASK
;

258 i‡(
DMAy_Såómx
 =
DMA1_Såóm7
)

261 
DMA1
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

263 i‡(
DMAy_Såómx
 =
DMA2_Såóm0
)

266 
DMA2
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

268 i‡(
DMAy_Såómx
 =
DMA2_Såóm1
)

271 
DMA2
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

273 i‡(
DMAy_Såómx
 =
DMA2_Såóm2
)

276 
DMA2
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

278 i‡(
DMAy_Såómx
 =
DMA2_Såóm3
)

281 
DMA2
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

283 i‡(
DMAy_Såómx
 =
DMA2_Såóm4
)

286 
DMA2
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

288 i‡(
DMAy_Såómx
 =
DMA2_Såóm5
)

291 
DMA2
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

293 i‡(
DMAy_Såómx
 =
DMA2_Såóm6
)

296 
DMA2
->
HIFCR
 = 
DMA_Såóm6_IT_MASK
;

300 i‡(
DMAy_Såómx
 =
DMA2_Såóm7
)

303 
DMA2
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

306 
	}
}

319 
	$DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

321 
uöt32_t
 
tm¥eg
 = 0;

324 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

325 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
DMA_InôSåu˘
->
DMA_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
DMA_InôSåu˘
->
DMA_DIR
));

327 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

328 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

329 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

330 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

331 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

332 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

333 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

334 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
DMA_InôSåu˘
->
DMA_FIFOMode
));

335 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
));

336 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
DMA_InôSåu˘
->
DMA_Mem‹yBur°
));

337 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
));

341 
tm¥eg
 = 
DMAy_Såómx
->
CR
;

344 
tm¥eg
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

345 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

346 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

347 
DMA_SxCR_DIR
));

360 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_Ch™√l
 | DMA_InôSåu˘->
DMA_DIR
 |

361 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

362 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

363 
DMA_InôSåu˘
->
DMA_Mode
 | DMA_InôSåu˘->
DMA_Pri‹ôy
 |

364 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 | DMA_InôSåu˘->
DMA_PîùhîÆBur°
;

367 
DMAy_Såómx
->
CR
 = 
tm¥eg
;

371 
tm¥eg
 = 
DMAy_Såómx
->
FCR
;

374 
tm¥eg
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

379 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_FIFOMode
 | DMA_InôSåu˘->
DMA_FIFOThªshﬁd
;

382 
DMAy_Såómx
->
FCR
 = 
tm¥eg
;

386 
DMAy_Såómx
->
NDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

390 
DMAy_Såómx
->
PAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

394 
DMAy_Såómx
->
M0AR
 = 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
;

395 
	}
}

403 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

407 
DMA_InôSåu˘
->
DMA_Ch™√l
 = 0;

410 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

413 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
 = 0;

416 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

419 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

422 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

425 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

428 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

431 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

434 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

437 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

440 
DMA_InôSåu˘
->
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

443 
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
;

446 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

449 
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

450 
	}
}

478 
	$DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

484 i‡(
NewSèã
 !
DISABLE
)

487 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_EN
;

492 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_EN
;

494 
	}
}

514 
	$DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
)

517 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

518 
	`as£π_∑øm
(
	`IS_DMA_PINCOS_SIZE
(
DMA_Pöcos
));

521 if(
DMA_Pöcos
 !
DMA_PINCOS_Psize
)

524 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PINCOS
;

529 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PINCOS
;

531 
	}
}

550 
	$DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
)

553 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

554 
	`as£π_∑øm
(
	`IS_DMA_FLOW_CTRL
(
DMA_FlowCål
));

557 if(
DMA_FlowCål
 !
DMA_FlowCål_Mem‹y
)

560 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PFCTRL
;

565 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PFCTRL
;

567 
	}
}

632 
	$DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
)

635 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

638 
DMAy_Såómx
->
NDTR
 = (
uöt16_t
)
Cou¡î
;

639 
	}
}

647 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

650 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

653  ((
uöt16_t
)(
DMAy_Såómx
->
NDTR
));

654 
	}
}

730 
	$DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

731 
uöt32_t
 
DMA_CuºítMem‹y
)

734 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

735 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_CuºítMem‹y
));

737 i‡(
DMA_CuºítMem‹y
 !
DMA_Mem‹y_0
)

740 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_SxCR_CT
);

745 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_SxCR_CT
);

749 
DMAy_Såómx
->
M1AR
 = 
Mem‹y1Ba£Addr
;

750 
	}
}

761 
	$DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

764 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

765 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

776 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_DBM
;

778 
	}
}

802 
	$DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

803 
uöt32_t
 
DMA_Mem‹yT¨gë
)

806 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

807 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_Mem‹yT¨gë
));

810 i‡(
DMA_Mem‹yT¨gë
 !
DMA_Mem‹y_0
)

813 
DMAy_Såómx
->
M1AR
 = 
Mem‹yBa£Addr
;

818 
DMAy_Såómx
->
M0AR
 = 
Mem‹yBa£Addr
;

820 
	}
}

828 
uöt32_t
 
	$DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

830 
uöt32_t
 
tmp
 = 0;

833 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

836 i‡((
DMAy_Såómx
->
CR
 & 
DMA_SxCR_CT
) != 0)

839 
tmp
 = 1;

844 
tmp
 = 0;

846  
tmp
;

847 
	}
}

943 
Fun˘i⁄ÆSèã
 
	$DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

945 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

948 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

950 i‡((
DMAy_Såómx
->
CR
 & (
uöt32_t
)
DMA_SxCR_EN
) != 0)

953 
°©e
 = 
ENABLE
;

959 
°©e
 = 
DISABLE
;

961  
°©e
;

962 
	}
}

977 
uöt32_t
 
	$DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

979 
uöt32_t
 
tm¥eg
 = 0;

982 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

985 
tm¥eg
 = (
uöt32_t
)((
DMAy_Såómx
->
FCR
 & 
DMA_SxFCR_FS
));

987  
tm¥eg
;

988 
	}
}

1004 
FœgSètus
 
	$DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1006 
FœgSètus
 
bô°©us
 = 
RESET
;

1007 
DMA_Ty≥Def
* 
DMAy
;

1008 
uöt32_t
 
tm¥eg
 = 0;

1011 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1012 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

1015 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1018 
DMAy
 = 
DMA1
;

1023 
DMAy
 = 
DMA2
;

1027 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1030 
tm¥eg
 = 
DMAy
->
HISR
;

1035 
tm¥eg
 = 
DMAy
->
LISR
;

1039 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1042 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

1045 
bô°©us
 = 
SET
;

1050 
bô°©us
 = 
RESET
;

1054  
bô°©us
;

1055 
	}
}

1071 
	$DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1073 
DMA_Ty≥Def
* 
DMAy
;

1076 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1077 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

1080 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1083 
DMAy
 = 
DMA1
;

1088 
DMAy
 = 
DMA2
;

1092 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1095 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1100 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1102 
	}
}

1118 
	$DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1121 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1122 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

1123 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1126 i‡((
DMA_IT
 & 
DMA_IT_FE
) != 0)

1128 i‡(
NewSèã
 !
DISABLE
)

1131 
DMAy_Såómx
->
FCR
 |(
uöt32_t
)
DMA_IT_FE
;

1136 
DMAy_Såómx
->
FCR
 &~(
uöt32_t
)
DMA_IT_FE
;

1141 i‡(
DMA_IT
 !
DMA_IT_FE
)

1143 i‡(
NewSèã
 !
DISABLE
)

1146 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1151 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1154 
	}
}

1170 
ITSètus
 
	$DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1172 
ITSètus
 
bô°©us
 = 
RESET
;

1173 
DMA_Ty≥Def
* 
DMAy
;

1174 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

1177 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1178 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

1181 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1184 
DMAy
 = 
DMA1
;

1189 
DMAy
 = 
DMA2
;

1193 i‡((
DMA_IT
 & 
TRANSFER_IT_MASK
Ë!(
uöt32_t
)
RESET
)

1196 
tm¥eg
 = (
uöt32_t
)((
DMA_IT
 >> 11Ë& 
TRANSFER_IT_ENABLE_MASK
);

1199 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
CR
 & 
tm¥eg
);

1204 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
FCR
 & 
DMA_IT_FE
);

1208 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1211 
tm¥eg
 = 
DMAy
->
HISR
 ;

1216 
tm¥eg
 = 
DMAy
->
LISR
 ;

1220 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1223 i‡(((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1226 
bô°©us
 = 
SET
;

1231 
bô°©us
 = 
RESET
;

1235  
bô°©us
;

1236 
	}
}

1252 
	$DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1254 
DMA_Ty≥Def
* 
DMAy
;

1257 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1258 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

1261 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1264 
DMAy
 = 
DMA1
;

1269 
DMAy
 = 
DMA2
;

1273 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1276 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1281 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1283 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_exti.c

67 
	~"°m32f4xx_exti.h
"

81 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

109 
	$EXTI_DeInô
()

111 
EXTI
->
IMR
 = 0x00000000;

112 
EXTI
->
EMR
 = 0x00000000;

113 
EXTI
->
RTSR
 = 0x00000000;

114 
EXTI
->
FTSR
 = 0x00000000;

115 
EXTI
->
PR
 = 0x007FFFFF;

116 
	}
}

125 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

127 
uöt32_t
 
tmp
 = 0;

130 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

131 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

132 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

133 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

135 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

140 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

141 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

145 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

148 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

152 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

155 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

156 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

160 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

161 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

163 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

168 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

171 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

173 
	}
}

181 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

183 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

184 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

185 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

186 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

187 
	}
}

196 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

199 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

201 
EXTI
->
SWIER
 |
EXTI_Löe
;

202 
	}
}

226 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

228 
FœgSètus
 
bô°©us
 = 
RESET
;

230 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

232 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

263 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

265 
FœgSètus
 
bô°©us
 = 
RESET
;

267 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

269 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

271 
bô°©us
 = 
SET
;

275 
bô°©us
 = 
RESET
;

277  
bô°©us
;

279 
	}
}

287 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

290 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

292 
EXTI
->
PR
 = 
EXTI_Löe
;

293 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_flash.c

72 
	~"°m32f4xx_Êash.h
"

85 
	#SECTOR_MASK
 ((
uöt32_t
)0xFFFFFF07)

	)

277 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

280 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

283 *(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)
FLASH_L©ícy
;

284 
	}
}

292 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

298 if(
NewSèã
 !
DISABLE
)

300 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

304 
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
);

306 
	}
}

314 
	$FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

319 if(
NewSèã
 !
DISABLE
)

321 
FLASH
->
ACR
 |
FLASH_ACR_ICEN
;

325 
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
);

327 
	}
}

335 
	$FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

340 if(
NewSèã
 !
DISABLE
)

342 
FLASH
->
ACR
 |
FLASH_ACR_DCEN
;

346 
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
);

348 
	}
}

356 
	$FLASH_In°ru˘i⁄CacheRe£t
()

358 
FLASH
->
ACR
 |
FLASH_ACR_ICRST
;

359 
	}
}

367 
	$FLASH_D©aCacheRe£t
()

369 
FLASH
->
ACR
 |
FLASH_ACR_DCRST
;

370 
	}
}

414 
	$FLASH_U∆ock
()

416 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

419 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

420 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

422 
	}
}

429 
	$FLASH_Lock
()

432 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

433 
	}
}

469 
FLASH_Sètus
 
	$FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

471 
uöt32_t
 
tmp_psize
 = 0x0;

472 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

475 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
FLASH_Se˘‹
));

476 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

478 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

480 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

482 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

484 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

486 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

488 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

492 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

495 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

497 if(
°©us
 =
FLASH_COMPLETE
)

500 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

501 
FLASH
->
CR
 |
tmp_psize
;

502 
FLASH
->
CR
 &
SECTOR_MASK
;

503 
FLASH
->
CR
 |
FLASH_CR_SER
 | 
FLASH_Se˘‹
;

504 
FLASH
->
CR
 |
FLASH_CR_STRT
;

507 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

510 
FLASH
->
CR
 &(~
FLASH_CR_SER
);

511 
FLASH
->
CR
 &
SECTOR_MASK
;

514  
°©us
;

515 
	}
}

537 
FLASH_Sètus
 
	$FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

539 
uöt32_t
 
tmp_psize
 = 0x0;

540 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

544 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

546 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

548 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

550 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

552 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

554 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

556 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

560 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

562 if(
°©us
 =
FLASH_COMPLETE
)

565 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

566 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

567 
FLASH
->
CR
 |
tmp_psize
;

568 
FLASH
->
CR
 |(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

569 
FLASH
->
CR
 |
FLASH_CR_STRT
;

572 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

575 
FLASH
->
CR
 &~(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

578 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

579 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

580 
FLASH
->
CR
 |
tmp_psize
;

581 
FLASH
->
CR
 |
FLASH_CR_MER
;

582 
FLASH
->
CR
 |
FLASH_CR_STRT
;

585 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

588 
FLASH
->
CR
 &(~
FLASH_CR_MER
);

593  
°©us
;

594 
	}
}

618 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

620 
uöt32_t
 
tmp_psize
 = 0x0;

621 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

624 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

625 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

627 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

629 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

631 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

633 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

635 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

637 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

641 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

643 if(
°©us
 =
FLASH_COMPLETE
)

646 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

647 
FLASH
->
CR
 |
tmp_psize
;

648 
FLASH
->
CR
 |
FLASH_CR_MER1
;

649 
FLASH
->
CR
 |
FLASH_CR_STRT
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

655 
FLASH
->
CR
 &(~
FLASH_CR_MER1
);

659  
°©us
;

660 
	}
}

685 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

687 
uöt32_t
 
tmp_psize
 = 0x0;

688 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

691 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

692 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

694 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

696 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

698 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

700 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

702 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

704 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

708 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

710 if(
°©us
 =
FLASH_COMPLETE
)

713 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

714 
FLASH
->
CR
 |
tmp_psize
;

715 
FLASH
->
CR
 |
FLASH_CR_MER2
;

716 
FLASH
->
CR
 |
FLASH_CR_STRT
;

719 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

722 
FLASH
->
CR
 &(~
FLASH_CR_MER2
);

726  
°©us
;

727 
	}
}

742 
FLASH_Sètus
 
	$FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

744 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

747 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

750 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

752 if(
°©us
 =
FLASH_COMPLETE
)

755 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

756 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

757 
FLASH
->
CR
 |
FLASH_CR_PG
;

759 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

762 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

765 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

768  
°©us
;

769 
	}
}

785 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

787 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

790 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

793 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

795 if(
°©us
 =
FLASH_COMPLETE
)

798 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

799 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

800 
FLASH
->
CR
 |
FLASH_CR_PG
;

802 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

805 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

808 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

811  
°©us
;

812 
	}
}

827 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

829 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

832 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

835 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

837 if(
°©us
 =
FLASH_COMPLETE
)

840 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

841 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

842 
FLASH
->
CR
 |
FLASH_CR_PG
;

844 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

847 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

850 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

853  
°©us
;

854 
	}
}

869 
FLASH_Sètus
 
	$FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

871 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

874 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

877 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

879 if(
°©us
 =
FLASH_COMPLETE
)

882 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

883 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

884 
FLASH
->
CR
 |
FLASH_CR_PG
;

886 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

889 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

892 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

896  
°©us
;

897 
	}
}

968 
	$FLASH_OB_U∆ock
()

970 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

973 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

974 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

976 
	}
}

983 
	$FLASH_OB_Lock
()

986 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

987 
	}
}

1006 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1008 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1011 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1012 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1014 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1016 if(
°©us
 =
FLASH_COMPLETE
)

1018 if(
NewSèã
 !
DISABLE
)

1020 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_WRP
);

1024 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1027 
	}
}

1048 
	$FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1050 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1054 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1056 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1058 if(
°©us
 =
FLASH_COMPLETE
)

1060 if(
NewSèã
 !
DISABLE
)

1062 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_WRP
);

1066 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1069 
	}
}

1098 
	$FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
)

1100 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1103 
	`as£π_∑øm
(
	`IS_OB_PCROP_SELECT
(
OB_PcROP
));

1106 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE3_ADDRESS
) & (uint8_t)0x7F);

1108 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE3_ADDRESS
 = (uöt8_t)(
OB_PcROP
 | 
›ti⁄tmp
);

1110 
	}
}

1128 
	$FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1130 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1133 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1134 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1136 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1138 if(
°©us
 =
FLASH_COMPLETE
)

1140 if(
NewSèã
 !
DISABLE
)

1142 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1146 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1149 
	}
}

1165 
	$FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1167 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1170 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1171 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1173 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1175 if(
°©us
 =
FLASH_COMPLETE
)

1177 if(
NewSèã
 !
DISABLE
)

1179 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1183 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1186 
	}
}

1201 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

1203 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1206 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

1208 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1210 if(
°©us
 =
FLASH_COMPLETE
)

1212 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
OB_RDP
;

1215 
	}
}

1233 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

1235 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1236 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1239 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1240 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1241 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1244 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1246 if(
°©us
 =
FLASH_COMPLETE
)

1248 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1250 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x1F);

1253 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

1255 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0F);

1259 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
OB_IWDG
 | (uöt8_t)(
OB_STDBY
 | (uöt8_t)(
OB_STOP
 | ((uöt8_t)
›ti⁄tmp
)));

1261 
	}
}

1274 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
)

1277 
	`as£π_∑øm
(
	`IS_OB_BOOT
(
OB_BOOT
));

1280 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BFB2
);

1281 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOOT
;

1283 
	}
}

1295 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

1298 
	`as£π_∑øm
(
	`IS_OB_BOR
(
OB_BOR
));

1301 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

1302 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOR
;

1304 
	}
}

1312 
FLASH_Sètus
 
	$FLASH_OB_Launch
()

1314 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1317 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

1320 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1322  
°©us
;

1323 
	}
}

1331 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1334  (
uöt8_t
)(
FLASH
->
OPTCR
 >> 5);

1335 
	}
}

1342 
uöt16_t
 
	$FLASH_OB_GëWRP
()

1345  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1346 
	}
}

1356 
uöt16_t
 
	$FLASH_OB_GëWRP1
()

1359  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1360 
	}
}

1370 
uöt16_t
 
	$FLASH_OB_GëPCROP
()

1373  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1374 
	}
}

1384 
uöt16_t
 
	$FLASH_OB_GëPCROP1
()

1387  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1388 
	}
}

1397 
FœgSètus
 
	$FLASH_OB_GëRDP
()

1399 
FœgSètus
 
ªad°©us
 = 
RESET
;

1401 i‡((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë!(uöt8_t)
OB_RDP_Levñ_0
))

1403 
ªad°©us
 = 
SET
;

1407 
ªad°©us
 = 
RESET
;

1409  
ªad°©us
;

1410 
	}
}

1421 
uöt8_t
 
	$FLASH_OB_GëBOR
()

1424  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

1425 
	}
}

1450 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1453 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1456 if(
NewSèã
 !
DISABLE
)

1459 
FLASH
->
CR
 |
FLASH_IT
;

1464 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1466 
	}
}

1482 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1484 
FœgSètus
 
bô°©us
 = 
RESET
;

1486 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

1488 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1490 
bô°©us
 = 
SET
;

1494 
bô°©us
 = 
RESET
;

1497  
bô°©us
;

1498 
	}
}

1513 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1516 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

1519 
FLASH
->
SR
 = 
FLASH_FLAG
;

1520 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1530 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1532 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1534 
Êash°©us
 = 
FLASH_BUSY
;

1538 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPERR
Ë!(
uöt32_t
)0x00)

1540 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1544 if((
FLASH
->
SR
 & 
FLASH_FLAG_RDERR
Ë!(
uöt32_t
)0x00)

1546 
Êash°©us
 = 
FLASH_ERROR_RD
;

1550 if((
FLASH
->
SR
 & (
uöt32_t
)0xEF) != (uint32_t)0x00)

1552 
Êash°©us
 = 
FLASH_ERROR_PROGRAM
;

1556 if((
FLASH
->
SR
 & 
FLASH_FLAG_OPERR
Ë!(
uöt32_t
)0x00)

1558 
Êash°©us
 = 
FLASH_ERROR_OPERATION
;

1562 
Êash°©us
 = 
FLASH_COMPLETE
;

1569  
Êash°©us
;

1570 
	}
}

1578 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
()

1580 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1583 
°©us
 = 
	`FLASH_GëSètus
();

1588 
°©us
 =
FLASH_BUSY
)

1590 
°©us
 = 
	`FLASH_GëSètus
();

1593  
°©us
;

1594 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_gpio.c

84 
	~"°m32f4xx_gpio.h
"

85 
	~"°m32f4xx_rcc.h
"

127 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

130 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

132 i‡(
GPIOx
 =
GPIOA
)

134 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

135 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOB
)

139 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

140 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
DISABLE
);

142 i‡(
GPIOx
 =
GPIOC
)

144 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

145 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
DISABLE
);

147 i‡(
GPIOx
 =
GPIOD
)

149 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

150 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
DISABLE
);

152 i‡(
GPIOx
 =
GPIOE
)

154 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

155 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
DISABLE
);

157 i‡(
GPIOx
 =
GPIOF
)

159 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
ENABLE
);

160 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
DISABLE
);

162 i‡(
GPIOx
 =
GPIOG
)

164 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

165 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
DISABLE
);

167 i‡(
GPIOx
 =
GPIOH
)

169 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
ENABLE
);

170 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
DISABLE
);

173 i‡(
GPIOx
 =
GPIOI
)

175 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
ENABLE
);

176 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
DISABLE
);

178 i‡(
GPIOx
 =
GPIOJ
)

180 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
ENABLE
);

181 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
DISABLE
);

185 i‡(
GPIOx
 =
GPIOK
)

187 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
ENABLE
);

188 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
DISABLE
);

191 
	}
}

202 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

204 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

207 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

208 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

209 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

210 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

214 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

216 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

218 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

220 i‡(
cuºíçö
 =
pos
)

222 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

223 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

225 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

228 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

231 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

232 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

235 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

238 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

239 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

243 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

244 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

247 
	}
}

254 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

257 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

258 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

259 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

260 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

261 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

262 
	}
}

277 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

279 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

282 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

283 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

285 
tmp
 |
GPIO_Pö
;

287 
GPIOx
->
LCKR
 = 
tmp
;

289 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

291 
GPIOx
->
LCKR
 = 
tmp
;

293 
tmp
 = 
GPIOx
->
LCKR
;

295 
tmp
 = 
GPIOx
->
LCKR
;

296 
	}
}

323 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

325 
uöt8_t
 
bô°©us
 = 0x00;

328 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

329 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

331 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

333 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

337 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

339  
bô°©us
;

340 
	}
}

349 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

352 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

354  ((
uöt16_t
)
GPIOx
->
IDR
);

355 
	}
}

366 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

368 
uöt8_t
 
bô°©us
 = 0x00;

371 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

372 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

374 i‡(((
GPIOx
->
ODR
Ë& 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

376 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

380 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

382  
bô°©us
;

383 
	}
}

392 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

395 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397  ((
uöt16_t
)
GPIOx
->
ODR
);

398 
	}
}

412 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

415 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

416 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

418 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

419 
	}
}

433 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

440 
	}
}

455 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

458 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

459 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

460 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

462 i‡(
BôVÆ
 !
Bô_RESET
)

464 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

468 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

470 
	}
}

480 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

483 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

485 
GPIOx
->
ODR
 = 
P‹tVÆ
;

486 
	}
}

496 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

499 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

501 
GPIOx
->
ODR
 ^
GPIO_Pö
;

502 
	}
}

579 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

581 
uöt32_t
 
ãmp
 = 0x00;

582 
uöt32_t
 
ãmp_2
 = 0x00;

585 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

586 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

587 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

589 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

590 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

591 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

592 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

593 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_pwr.c

38 
	~"°m32f4xx_pwr.h
"

39 
	~"°m32f4xx_rcc.h
"

53 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

58 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

59 
	#DBP_BôNumbî
 0x08

	)

60 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

63 
	#PVDE_BôNumbî
 0x04

	)

64 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

67 
	#FPDS_BôNumbî
 0x09

	)

68 
	#CR_FPDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FPDS_BôNumbî
 * 4))

	)

71 
	#PMODE_BôNumbî
 0x0E

	)

72 
	#CR_PMODE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PMODE_BôNumbî
 * 4))

	)

75 
	#ODEN_BôNumbî
 0x10

	)

76 
	#CR_ODEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODEN_BôNumbî
 * 4))

	)

79 
	#ODSWEN_BôNumbî
 0x11

	)

80 
	#CR_ODSWEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODSWEN_BôNumbî
 * 4))

	)

83 
	#MRLVDS_BôNumbî
 0x0B

	)

84 
	#CR_MRLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MRLVDS_BôNumbî
 * 4))

	)

87 
	#LPLVDS_BôNumbî
 0x0A

	)

88 
	#CR_LPLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LPLVDS_BôNumbî
 * 4))

	)

93 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

94 
	#EWUP_BôNumbî
 0x08

	)

95 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

98 
	#BRE_BôNumbî
 0x09

	)

99 
	#CSR_BRE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
BRE_BôNumbî
 * 4))

	)

104 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFF3FC)

	)

105 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

106 
	#CR_VOS_MASK
 ((
uöt32_t
)0xFFFF3FFF)

	)

142 
	$PWR_DeInô
()

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

146 
	}
}

157 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

162 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

163 
	}
}

205 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

207 
uöt32_t
 
tm¥eg
 = 0;

210 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

212 
tm¥eg
 = 
PWR
->
CR
;

215 
tm¥eg
 &
CR_PLS_MASK
;

218 
tm¥eg
 |
PWR_PVDLevñ
;

221 
PWR
->
CR
 = 
tm¥eg
;

222 
	}
}

230 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

233 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

235 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

236 
	}
}

264 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

267 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

269 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

270 
	}
}

361 
	$PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

366 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
NewSèã
;

367 
	}
}

383 
	$PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
)

385 
uöt32_t
 
tm¥eg
 = 0;

388 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_VOLTAGE
(
PWR_Reguœt‹_Vﬁège
));

390 
tm¥eg
 = 
PWR
->
CR
;

393 
tm¥eg
 &
CR_VOS_MASK
;

396 
tm¥eg
 |
PWR_Reguœt‹_Vﬁège
;

399 
PWR
->
CR
 = 
tm¥eg
;

400 
	}
}

418 
	$PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

424 *(
__IO
 
uöt32_t
 *Ë
CR_ODEN_BB
 = (uöt32_t)
NewSèã
;

425 
	}
}

436 
	$PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

439 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

442 *(
__IO
 
uöt32_t
 *Ë
CR_ODSWEN_BB
 = (uöt32_t)
NewSèã
;

443 
	}
}

463 
	$PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

466 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

468 i‡(
NewSèã
 !
DISABLE
)

471 
PWR
->
CR
 |(
uöt32_t
)
PWR_CR_UDEN
;

476 
PWR
->
CR
 &(
uöt32_t
)(~
PWR_CR_UDEN
);

478 
	}
}

489 
	$PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

496 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
ENABLE
;

500 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
DISABLE
;

502 
	}
}

513 
	$PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

516 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

518 i‡(
NewSèã
 !
DISABLE
)

520 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
ENABLE
;

524 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
DISABLE
;

526 
	}
}

555 
	$PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

560 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
NewSèã
;

561 
	}
}

701 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

703 
uöt32_t
 
tm¥eg
 = 0;

706 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

707 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

710 
tm¥eg
 = 
PWR
->
CR
;

712 
tm¥eg
 &
CR_DS_MASK
;

715 
tm¥eg
 |
PWR_Reguœt‹
;

718 
PWR
->
CR
 = 
tm¥eg
;

721 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

724 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

727 
	`__WFI
();

732 
	`__WFE
();

735 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

736 
	}
}

765 
	$PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

767 
uöt32_t
 
tm¥eg
 = 0;

770 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_UNDERDRIVE
(
PWR_Reguœt‹
));

771 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

774 
tm¥eg
 = 
PWR
->
CR
;

776 
tm¥eg
 &
CR_DS_MASK
;

779 
tm¥eg
 |
PWR_Reguœt‹
;

782 
PWR
->
CR
 = 
tm¥eg
;

785 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

788 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

791 
	`__WFI
();

796 
	`__WFE
();

799 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

800 
	}
}

814 
	$PWR_E¡îSTANDBYMode
()

817 
PWR
->
CR
 |
PWR_CR_PDDS
;

820 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

823 #i‡
	`deföed
 ( 
__CC_ARM
 )

824 
	`__f‹˚_°‹es
();

827 
	`__WFI
();

828 
	}
}

874 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

876 
FœgSètus
 
bô°©us
 = 
RESET
;

879 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

881 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

883 
bô°©us
 = 
SET
;

887 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

902 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

905 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

907 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

908 i‡(
PWR_FLAG
 !
PWR_FLAG_UDRDY
)

910 
PWR
->
CR
 |
PWR_FLAG
 << 2;

914 
PWR
->
CSR
 |
PWR_FLAG_UDRDY
;

918 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

919 
PWR
->
CR
 |
PWR_FLAG
 << 2;

921 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_rcc.c

59 
	~"°m32f4xx_rcc.h
"

73 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

76 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

77 
	#HSION_BôNumbî
 0x00

	)

78 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

80 
	#CSSON_BôNumbî
 0x13

	)

81 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

83 
	#PLLON_BôNumbî
 0x18

	)

84 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

86 
	#PLLI2SON_BôNumbî
 0x1A

	)

87 
	#CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLI2SON_BôNumbî
 * 4))

	)

90 
	#PLLSAION_BôNumbî
 0x1C

	)

91 
	#CR_PLLSAION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLSAION_BôNumbî
 * 4))

	)

95 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

96 
	#I2SSRC_BôNumbî
 0x17

	)

97 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

101 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

102 
	#RTCEN_BôNumbî
 0x0F

	)

103 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

105 
	#BDRST_BôNumbî
 0x10

	)

106 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

110 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

111 
	#LSION_BôNumbî
 0x00

	)

112 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

116 
	#DCKCFGR_OFFSET
 (
RCC_OFFSET
 + 0x8C)

	)

117 
	#TIMPRE_BôNumbî
 0x18

	)

118 
	#DCKCFGR_TIMPRE_BB
 (
PERIPH_BB_BASE
 + (
DCKCFGR_OFFSET
 * 32Ë+ (
TIMPRE_BôNumbî
 * 4))

	)

121 
	#CFGR_MCO2_RESET_MASK
 ((
uöt32_t
)0x07FFFFFF)

	)

122 
	#CFGR_MCO1_RESET_MASK
 ((
uöt32_t
)0xF89FFFFF)

	)

125 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

128 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

131 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

134 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

137 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

141 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

213 
	$RCC_DeInô
()

216 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

219 
RCC
->
CFGR
 = 0x00000000;

222 
RCC
->
CR
 &(
uöt32_t
)0xEAF6FFFF;

225 
RCC
->
PLLCFGR
 = 0x24003010;

228 
RCC
->
PLLI2SCFGR
 = 0x20003000;

231 
RCC
->
PLLSAICFGR
 = 0x24003000;

234 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

237 
RCC
->
CIR
 = 0x00000000;

240 
RCC
->
DCKCFGR
 = 0x00000000;

241 
	}
}

263 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

266 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

269 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

272 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

273 
	}
}

287 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

289 
__IO
 
uöt32_t
 
°¨tupcou¡î
 = 0;

290 
Eº‹Sètus
 
°©us
 = 
ERROR
;

291 
FœgSètus
 
h£°©us
 = 
RESET
;

295 
h£°©us
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

296 
°¨tupcou¡î
++;

297 } (
°¨tupcou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
h£°©us
 =
RESET
));

299 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

301 
°©us
 = 
SUCCESS
;

305 
°©us
 = 
ERROR
;

307  (
°©us
);

308 
	}
}

318 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

320 
uöt32_t
 
tm¥eg
 = 0;

322 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

324 
tm¥eg
 = 
RCC
->
CR
;

327 
tm¥eg
 &~
RCC_CR_HSITRIM
;

330 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

333 
RCC
->
CR
 = 
tm¥eg
;

334 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

360 
	}
}

379 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

382 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

386 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

389 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

392 
RCC_LSE
)

394 
RCC_LSE_ON
:

396 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

398 
RCC_LSE_By∑ss
:

400 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

405 
	}
}

419 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

424 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

425 
	}
}

462 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
)

465 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

466 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

467 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

468 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

469 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

471 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

472 (
PLLQ
 << 24);

473 
	}
}

485 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

488 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

489 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

490 
	}
}

492 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
)

515 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
)

518 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

519 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

521 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28);

522 
	}
}

524 #ñi‡
deföed
 (
STM32F411xE
)

552 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
)

555 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

556 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PLLI2SM
));

557 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

559 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28Ë| 
PLLI2SM
;

560 
	}
}

562 #ñi‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

588 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
)

591 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

592 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PLLI2SQ
));

593 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

595 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SQ
 << 24Ë| (
PLLI2SR
 << 28);

596 
	}
}

606 
	$RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 *(
__IO
 
uöt32_t
 *Ë
CR_PLLI2SON_BB
 = (uöt32_t)
NewSèã
;

611 
	}
}

635 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
)

638 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

639 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PLLSAIR
));

641 
RCC
->
PLLSAICFGR
 = (
PLLSAIN
 << 6Ë| (
PLLSAIQ
 << 24Ë| (
PLLSAIR
 << 28);

642 
	}
}

653 
	$RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

656 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

657 *(
__IO
 
uöt32_t
 *Ë
CR_PLLSAION_BB
 = (uöt32_t)
NewSèã
;

658 
	}
}

671 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

674 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

675 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

676 
	}
}

696 
	$RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
)

698 
uöt32_t
 
tm¥eg
 = 0;

701 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCO1Sour˚
));

702 
	`as£π_∑øm
(
	`IS_RCC_MCO1DIV
(
RCC_MCO1Div
));

704 
tm¥eg
 = 
RCC
->
CFGR
;

707 
tm¥eg
 &
CFGR_MCO1_RESET_MASK
;

710 
tm¥eg
 |
RCC_MCO1Sour˚
 | 
RCC_MCO1Div
;

713 
RCC
->
CFGR
 = 
tm¥eg
;

714 
	}
}

734 
	$RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
)

736 
uöt32_t
 
tm¥eg
 = 0;

739 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCO2Sour˚
));

740 
	`as£π_∑øm
(
	`IS_RCC_MCO2DIV
(
RCC_MCO2Div
));

742 
tm¥eg
 = 
RCC
->
CFGR
;

745 
tm¥eg
 &
CFGR_MCO2_RESET_MASK
;

748 
tm¥eg
 |
RCC_MCO2Sour˚
 | 
RCC_MCO2Div
;

751 
RCC
->
CFGR
 = 
tm¥eg
;

752 
	}
}

929 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

931 
uöt32_t
 
tm¥eg
 = 0;

934 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

936 
tm¥eg
 = 
RCC
->
CFGR
;

939 
tm¥eg
 &~
RCC_CFGR_SW
;

942 
tm¥eg
 |
RCC_SYSCLKSour˚
;

945 
RCC
->
CFGR
 = 
tm¥eg
;

946 
	}
}

957 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

959  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

960 
	}
}

982 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

984 
uöt32_t
 
tm¥eg
 = 0;

987 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

989 
tm¥eg
 = 
RCC
->
CFGR
;

992 
tm¥eg
 &~
RCC_CFGR_HPRE
;

995 
tm¥eg
 |
RCC_SYSCLK
;

998 
RCC
->
CFGR
 = 
tm¥eg
;

999 
	}
}

1014 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1016 
uöt32_t
 
tm¥eg
 = 0;

1019 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1021 
tm¥eg
 = 
RCC
->
CFGR
;

1024 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

1027 
tm¥eg
 |
RCC_HCLK
;

1030 
RCC
->
CFGR
 = 
tm¥eg
;

1031 
	}
}

1045 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1047 
uöt32_t
 
tm¥eg
 = 0;

1050 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1052 
tm¥eg
 = 
RCC
->
CFGR
;

1055 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

1058 
tm¥eg
 |
RCC_HCLK
 << 3;

1061 
RCC
->
CFGR
 = 
tm¥eg
;

1062 
	}
}

1097 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

1099 
uöt32_t
 
tmp
 = 0, 
¥esc
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

1102 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

1104 
tmp
)

1107 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1110 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

1117 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

1118 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1120 i‡(
∂lsour˚
 != 0)

1123 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1128 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1131 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

1132 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Õ
;

1135 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1141 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

1142 
tmp
 =Åmp >> 4;

1143 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1145 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1148 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

1149 
tmp
 =Åmp >> 10;

1150 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1152 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1155 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

1156 
tmp
 =Åmp >> 13;

1157 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1159 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1160 
	}
}

1222 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

1224 
uöt32_t
 
tm¥eg
 = 0;

1227 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

1229 i‡((
RCC_RTCCLKSour˚
 & 0x00000300) == 0x00000300)

1231 
tm¥eg
 = 
RCC
->
CFGR
;

1234 
tm¥eg
 &~
RCC_CFGR_RTCPRE
;

1237 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 0xFFFFCFF);

1240 
RCC
->
CFGR
 = 
tm¥eg
;

1244 
RCC
->
BDCR
 |(
RCC_RTCCLKSour˚
 & 0x00000FFF);

1245 
	}
}

1254 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1257 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1259 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1260 
	}
}

1271 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1274 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1275 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1276 
	}
}

1288 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1291 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1293 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1294 
	}
}

1309 
	$RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
)

1311 
uöt32_t
 
tm¥eg
 = 0;

1314 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
RCC_PLLI2SDivQ
));

1316 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1319 
tm¥eg
 &~(
RCC_DCKCFGR_PLLI2SDIVQ
);

1322 
tm¥eg
 |(
RCC_PLLI2SDivQ
 - 1);

1325 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1326 
	}
}

1341 
	$RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
)

1343 
uöt32_t
 
tm¥eg
 = 0;

1346 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
RCC_PLLSAIDivQ
));

1348 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1351 
tm¥eg
 &~(
RCC_DCKCFGR_PLLSAIDIVQ
);

1354 
tm¥eg
 |((
RCC_PLLSAIDivQ
 - 1) << 8);

1357 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1358 
	}
}

1377 
	$RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
)

1379 
uöt32_t
 
tm¥eg
 = 0;

1382 
	`as£π_∑øm
(
	`IS_RCC_SAIACLK_SOURCE
(
RCC_SAIBlockACLKSour˚
));

1384 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1387 
tm¥eg
 &~
RCC_DCKCFGR_SAI1ASRC
;

1390 
tm¥eg
 |
RCC_SAIBlockACLKSour˚
;

1393 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1394 
	}
}

1413 
	$RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
)

1415 
uöt32_t
 
tm¥eg
 = 0;

1418 
	`as£π_∑øm
(
	`IS_RCC_SAIBCLK_SOURCE
(
RCC_SAIBlockBCLKSour˚
));

1420 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1423 
tm¥eg
 &~
RCC_DCKCFGR_SAI1BSRC
;

1426 
tm¥eg
 |
RCC_SAIBlockBCLKSour˚
;

1429 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1430 
	}
}

1446 
	$RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
)

1448 
uöt32_t
 
tm¥eg
 = 0;

1451 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVR_VALUE
(
RCC_PLLSAIDivR
));

1453 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1456 
tm¥eg
 &~
RCC_DCKCFGR_PLLSAIDIVR
;

1459 
tm¥eg
 |
RCC_PLLSAIDivR
;

1462 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1463 
	}
}

1483 
	$RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
)

1486 
	`as£π_∑øm
(
	`IS_RCC_TIMCLK_PRESCALER
(
RCC_TIMCLKPªsˇÀr
));

1488 *(
__IO
 
uöt32_t
 *Ë
DCKCFGR_TIMPRE_BB
 = 
RCC_TIMCLKPªsˇÀr
;

1490 
	}
}

1526 
	$RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1529 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCK_PERIPH
(
RCC_AHB1Pîùh
));

1531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1532 i‡(
NewSèã
 !
DISABLE
)

1534 
RCC
->
AHB1ENR
 |
RCC_AHB1Pîùh
;

1538 
RCC
->
AHB1ENR
 &~
RCC_AHB1Pîùh
;

1540 
	}
}

1558 
	$RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1561 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1562 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1564 i‡(
NewSèã
 !
DISABLE
)

1566 
RCC
->
AHB2ENR
 |
RCC_AHB2Pîùh
;

1570 
RCC
->
AHB2ENR
 &~
RCC_AHB2Pîùh
;

1572 
	}
}

1586 
	$RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1589 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1592 i‡(
NewSèã
 !
DISABLE
)

1594 
RCC
->
AHB3ENR
 |
RCC_AHB3Pîùh
;

1598 
RCC
->
AHB3ENR
 &~
RCC_AHB3Pîùh
;

1600 
	}
}

1638 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1641 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1642 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1644 i‡(
NewSèã
 !
DISABLE
)

1646 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1650 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1652 
	}
}

1683 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1686 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1687 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1689 i‡(
NewSèã
 !
DISABLE
)

1691 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1695 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1697 
	}
}

1725 
	$RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1728 
	`as£π_∑øm
(
	`IS_RCC_AHB1_RESET_PERIPH
(
RCC_AHB1Pîùh
));

1729 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1731 i‡(
NewSèã
 !
DISABLE
)

1733 
RCC
->
AHB1RSTR
 |
RCC_AHB1Pîùh
;

1737 
RCC
->
AHB1RSTR
 &~
RCC_AHB1Pîùh
;

1739 
	}
}

1754 
	$RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1757 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1758 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1760 i‡(
NewSèã
 !
DISABLE
)

1762 
RCC
->
AHB2RSTR
 |
RCC_AHB2Pîùh
;

1766 
RCC
->
AHB2RSTR
 &~
RCC_AHB2Pîùh
;

1768 
	}
}

1779 
	$RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1782 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1783 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1785 i‡(
NewSèã
 !
DISABLE
)

1787 
RCC
->
AHB3RSTR
 |
RCC_AHB3Pîùh
;

1791 
RCC
->
AHB3RSTR
 &~
RCC_AHB3Pîùh
;

1793 
	}
}

1828 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1831 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1832 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1833 i‡(
NewSèã
 !
DISABLE
)

1835 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1839 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1841 
	}
}

1869 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1872 
	`as£π_∑øm
(
	`IS_RCC_APB2_RESET_PERIPH
(
RCC_APB2Pîùh
));

1873 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1874 i‡(
NewSèã
 !
DISABLE
)

1876 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1880 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1882 
	}
}

1918 
	$RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1921 
	`as£π_∑øm
(
	`IS_RCC_AHB1_LPMODE_PERIPH
(
RCC_AHB1Pîùh
));

1922 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1923 i‡(
NewSèã
 !
DISABLE
)

1925 
RCC
->
AHB1LPENR
 |
RCC_AHB1Pîùh
;

1929 
RCC
->
AHB1LPENR
 &~
RCC_AHB1Pîùh
;

1931 
	}
}

1950 
	$RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1953 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1954 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1955 i‡(
NewSèã
 !
DISABLE
)

1957 
RCC
->
AHB2LPENR
 |
RCC_AHB2Pîùh
;

1961 
RCC
->
AHB2LPENR
 &~
RCC_AHB2Pîùh
;

1963 
	}
}

1978 
	$RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1981 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1982 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1983 i‡(
NewSèã
 !
DISABLE
)

1985 
RCC
->
AHB3LPENR
 |
RCC_AHB3Pîùh
;

1989 
RCC
->
AHB3LPENR
 &~
RCC_AHB3Pîùh
;

1991 
	}
}

2030 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2033 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2034 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2035 i‡(
NewSèã
 !
DISABLE
)

2037 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

2041 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

2043 
	}
}

2075 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2078 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

2079 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2080 i‡(
NewSèã
 !
DISABLE
)

2082 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

2086 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

2088 
	}
}

2099 
	$RCC_LSEModeC⁄fig
(
uöt8_t
 
Mode
)

2102 
	`as£π_∑øm
(
	`IS_RCC_LSE_MODE
(
Mode
));

2104 if(
Mode
 =
RCC_LSE_HIGHDRIVE_MODE
)

2106 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2110 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2112 
	}
}

2145 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2148 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

2149 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2150 i‡(
NewSèã
 !
DISABLE
)

2153 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

2158 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

2160 
	}
}

2182 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

2184 
uöt32_t
 
tmp
 = 0;

2185 
uöt32_t
 
°©u§eg
 = 0;

2186 
FœgSètus
 
bô°©us
 = 
RESET
;

2189 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

2192 
tmp
 = 
RCC_FLAG
 >> 5;

2193 i‡(
tmp
 == 1)

2195 
°©u§eg
 = 
RCC
->
CR
;

2197 i‡(
tmp
 == 2)

2199 
°©u§eg
 = 
RCC
->
BDCR
;

2203 
°©u§eg
 = 
RCC
->
CSR
;

2207 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

2208 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

2210 
bô°©us
 = 
SET
;

2214 
bô°©us
 = 
RESET
;

2217  
bô°©us
;

2218 
	}
}

2227 
	$RCC_CÀ¨Fœg
()

2230 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

2231 
	}
}

2247 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

2249 
ITSètus
 
bô°©us
 = 
RESET
;

2252 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

2255 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

2257 
bô°©us
 = 
SET
;

2261 
bô°©us
 = 
RESET
;

2264  
bô°©us
;

2265 
	}
}

2281 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

2284 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

2288 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

2289 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_rtc.c

285 
	~"°m32f4xx_πc.h
"

300 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

301 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

302 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

303 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

304 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

305 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

306 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

307 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 | \

308 
RTC_FLAG_RECALPF
 | 
RTC_FLAG_SHPF
))

	)

310 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

311 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

312 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

313 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

318 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

319 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

375 
Eº‹Sètus
 
	$RTC_DeInô
()

377 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

378 
uöt32_t
 
wutwf°©us
 = 0x00;

379 
Eº‹Sètus
 
°©us
 = 
ERROR
;

382 
RTC
->
WPR
 = 0xCA;

383 
RTC
->
WPR
 = 0x53;

386 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

388 
°©us
 = 
ERROR
;

393 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

394 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

396 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

401 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

402 
wutcou¡î
++;

403 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

405 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

407 
°©us
 = 
ERROR
;

412 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

413 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

414 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

415 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

416 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

417 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

418 
RTC
->
SHIFTR
 = (
uöt32_t
)0x00000000;

419 
RTC
->
CALR
 = (
uöt32_t
)0x00000000;

420 
RTC
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

421 
RTC
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

424 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

427 
RTC
->
TAFCR
 = 0x00000000;

429 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

431 
°©us
 = 
ERROR
;

435 
°©us
 = 
SUCCESS
;

441 
RTC
->
WPR
 = 0xFF;

443  
°©us
;

444 
	}
}

457 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

459 
Eº‹Sètus
 
°©us
 = 
ERROR
;

462 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

463 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

464 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

467 
RTC
->
WPR
 = 0xCA;

468 
RTC
->
WPR
 = 0x53;

471 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

473 
°©us
 = 
ERROR
;

478 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

480 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

483 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

484 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

487 
	`RTC_ExôInôMode
();

489 
°©us
 = 
SUCCESS
;

492 
RTC
->
WPR
 = 0xFF;

494  
°©us
;

495 
	}
}

503 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

506 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

509 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

512 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

513 
	}
}

525 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

528 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

530 i‡(
NewSèã
 !
DISABLE
)

533 
RTC
->
WPR
 = 0xFF;

538 
RTC
->
WPR
 = 0xCA;

539 
RTC
->
WPR
 = 0x53;

541 
	}
}

552 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

554 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

555 
Eº‹Sètus
 
°©us
 = 
ERROR
;

556 
uöt32_t
 
öô°©us
 = 0x00;

559 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

562 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

567 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

568 
öôcou¡î
++;

569 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

571 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

573 
°©us
 = 
SUCCESS
;

577 
°©us
 = 
ERROR
;

582 
°©us
 = 
SUCCESS
;

585  (
°©us
);

586 
	}
}

597 
	$RTC_ExôInôMode
()

600 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

601 
	}
}

619 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

621 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

622 
Eº‹Sètus
 
°©us
 = 
ERROR
;

623 
uöt32_t
 
synchro°©us
 = 0x00;

626 
RTC
->
WPR
 = 0xCA;

627 
RTC
->
WPR
 = 0x53;

630 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

635 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

636 
synchrocou¡î
++;

637 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

639 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

641 
°©us
 = 
SUCCESS
;

645 
°©us
 = 
ERROR
;

649 
RTC
->
WPR
 = 0xFF;

651  (
°©us
);

652 
	}
}

662 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

664 
Eº‹Sètus
 
°©us
 = 
ERROR
;

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

670 
RTC
->
WPR
 = 0xCA;

671 
RTC
->
WPR
 = 0x53;

674 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

676 
°©us
 = 
ERROR
;

680 i‡(
NewSèã
 !
DISABLE
)

683 
RTC
->
CR
 |
RTC_CR_REFCKON
;

688 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

691 
	`RTC_ExôInôMode
();

693 
°©us
 = 
SUCCESS
;

697 
RTC
->
WPR
 = 0xFF;

699  
°©us
;

700 
	}
}

710 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

716 
RTC
->
WPR
 = 0xCA;

717 
RTC
->
WPR
 = 0x53;

719 i‡(
NewSèã
 !
DISABLE
)

722 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

727 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

731 
RTC
->
WPR
 = 0xFF;

732 
	}
}

765 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

767 
uöt32_t
 
tm¥eg
 = 0;

768 
Eº‹Sètus
 
°©us
 = 
ERROR
;

771 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

773 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

775 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

777 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

778 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

782 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

783 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

785 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

786 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

790 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

792 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

793 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

794 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

798 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

799 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

801 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

802 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

806 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

808 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

809 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

810 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

811 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

815 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

816 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

817 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

818 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

822 
RTC
->
WPR
 = 0xCA;

823 
RTC
->
WPR
 = 0x53;

826 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

828 
°©us
 = 
ERROR
;

833 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

836 
	`RTC_ExôInôMode
();

839 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

841 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

843 
°©us
 = 
ERROR
;

847 
°©us
 = 
SUCCESS
;

852 
°©us
 = 
SUCCESS
;

856 
RTC
->
WPR
 = 0xFF;

858  
°©us
;

859 
	}
}

868 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

871 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

872 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

873 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

874 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

875 
	}
}

887 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

889 
uöt32_t
 
tm¥eg
 = 0;

892 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

895 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

898 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

899 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

900 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

901 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

904 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

907 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

908 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

909 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

911 
	}
}

920 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

922 
uöt32_t
 
tm¥eg
 = 0;

925 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

928 (Ë(
RTC
->
DR
);

930  (
tm¥eg
);

931 
	}
}

945 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

947 
uöt32_t
 
tm¥eg
 = 0;

948 
Eº‹Sètus
 
°©us
 = 
ERROR
;

951 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

953 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

955 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

957 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

959 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

960 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

961 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

965 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

966 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

967 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

968 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

969 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

971 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

974 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

976 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

977 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

978 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

979 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

983 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

984 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

985 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

986 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

990 
RTC
->
WPR
 = 0xCA;

991 
RTC
->
WPR
 = 0x53;

994 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

996 
°©us
 = 
ERROR
;

1001 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

1004 
	`RTC_ExôInôMode
();

1007 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

1009 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

1011 
°©us
 = 
ERROR
;

1015 
°©us
 = 
SUCCESS
;

1020 
°©us
 = 
SUCCESS
;

1024 
RTC
->
WPR
 = 0xFF;

1026  
°©us
;

1027 
	}
}

1036 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1039 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1040 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1041 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1042 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1043 
	}
}

1055 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1057 
uöt32_t
 
tm¥eg
 = 0;

1060 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1063 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1066 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1067 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1068 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1069 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1072 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1075 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1076 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1077 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1079 
	}
}

1115 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1117 
uöt32_t
 
tm¥eg
 = 0;

1120 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1121 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1122 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1123 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1125 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1127 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1129 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1130 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1134 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1135 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1137 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1138 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1140 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1142 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1146 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1151 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1153 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1154 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1155 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1159 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1160 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1163 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1164 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1166 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1168 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1169 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1173 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1174 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1179 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1181 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1182 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1183 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1184 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1185 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1186 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1187 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1191 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1192 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1193 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1194 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1195 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1196 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1197 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1201 
RTC
->
WPR
 = 0xCA;

1202 
RTC
->
WPR
 = 0x53;

1205 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1207 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1211 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1215 
RTC
->
WPR
 = 0xFF;

1216 
	}
}

1226 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1229 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1230 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1231 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1232 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1235 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1236 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1239 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1240 
	}
}

1256 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1258 
uöt32_t
 
tm¥eg
 = 0;

1261 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1262 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1265 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1267 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1271 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1275 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1276 
RTC_ALRMAR_HU
)) >> 16);

1277 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1278 
RTC_ALRMAR_MNU
)) >> 8);

1279 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1280 
RTC_ALRMAR_SU
));

1281 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1282 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1283 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1284 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1286 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1288 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1289 
RTC_AœrmTime
.
RTC_Hours
);

1290 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1291 
RTC_AœrmTime
.
RTC_Möuãs
);

1292 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1293 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1294 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1296 
	}
}

1310 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1312 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1313 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1314 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1317 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1321 
RTC
->
WPR
 = 0xCA;

1322 
RTC
->
WPR
 = 0x53;

1325 i‡(
NewSèã
 !
DISABLE
)

1327 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1329 
°©us
 = 
SUCCESS
;

1334 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1339 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1340 
Æ¨mcou¡î
++;

1341 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1343 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1345 
°©us
 = 
ERROR
;

1349 
°©us
 = 
SUCCESS
;

1354 
RTC
->
WPR
 = 0xFF;

1356  
°©us
;

1357 
	}
}

1404 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1406 
uöt32_t
 
tm¥eg
 = 0;

1409 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1410 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1411 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1414 
RTC
->
WPR
 = 0xCA;

1415 
RTC
->
WPR
 = 0x53;

1418 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1420 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1423 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1428 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1432 
RTC
->
WPR
 = 0xFF;

1434 
	}
}

1445 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1447 
uöt32_t
 
tm¥eg
 = 0;

1450 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1452 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1456 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1459  (
tm¥eg
);

1460 
	}
}

1494 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1497 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1500 
RTC
->
WPR
 = 0xCA;

1501 
RTC
->
WPR
 = 0x53;

1504 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1507 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1510 
RTC
->
WPR
 = 0xFF;

1511 
	}
}

1521 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1524 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1527 
RTC
->
WPR
 = 0xCA;

1528 
RTC
->
WPR
 = 0x53;

1531 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1534 
RTC
->
WPR
 = 0xFF;

1535 
	}
}

1542 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1545  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1546 
	}
}

1554 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1556 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1557 
uöt32_t
 
wutwf°©us
 = 0x00;

1558 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1564 
RTC
->
WPR
 = 0xCA;

1565 
RTC
->
WPR
 = 0x53;

1567 i‡(
NewSèã
 !
DISABLE
)

1570 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1571 
°©us
 = 
SUCCESS
;

1576 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1580 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1581 
wutcou¡î
++;

1582 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1584 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1586 
°©us
 = 
ERROR
;

1590 
°©us
 = 
SUCCESS
;

1595 
RTC
->
WPR
 = 0xFF;

1597  
°©us
;

1598 
	}
}

1631 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1634 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1635 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1638 
RTC
->
WPR
 = 0xCA;

1639 
RTC
->
WPR
 = 0x53;

1642 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1645 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1648 
RTC
->
WPR
 = 0xFF;

1649 
	}
}

1658 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1660  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1661 
	}
}

1697 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1700 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1701 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1704 
RTC
->
WPR
 = 0xCA;

1705 
RTC
->
WPR
 = 0x53;

1708 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1711 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1714 
RTC
->
WPR
 = 0xFF;

1715 
	}
}

1751 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1753 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1756 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1757 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1760 
RTC
->
WPR
 = 0xCA;

1761 
RTC
->
WPR
 = 0x53;

1764 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1766 
°©us
 = 
ERROR
;

1771 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1773 
	`RTC_ExôInôMode
();

1775 
°©us
 = 
SUCCESS
;

1779 
RTC
->
WPR
 = 0xFF;

1781  
°©us
;

1782 
	}
}

1792 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1794 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1797 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1800 
RTC
->
WPR
 = 0xCA;

1801 
RTC
->
WPR
 = 0x53;

1804 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1806 
°©us
 = 
ERROR
;

1810 i‡(
NewSèã
 !
DISABLE
)

1813 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1818 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1821 
	`RTC_ExôInôMode
();

1823 
°©us
 = 
SUCCESS
;

1827 
RTC
->
WPR
 = 0xFF;

1829  
°©us
;

1830 
	}
}

1838 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1844 
RTC
->
WPR
 = 0xCA;

1845 
RTC
->
WPR
 = 0x53;

1847 i‡(
NewSèã
 !
DISABLE
)

1850 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1855 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1859 
RTC
->
WPR
 = 0xFF;

1860 
	}
}

1870 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1873 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1876 
RTC
->
WPR
 = 0xCA;

1877 
RTC
->
WPR
 = 0x53;

1880 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1883 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1886 
RTC
->
WPR
 = 0xFF;

1887 
	}
}

1906 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1907 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1908 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1910 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1911 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1914 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1915 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1916 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1919 
RTC
->
WPR
 = 0xCA;

1920 
RTC
->
WPR
 = 0x53;

1923 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1926 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1928 
ªˇÕfcou¡
++;

1933 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1936 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1938 
°©us
 = 
SUCCESS
;

1942 
°©us
 = 
ERROR
;

1946 
RTC
->
WPR
 = 0xFF;

1948  (
Eº‹Sètus
)(
°©us
);

1949 
	}
}

1982 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1984 
uöt32_t
 
tm¥eg
 = 0;

1987 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1988 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1991 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1994 i‡(
NewSèã
 !
DISABLE
)

1996 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

2000 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

2004 
RTC
->
WPR
 = 0xCA;

2005 
RTC
->
WPR
 = 0x53;

2008 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

2011 
RTC
->
WPR
 = 0xFF;

2012 
	}
}

2026 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

2027 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

2029 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

2032 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

2035 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

2036 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

2039 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

2040 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

2041 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

2042 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

2045 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

2046 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

2047 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

2048 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

2051 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

2054 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

2055 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

2056 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

2059 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

2060 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

2061 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

2063 
	}
}

2070 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2073  (
uöt32_t
)(
RTC
->
TSSSR
);

2074 
	}
}

2105 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2108 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2109 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2111 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2114 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2119 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2121 
	}
}

2131 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2134 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2137 i‡(
NewSèã
 !
DISABLE
)

2140 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2145 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2147 
	}
}

2162 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2165 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2168 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2171 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2172 
	}
}

2196 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2199 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2202 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2205 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2206 
	}
}

2219 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2222 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2225 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2228 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2229 
	}
}

2239 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2244 i‡(
NewSèã
 !
DISABLE
)

2247 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2252 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2254 
	}
}

2262 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2267 i‡(
NewSèã
 !
DISABLE
)

2270 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2275 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2277 
	}
}

2303 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2305 
__IO
 
uöt32_t
 
tmp
 = 0;

2308 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2310 
tmp
 = 
RTC_BASE
 + 0x50;

2311 
tmp
 +(
RTC_BKP_DR
 * 4);

2314 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2315 
	}
}

2324 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2326 
__IO
 
uöt32_t
 
tmp
 = 0;

2329 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2331 
tmp
 = 
RTC_BASE
 + 0x50;

2332 
tmp
 +(
RTC_BKP_DR
 * 4);

2335  (*(
__IO
 
uöt32_t
 *)
tmp
);

2336 
	}
}

2363 
	$RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
)

2366 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
RTC_Tam≥rPö
));

2368 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPINSEL
);

2369 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥rPö
);

2370 
	}
}

2380 
	$RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
)

2383 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

2385 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TSINSEL
);

2386 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

2387 
	}
}

2399 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2402 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2404 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2405 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2406 
	}
}

2437 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2439 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2440 
uöt32_t
 
shpfcou¡
 = 0;

2443 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2444 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2447 
RTC
->
WPR
 = 0xCA;

2448 
RTC
->
WPR
 = 0x53;

2451 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2454 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2456 
shpfcou¡
++;

2461 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2464 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2467 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2469 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2471 
°©us
 = 
ERROR
;

2475 
°©us
 = 
SUCCESS
;

2480 
°©us
 = 
ERROR
;

2485 
°©us
 = 
ERROR
;

2489 
RTC
->
WPR
 = 0xFF;

2491  (
Eº‹Sètus
)(
°©us
);

2492 
	}
}

2557 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2560 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2564 
RTC
->
WPR
 = 0xCA;

2565 
RTC
->
WPR
 = 0x53;

2567 i‡(
NewSèã
 !
DISABLE
)

2570 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2572 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2577 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2579 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2582 
RTC
->
WPR
 = 0xFF;

2583 
	}
}

2605 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2607 
FœgSètus
 
bô°©us
 = 
RESET
;

2608 
uöt32_t
 
tm¥eg
 = 0;

2611 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2614 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2617 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2619 
bô°©us
 = 
SET
;

2623 
bô°©us
 = 
RESET
;

2625  
bô°©us
;

2626 
	}
}

2641 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2644 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2647 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2648 
	}
}

2661 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2663 
ITSètus
 
bô°©us
 = 
RESET
;

2664 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2667 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2670 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2673 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & (RTC_IT >> 15)));

2676 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2679 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2681 
bô°©us
 = 
SET
;

2685 
bô°©us
 = 
RESET
;

2687  
bô°©us
;

2688 
	}
}

2701 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2703 
uöt32_t
 
tm¥eg
 = 0;

2706 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2709 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2712 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2713 
	}
}

2724 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2726 
uöt8_t
 
bcdhigh
 = 0;

2728 
VÆue
 >= 10)

2730 
bcdhigh
++;

2731 
VÆue
 -= 10;

2734  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2735 
	}
}

2742 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2744 
uöt8_t
 
tmp
 = 0;

2745 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2746  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2747 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_spi.c

159 
	~"°m32f4xx_•i.h
"

160 
	~"°m32f4xx_rcc.h
"

175 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

176 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

179 
	#PLLCFGR_PPLR_MASK
 ((
uöt32_t
)0x70000000)

	)

180 
	#PLLCFGR_PPLN_MASK
 ((
uöt32_t
)0x00007FC0)

	)

182 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010)

	)

183 
	#SPI_SR_TIFRFE
 ((
uöt16_t
)0x0100)

	)

224 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

227 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

229 i‡(
SPIx
 =
SPI1
)

232 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

234 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

236 i‡(
SPIx
 =
SPI2
)

239 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

241 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

243 i‡(
SPIx
 =
SPI3
)

246 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

248 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

250 i‡(
SPIx
 =
SPI4
)

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
ENABLE
);

255 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
DISABLE
);

257 i‡(
SPIx
 =
SPI5
)

260 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
ENABLE
);

262 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
DISABLE
);

266 i‡(
SPIx
 =
SPI6
)

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
ENABLE
);

271 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
DISABLE
);

274 
	}
}

284 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

286 
uöt16_t
 
tm¥eg
 = 0;

289 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

292 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

293 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

294 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

295 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

296 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

297 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

298 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

299 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

300 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

304 
tm¥eg
 = 
SPIx
->
CR1
;

306 
tm¥eg
 &
CR1_CLEAR_MASK
;

315 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

316 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

317 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

318 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

320 
SPIx
->
CR1
 = 
tm¥eg
;

323 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

326 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

327 
	}
}

348 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

350 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

351 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

352 #i‚de‡
I2S_EXTERNAL_CLOCK_VAL


353 
uöt32_t
 
∂lm
 = 0, 
∂ 
 = 0, 
∂Ã
 = 0;

357 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

358 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

359 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

360 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

361 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

362 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

363 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

367 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

368 
SPIx
->
I2SPR
 = 0x0002;

371 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

374 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

376 
i2sodd
 = (
uöt16_t
)0;

377 
i2sdiv
 = (
uöt16_t
)2;

383 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

386 
∑ckëÀngth
 = 1;

391 
∑ckëÀngth
 = 2;

398 #ifde‡
I2S_EXTERNAL_CLOCK_VAL


400 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) == 0)

402 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_I2SSRC
;

406 
i2s˛k
 = 
I2S_EXTERNAL_CLOCK_VAL
;

410 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) != 0)

412 
RCC
->
CFGR
 &~(
uöt32_t
)
RCC_CFGR_I2SSRC
;

416 
∂ 
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & \

417 (
RCC_PLLI2SCFGR_PLLI2SN
 >> 6));

420 
∂Ã
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & \

421 (
RCC_PLLI2SCFGR_PLLI2SR
 >> 28));

424 
∂lm
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

426 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)

429 
i2s˛k
 = (
uöt32_t
)(((
HSE_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

433 
i2s˛k
 = (
uöt32_t
)(((
HSI_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

438 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

441 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

446 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

450 
tmp
 =Åmp / 10;

453 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

456 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

459 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

463 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

466 
i2sdiv
 = 2;

467 
i2sodd
 = 0;

471 
SPIx
->
I2SPR
 = (
uöt16_t
)((uöt16_t)
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

474 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

475 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

476 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

479 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

480 
	}
}

487 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

491 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

493 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

495 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

497 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

499 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

501 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

503 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

505 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

507 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

508 
	}
}

515 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

519 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

522 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

525 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

528 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

531 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

534 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

535 
	}
}

544 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

547 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

548 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 i‡(
NewSèã
 !
DISABLE
)

552 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

557 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

559 
	}
}

569 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

572 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

573 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

575 i‡(
NewSèã
 !
DISABLE
)

578 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

583 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

585 
	}
}

596 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

599 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

600 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

602 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

604 
SPIx
->
CR1
 |
SPI_D©aSize
;

605 
	}
}

616 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

619 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

620 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

621 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

624 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

629 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

631 
	}
}

642 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

645 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

646 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

647 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

650 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

655 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

657 
	}
}

666 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

669 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

670 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

671 i‡(
NewSèã
 !
DISABLE
)

674 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

679 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

681 
	}
}

697 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

700 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

701 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

703 i‡(
NewSèã
 !
DISABLE
)

706 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

711 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_CR2_FRF
;

713 
	}
}

734 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

736 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

739 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

740 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

741 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

742 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

743 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

747 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

748 
I2Sxext
->
I2SPR
 = 0x0002;

751 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

754 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

756 
tmp
 = 
I2S_Mode_SœveRx
;

760 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

762 
tmp
 = 
I2S_Mode_SœveTx
;

768 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

769 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

770 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

773 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

774 
	}
}

808 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

811 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

814  
SPIx
->
DR
;

815 
	}
}

824 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

827 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

830 
SPIx
->
DR
 = 
D©a
;

831 
	}
}

914 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

917 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

918 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

919 i‡(
NewSèã
 !
DISABLE
)

922 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

927 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

929 
	}
}

936 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

939 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

942 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

943 
	}
}

954 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

956 
uöt16_t
 
¸¸eg
 = 0;

958 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

959 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

960 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

963 
¸¸eg
 = 
SPIx
->
TXCRCR
;

968 
¸¸eg
 = 
SPIx
->
RXCRCR
;

971  
¸¸eg
;

972 
	}
}

979 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

982 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

985  
SPIx
->
CRCPR
;

986 
	}
}

1016 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1019 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1020 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1021 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

1023 i‡(
NewSèã
 !
DISABLE
)

1026 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

1031 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

1033 
	}
}

1124 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1126 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1129 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1134 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1137 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1139 i‡(
NewSèã
 !
DISABLE
)

1142 
SPIx
->
CR2
 |
ômask
;

1147 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1149 
	}
}

1168 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1170 
FœgSètus
 
bô°©us
 = 
RESET
;

1172 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1173 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1176 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1179 
bô°©us
 = 
SET
;

1184 
bô°©us
 = 
RESET
;

1187  
bô°©us
;

1188 
	}
}

1209 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1212 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1213 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1216 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1217 
	}
}

1234 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1236 
ITSètus
 
bô°©us
 = 
RESET
;

1237 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1240 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1241 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1244 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1247 
ômask
 = 
SPI_I2S_IT
 >> 4;

1250 
ômask
 = 0x01 << itmask;

1253 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1256 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1259 
bô°©us
 = 
SET
;

1264 
bô°©us
 = 
RESET
;

1267  
bô°©us
;

1268 
	}
}

1289 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1291 
uöt16_t
 
ôpos
 = 0;

1293 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1294 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1297 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1300 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1301 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_syscfg.c

50 
	~"°m32f4xx_syscfg.h
"

51 
	~"°m32f4xx_rcc.h
"

65 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

68 
	#MEMRMP_OFFSET
 
SYSCFG_OFFSET


	)

69 
	#UFB_MODE_BôNumbî
 ((
uöt8_t
)0x8)

	)

70 
	#UFB_MODE_BB
 (
PERIPH_BB_BASE
 + (
MEMRMP_OFFSET
 * 32Ë+ (
UFB_MODE_BôNumbî
 * 4))

	)

75 
	#PMC_OFFSET
 (
SYSCFG_OFFSET
 + 0x04)

	)

76 
	#MII_RMII_SEL_BôNumbî
 ((
uöt8_t
)0x17)

	)

77 
	#PMC_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
PMC_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

81 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

82 
	#CMP_PD_BôNumbî
 ((
uöt8_t
)0x00)

	)

83 
	#CMPCR_CMP_PD_BB
 (
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BôNumbî
 * 4))

	)

100 
	$SYSCFG_DeInô
()

102 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

103 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

104 
	}
}

118 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

121 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

123 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

124 
	}
}

139 
	$SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
)

142 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

144 *(
__IO
 
uöt32_t
 *Ë
UFB_MODE_BB
 = (uöt32_t)
NewSèã
;

145 
	}
}

162 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

164 
uöt32_t
 
tmp
 = 0x00;

167 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

168 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

170 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

171 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

172 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

173 
	}
}

183 
	$SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
)

185 
	`as£π_∑øm
(
	`IS_SYSCFG_ETH_MEDIA_INTERFACE
(
SYSCFG_ETH_MedüI¡îÁ˚
));

187 *(
__IO
 
uöt32_t
 *Ë
PMC_MII_RMII_SEL_BB
 = 
SYSCFG_ETH_MedüI¡îÁ˚
;

188 
	}
}

200 
	$SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

205 *(
__IO
 
uöt32_t
 *Ë
CMPCR_CMP_PD_BB
 = (uöt32_t)
NewSèã
;

206 
	}
}

213 
FœgSètus
 
	$SYSCFG_GëCom≥nßti⁄CñlSètus
()

215 
FœgSètus
 
bô°©us
 = 
RESET
;

217 i‡((
SYSCFG
->
CMPCR
 & 
SYSCFG_CMPCR_READY
 ) !(
uöt32_t
)
RESET
)

219 
bô°©us
 = 
SET
;

223 
bô°©us
 = 
RESET
;

225  
bô°©us
;

226 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_tim.c

119 
	~"°m32f4xx_tim.h
"

120 
	~"°m32f4xx_rcc.h
"

135 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

136 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

137 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

138 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

139 
	#CCMR_OC13M_MASK
 ((
uöt16_t
)0xFF8F)

	)

140 
	#CCMR_OC24M_MASK
 ((
uöt16_t
)0x8FFF)

	)

145 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

146 
uöt16_t
 
TIM_ICFûãr
);

147 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

148 
uöt16_t
 
TIM_ICFûãr
);

149 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

150 
uöt16_t
 
TIM_ICFûãr
);

151 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

152 
uöt16_t
 
TIM_ICFûãr
);

200 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

203 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

205 i‡(
TIMx
 =
TIM1
)

207 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

208 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

210 i‡(
TIMx
 =
TIM2
)

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

213 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

215 i‡(
TIMx
 =
TIM3
)

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

218 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

220 i‡(
TIMx
 =
TIM4
)

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

223 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

225 i‡(
TIMx
 =
TIM5
)

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

228 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

230 i‡(
TIMx
 =
TIM6
)

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

233 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

235 i‡(
TIMx
 =
TIM7
)

237 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

238 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

240 i‡(
TIMx
 =
TIM8
)

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

243 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

245 i‡(
TIMx
 =
TIM9
)

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

248 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

250 i‡(
TIMx
 =
TIM10
)

252 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

255 i‡(
TIMx
 =
TIM11
)

257 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

258 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

260 i‡(
TIMx
 =
TIM12
)

262 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

263 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

265 i‡(
TIMx
 =
TIM13
)

267 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

268 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

272 i‡(
TIMx
 =
TIM14
)

274 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

275 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

278 
	}
}

288 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

290 
uöt16_t
 
tmp¸1
 = 0;

293 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

294 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

295 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

297 
tmp¸1
 = 
TIMx
->
CR1
;

299 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)||

300 (
TIMx
 =
TIM2
Ë|| (TIMx =
TIM3
)||

301 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

304 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

305 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

308 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

311 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

312 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

315 
TIMx
->
CR1
 = 
tmp¸1
;

318 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

321 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

323 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

326 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

331 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

332 
	}
}

340 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

343 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

344 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

345 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

346 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

347 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

348 
	}
}

360 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

363 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

364 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

366 
TIMx
->
PSC
 = 
PªsˇÀr
;

368 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

369 
	}
}

383 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

385 
uöt16_t
 
tmp¸1
 = 0;

388 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

389 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

391 
tmp¸1
 = 
TIMx
->
CR1
;

394 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

397 
tmp¸1
 |
TIM_Cou¡îMode
;

400 
TIMx
->
CR1
 = 
tmp¸1
;

401 
	}
}

409 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

415 
TIMx
->
CNT
 = 
Cou¡î
;

416 
	}
}

424 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

427 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

430 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

431 
	}
}

438 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

441 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

444  
TIMx
->
CNT
;

445 
	}
}

452 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

455 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

458  
TIMx
->
PSC
;

459 
	}
}

468 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 i‡(
NewSèã
 !
DISABLE
)

477 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

482 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

484 
	}
}

497 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

500 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

501 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

503 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

506 
TIMx
->
CR1
 |
TIM_CR1_URS
;

511 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

513 
	}
}

522 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

526 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

528 i‡(
NewSèã
 !
DISABLE
)

531 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

536 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

538 
	}
}

549 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

552 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

553 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

556 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

559 
TIMx
->
CR1
 |
TIM_OPMode
;

560 
	}
}

572 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

575 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

576 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

579 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

582 
TIMx
->
CR1
 |
TIM_CKD
;

583 
	}
}

592 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

595 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

596 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

598 i‡(
NewSèã
 !
DISABLE
)

601 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

606 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

608 
	}
}

673 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

675 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

678 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

679 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

680 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

681 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

684 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

687 
tmpc˚r
 = 
TIMx
->
CCER
;

689 
tmp¸2
 = 
TIMx
->
CR2
;

692 
tmpccmrx
 = 
TIMx
->
CCMR1
;

695 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

696 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC1S
;

698 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

701 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1P
;

703 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

706 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

708 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

710 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

711 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

712 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

713 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

716 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

718 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

720 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NE
;

723 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

725 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1
;

726 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1N
;

728 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

730 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

733 
TIMx
->
CR2
 = 
tmp¸2
;

736 
TIMx
->
CCMR1
 = 
tmpccmrx
;

739 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

742 
TIMx
->
CCER
 = 
tmpc˚r
;

743 
	}
}

754 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

756 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

759 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

760 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

761 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

762 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

765 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

768 
tmpc˚r
 = 
TIMx
->
CCER
;

770 
tmp¸2
 = 
TIMx
->
CR2
;

773 
tmpccmrx
 = 
TIMx
->
CCMR1
;

776 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

777 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC2S
;

780 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

783 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2P
;

785 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

788 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

790 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

792 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

793 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

794 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

795 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

798 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

800 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

802 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NE
;

805 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

807 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2
;

808 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2N
;

810 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

812 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

815 
TIMx
->
CR2
 = 
tmp¸2
;

818 
TIMx
->
CCMR1
 = 
tmpccmrx
;

821 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

824 
TIMx
->
CCER
 = 
tmpc˚r
;

825 
	}
}

835 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

837 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

840 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

841 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

842 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

843 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

846 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

849 
tmpc˚r
 = 
TIMx
->
CCER
;

851 
tmp¸2
 = 
TIMx
->
CR2
;

854 
tmpccmrx
 = 
TIMx
->
CCMR2
;

857 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

858 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC3S
;

860 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

863 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

865 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

868 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

870 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

872 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

873 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

874 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

875 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

878 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

880 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

882 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NE
;

885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

887 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3
;

888 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3N
;

890 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

892 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

895 
TIMx
->
CR2
 = 
tmp¸2
;

898 
TIMx
->
CCMR2
 = 
tmpccmrx
;

901 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

904 
TIMx
->
CCER
 = 
tmpc˚r
;

905 
	}
}

915 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

917 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

920 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

921 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

922 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

923 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

926 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

929 
tmpc˚r
 = 
TIMx
->
CCER
;

931 
tmp¸2
 = 
TIMx
->
CR2
;

934 
tmpccmrx
 = 
TIMx
->
CCMR2
;

937 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

938 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC4S
;

941 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

944 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

949 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

951 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

953 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

955 
tmp¸2
 &=(
uöt16_t
Ë~
TIM_CR2_OIS4
;

957 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

960 
TIMx
->
CR2
 = 
tmp¸2
;

963 
TIMx
->
CCMR2
 = 
tmpccmrx
;

966 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

969 
TIMx
->
CCER
 = 
tmpc˚r
;

970 
	}
}

978 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

981 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

982 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

983 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

984 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

985 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

986 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

987 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

988 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

989 
	}
}

1014 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1016 
uöt32_t
 
tmp
 = 0;

1017 
uöt16_t
 
tmp1
 = 0;

1020 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1021 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1022 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1024 
tmp
 = (
uöt32_t
Ë
TIMx
;

1025 
tmp
 +
CCMR_OFFSET
;

1027 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1030 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1032 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1034 
tmp
 +(
TIM_Ch™√l
>>1);

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1040 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1044 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1047 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1050 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1052 
	}
}

1060 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1063 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1066 
TIMx
->
CCR1
 = 
Com∑ª1
;

1067 
	}
}

1076 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1079 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1082 
TIMx
->
CCR2
 = 
Com∑ª2
;

1083 
	}
}

1091 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1094 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1097 
TIMx
->
CCR3
 = 
Com∑ª3
;

1098 
	}
}

1106 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1109 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
TIMx
->
CCR4
 = 
Com∑ª4
;

1113 
	}
}

1124 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1126 
uöt16_t
 
tmpccmr1
 = 0;

1129 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1130 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1131 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1134 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

1137 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1140 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1141 
	}
}

1153 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1155 
uöt16_t
 
tmpccmr1
 = 0;

1158 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1159 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1160 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1163 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

1166 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1169 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1170 
	}
}

1181 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1183 
uöt16_t
 
tmpccmr2
 = 0;

1186 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1187 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1189 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1192 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

1195 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1198 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1199 
	}
}

1210 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1212 
uöt16_t
 
tmpccmr2
 = 0;

1215 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1216 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1217 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1220 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

1223 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1226 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1227 
	}
}

1238 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1240 
uöt16_t
 
tmpccmr1
 = 0;

1243 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1244 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1246 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1249 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC1PE
);

1252 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1255 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1256 
	}
}

1268 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1270 
uöt16_t
 
tmpccmr1
 = 0;

1273 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1274 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1276 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1279 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2PE
);

1282 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1285 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1286 
	}
}

1297 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1299 
uöt16_t
 
tmpccmr2
 = 0;

1302 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1303 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1305 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1308 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC3PE
);

1311 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1314 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1315 
	}
}

1326 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1328 
uöt16_t
 
tmpccmr2
 = 0;

1331 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1332 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1334 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1337 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4PE
);

1340 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1343 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1344 
	}
}

1355 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1357 
uöt16_t
 
tmpccmr1
 = 0;

1360 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1361 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1364 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1367 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1FE
;

1370 
tmpccmr1
 |
TIM_OCFa°
;

1373 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1374 
	}
}

1386 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1388 
uöt16_t
 
tmpccmr1
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1395 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1398 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2FE
);

1401 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1404 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1405 
	}
}

1416 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1418 
uöt16_t
 
tmpccmr2
 = 0;

1421 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1422 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1425 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1428 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3FE
;

1431 
tmpccmr2
 |
TIM_OCFa°
;

1434 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1435 
	}
}

1446 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1448 
uöt16_t
 
tmpccmr2
 = 0;

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1455 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1458 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4FE
);

1461 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1464 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1465 
	}
}

1476 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1478 
uöt16_t
 
tmpccmr1
 = 0;

1481 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1482 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1484 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1487 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1CE
;

1490 
tmpccmr1
 |
TIM_OCCÀ¨
;

1493 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1494 
	}
}

1506 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1508 
uöt16_t
 
tmpccmr1
 = 0;

1511 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1512 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1514 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2CE
;

1520 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1523 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1524 
	}
}

1535 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1537 
uöt16_t
 
tmpccmr2
 = 0;

1540 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1541 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1543 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1546 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3CE
;

1549 
tmpccmr2
 |
TIM_OCCÀ¨
;

1552 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1553 
	}
}

1564 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1566 
uöt16_t
 
tmpccmr2
 = 0;

1569 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1570 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1572 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1575 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4CE
;

1578 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1581 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1582 
	}
}

1593 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1595 
uöt16_t
 
tmpc˚r
 = 0;

1598 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1599 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1601 
tmpc˚r
 = 
TIMx
->
CCER
;

1604 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC1P
);

1605 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1608 
TIMx
->
CCER
 = 
tmpc˚r
;

1609 
	}
}

1620 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1622 
uöt16_t
 
tmpc˚r
 = 0;

1624 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1625 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1627 
tmpc˚r
 = 
TIMx
->
CCER
;

1630 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

1631 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1634 
TIMx
->
CCER
 = 
tmpc˚r
;

1635 
	}
}

1647 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1649 
uöt16_t
 
tmpc˚r
 = 0;

1652 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1653 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1655 
tmpc˚r
 = 
TIMx
->
CCER
;

1658 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC2P
);

1659 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1662 
TIMx
->
CCER
 = 
tmpc˚r
;

1663 
	}
}

1674 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1676 
uöt16_t
 
tmpc˚r
 = 0;

1679 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1680 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1682 
tmpc˚r
 = 
TIMx
->
CCER
;

1685 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

1686 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1689 
TIMx
->
CCER
 = 
tmpc˚r
;

1690 
	}
}

1701 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1703 
uöt16_t
 
tmpc˚r
 = 0;

1706 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1707 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1709 
tmpc˚r
 = 
TIMx
->
CCER
;

1712 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

1713 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1716 
TIMx
->
CCER
 = 
tmpc˚r
;

1717 
	}
}

1728 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1730 
uöt16_t
 
tmpc˚r
 = 0;

1733 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1734 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1736 
tmpc˚r
 = 
TIMx
->
CCER
;

1739 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

1740 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1743 
TIMx
->
CCER
 = 
tmpc˚r
;

1744 
	}
}

1755 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1757 
uöt16_t
 
tmpc˚r
 = 0;

1760 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1761 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1763 
tmpc˚r
 = 
TIMx
->
CCER
;

1766 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

1767 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1770 
TIMx
->
CCER
 = 
tmpc˚r
;

1771 
	}
}

1786 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1788 
uöt16_t
 
tmp
 = 0;

1791 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1792 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1793 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1795 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1798 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1801 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1802 
	}
}

1816 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1818 
uöt16_t
 
tmp
 = 0;

1821 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1822 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1823 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1825 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

1828 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1831 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1832 
	}
}

1900 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1905 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1906 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1907 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1909 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1912 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1913 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1914 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1916 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1918 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1921 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1922 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1923 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1924 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1926 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1928 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1931 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1932 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1933 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1934 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1936 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1943 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1944 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1946 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1948 
	}
}

1956 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1959 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1960 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1961 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1962 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1963 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1964 
	}
}

1975 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1977 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1978 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1981 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1984 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1986 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1990 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1993 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1995 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1999 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2001 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

2004 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2005 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2007 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2009 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2011 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2016 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2017 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2019 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2021 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2023 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2025 
	}
}

2032 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2035 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2038  
TIMx
->
CCR1
;

2039 
	}
}

2047 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2050 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2053  
TIMx
->
CCR2
;

2054 
	}
}

2061 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2064 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2067  
TIMx
->
CCR3
;

2068 
	}
}

2075 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2078 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2081  
TIMx
->
CCR4
;

2082 
	}
}

2095 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2098 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2099 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2102 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
;

2105 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2106 
	}
}

2120 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2123 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2127 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
;

2130 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2131 
	}
}

2144 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2151 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2154 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2155 
	}
}

2168 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2171 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2172 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2175 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2178 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2179 
	}
}

2221 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2224 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2225 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2226 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2227 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2228 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2229 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2230 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2234 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2235 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2236 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2237 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2238 
	}
}

2246 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2249 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2250 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2251 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2252 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2253 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2254 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2255 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2256 
	}
}

2265 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2268 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2271 i‡(
NewSèã
 !
DISABLE
)

2274 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2279 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2281 
	}
}

2290 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2293 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2296 i‡(
NewSèã
 !
DISABLE
)

2299 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2304 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2306 
	}
}

2315 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2318 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2320 i‡(
NewSèã
 !
DISABLE
)

2323 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2328 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2330 
	}
}

2372 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2375 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2376 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2379 i‡(
NewSèã
 !
DISABLE
)

2382 
TIMx
->
DIER
 |
TIM_IT
;

2387 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2389 
	}
}

2410 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2413 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2414 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

2417 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

2418 
	}
}

2443 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2445 
ITSètus
 
bô°©us
 = 
RESET
;

2447 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2448 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2451 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2453 
bô°©us
 = 
SET
;

2457 
bô°©us
 = 
RESET
;

2459  
bô°©us
;

2460 
	}
}

2485 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2488 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2491 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2492 
	}
}

2513 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2515 
ITSètus
 
bô°©us
 = 
RESET
;

2516 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2518 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2519 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2521 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2523 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2524 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2526 
bô°©us
 = 
SET
;

2530 
bô°©us
 = 
RESET
;

2532  
bô°©us
;

2533 
	}
}

2554 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2557 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2560 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2561 
	}
}

2591 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2594 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2595 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2596 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2599 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2600 
	}
}

2618 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2621 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2622 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2623 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2625 i‡(
NewSèã
 !
DISABLE
)

2628 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2633 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2635 
	}
}

2644 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2647 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2648 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2650 i‡(
NewSèã
 !
DISABLE
)

2653 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2658 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

2660 
	}
}

2683 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2686 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2689 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2690 
	}
}

2704 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2707 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2708 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2711 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2714 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2715 
	}
}

2734 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2735 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2738 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2739 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2740 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2743 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2745 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2749 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2752 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2754 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2755 
	}
}

2774 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2775 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2777 
uöt16_t
 
tmpsm¸
 = 0;

2780 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2781 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2782 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2783 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2785 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2788 
tmpsm¸
 = 
TIMx
->
SMCR
;

2791 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2794 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2797 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2798 
tmpsm¸
 |
TIM_TS_ETRF
;

2801 
TIMx
->
SMCR
 = 
tmpsm¸
;

2802 
	}
}

2821 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2822 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2825 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2826 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2827 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2828 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2831 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2834 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2835 
	}
}

2892 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2894 
uöt16_t
 
tmpsm¸
 = 0;

2897 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2898 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2901 
tmpsm¸
 = 
TIMx
->
SMCR
;

2904 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2907 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2910 
TIMx
->
SMCR
 = 
tmpsm¸
;

2911 
	}
}

2935 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2938 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2939 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2942 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

2944 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2945 
	}
}

2959 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2962 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2963 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2966 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2969 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2970 
	}
}

2982 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2985 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2986 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2989 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

2992 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2993 
	}
}

3012 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3013 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3015 
uöt16_t
 
tmpsm¸
 = 0;

3018 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3019 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3020 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3021 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3023 
tmpsm¸
 = 
TIMx
->
SMCR
;

3026 
tmpsm¸
 &
SMCR_ETR_MASK
;

3029 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3032 
TIMx
->
SMCR
 = 
tmpsm¸
;

3033 
	}
}

3070 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3071 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3073 
uöt16_t
 
tmpsm¸
 = 0;

3074 
uöt16_t
 
tmpccmr1
 = 0;

3075 
uöt16_t
 
tmpc˚r
 = 0;

3078 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3079 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3080 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3081 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3084 
tmpsm¸
 = 
TIMx
->
SMCR
;

3087 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3090 
tmpc˚r
 = 
TIMx
->
CCER
;

3093 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3094 
tmpsm¸
 |
TIM_EncodîMode
;

3097 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3098 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3101 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3102 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3105 
TIMx
->
SMCR
 = 
tmpsm¸
;

3108 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3111 
TIMx
->
CCER
 = 
tmpc˚r
;

3112 
	}
}

3122 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3125 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3126 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3128 i‡(
NewSèã
 !
DISABLE
)

3131 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3136 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3138 
	}
}

3173 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3176 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

3177 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3180 
TIMx
->
OR
 = 
TIM_Rem≠
;

3181 
	}
}

3204 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3205 
uöt16_t
 
TIM_ICFûãr
)

3207 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3210 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

3211 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3212 
tmpc˚r
 = 
TIMx
->
CCER
;

3215 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_IC1F
);

3216 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3219 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3220 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

3223 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3224 
TIMx
->
CCER
 = 
tmpc˚r
;

3225 
	}
}

3245 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3246 
uöt16_t
 
TIM_ICFûãr
)

3248 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3251 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3252 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3253 
tmpc˚r
 = 
TIMx
->
CCER
;

3254 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3257 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3258 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3259 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3262 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3263 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3266 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3267 
TIMx
->
CCER
 = 
tmpc˚r
;

3268 
	}
}

3287 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3288 
uöt16_t
 
TIM_ICFûãr
)

3290 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3293 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3294 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3295 
tmpc˚r
 = 
TIMx
->
CCER
;

3296 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3299 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3300 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3303 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3304 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3307 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3308 
TIMx
->
CCER
 = 
tmpc˚r
;

3309 
	}
}

3328 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3329 
uöt16_t
 
TIM_ICFûãr
)

3331 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3334 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3335 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3336 
tmpc˚r
 = 
TIMx
->
CCER
;

3337 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3340 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3341 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3342 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3345 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3346 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3349 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3350 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3351 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_usart.c

92 
	~"°m32f4xx_ußπ.h
"

93 
	~"°m32f4xx_rcc.h
"

108 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

109 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

110 
USART_CR1_RE
))

	)

113 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

114 
USART_CR2_CPHA
 | 
USART_CR2_LBCL
))

	)

117 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

120 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

187 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

190 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

192 i‡(
USARTx
 =
USART1
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

197 i‡(
USARTx
 =
USART2
)

199 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

202 i‡(
USARTx
 =
USART3
)

204 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

207 i‡(
USARTx
 =
UART4
)

209 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

210 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

212 i‡(
USARTx
 =
UART5
)

214 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

215 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

217 i‡(
USARTx
 =
USART6
)

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

220 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
DISABLE
);

222 i‡(
USARTx
 =
UART7
)

224 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
ENABLE
);

225 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
DISABLE
);

229 i‡(
USARTx
 =
UART8
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
DISABLE
);

235 
	}
}

246 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

248 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

249 
uöt32_t
 
öãgîdividî
 = 0x00;

250 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

251 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

254 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

255 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

256 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

257 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

258 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

259 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

260 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

263 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

265 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

269 
tm¥eg
 = 
USARTx
->
CR2
;

272 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

276 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

279 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

282 
tm¥eg
 = 
USARTx
->
CR1
;

285 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

291 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

292 
USART_InôSåu˘
->
USART_Mode
;

295 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

298 
tm¥eg
 = 
USARTx
->
CR3
;

301 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

305 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

308 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

312 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

314 i‡((
USARTx
 =
USART1
Ë|| (USARTx =
USART6
))

316 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

320 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

324 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

327 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

332 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

334 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

337 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

340 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

342 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

346 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

350 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

351 
	}
}

359 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

362 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

363 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

364 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

365 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

366 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

367 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

368 
	}
}

379 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

381 
uöt32_t
 
tm¥eg
 = 0x00;

383 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

384 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

385 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

386 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

387 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

390 
tm¥eg
 = 
USARTx
->
CR2
;

392 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

398 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

399 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

401 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

402 
	}
}

410 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

413 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

414 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

415 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

416 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

417 
	}
}

427 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

433 i‡(
NewSèã
 !
DISABLE
)

436 
USARTx
->
CR1
 |
USART_CR1_UE
;

441 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

443 
	}
}

453 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

459 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

461 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

462 
	}
}

474 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

488 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

490 
	}
}

500 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

514 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

516 
	}
}

557 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

560 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

561 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

564 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

565 
	}
}

573 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

576 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

579  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

580 
	}
}

625 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

629 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

632 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

634 
USARTx
->
CR2
 |
USART_Addªss
;

635 
	}
}

645 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

648 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

649 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

651 i‡(
NewSèã
 !
DISABLE
)

654 
USARTx
->
CR1
 |
USART_CR1_RWU
;

659 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

661 
	}
}

672 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

675 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

676 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

678 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

679 
USARTx
->
CR1
 |
USART_WakeUp
;

680 
	}
}

741 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

744 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

745 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

747 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

748 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

749 
	}
}

759 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

773 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

775 
	}
}

783 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

786 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
USARTx
->
CR1
 |
USART_CR1_SBK
;

790 
	}
}

836 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

839 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

840 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

842 i‡(
NewSèã
 !
DISABLE
)

845 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

850 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

852 
	}
}

920 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

923 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

926 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

928 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

929 
	}
}

939 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

942 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

943 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

944 i‡(
NewSèã
 !
DISABLE
)

947 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

952 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

954 
	}
}

964 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

968 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

969 i‡(
NewSèã
 !
DISABLE
)

972 
USARTx
->
CR3
 |
USART_CR3_NACK
;

977 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

979 
	}
}

1035 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1038 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1039 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1041 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1042 
USARTx
->
CR3
 |
USART_IrDAMode
;

1043 
	}
}

1053 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1056 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1057 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1059 i‡(
NewSèã
 !
DISABLE
)

1062 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1067 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1069 
	}
}

1099 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1103 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1106 i‡(
NewSèã
 !
DISABLE
)

1110 
USARTx
->
CR3
 |
USART_DMAReq
;

1116 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1118 
	}
}

1231 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1233 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1234 
uöt32_t
 
ußπxba£
 = 0x00;

1236 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1237 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 i‡(
USART_IT
 =
USART_IT_CTS
)

1243 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1246 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1249 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1252 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1253 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1255 i‡(
ußπªg
 == 0x01)

1257 
ußπxba£
 += 0x0C;

1259 i‡(
ußπªg
 == 0x02)

1261 
ußπxba£
 += 0x10;

1265 
ußπxba£
 += 0x14;

1267 i‡(
NewSèã
 !
DISABLE
)

1269 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1273 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1275 
	}
}

1295 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1297 
FœgSètus
 
bô°©us
 = 
RESET
;

1299 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1300 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1303 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1305 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1308 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1310 
bô°©us
 = 
SET
;

1314 
bô°©us
 = 
RESET
;

1316  
bô°©us
;

1317 
	}
}

1344 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1347 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1348 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1351 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1353 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1356 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1357 
	}
}

1378 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1380 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1381 
ITSètus
 
bô°©us
 = 
RESET
;

1383 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1384 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1387 i‡(
USART_IT
 =
USART_IT_CTS
)

1389 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1393 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1395 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1396 
ômask
 = (
uöt32_t
)0x01 << itmask;

1398 i‡(
ußπªg
 == 0x01)

1400 
ômask
 &
USARTx
->
CR1
;

1402 i‡(
ußπªg
 == 0x02)

1404 
ômask
 &
USARTx
->
CR2
;

1408 
ômask
 &
USARTx
->
CR3
;

1411 
bôpos
 = 
USART_IT
 >> 0x08;

1412 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1413 
bôpos
 &
USARTx
->
SR
;

1414 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1416 
bô°©us
 = 
SET
;

1420 
bô°©us
 = 
RESET
;

1423  
bô°©us
;

1424 
	}
}

1452 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1454 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1457 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1460 i‡(
USART_IT
 =
USART_IT_CTS
)

1462 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1465 
bôpos
 = 
USART_IT
 >> 0x08;

1466 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1467 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1468 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\analog_in.cpp

2 
	~"™Æog_ö.h
"

3 
	~"°m32f4xx.h
"

6 
	gA«logIn
::
	$A«logIn
()

8 
ADC_InôTy≥Def
 
ADC_InôSåu˘uª
;

9 
ADC_Comm⁄InôTy≥Def
 
ADC_Comm⁄InôSåu˘uª
;

10 
DMA_InôTy≥Def
 
DMA_InôSåu˘uª
;

11 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

12 
uöt32_t
 
Comp⁄ítsU£d
;

15 
Comp⁄ítsU£d
 = 
RCC_AHB1Pîùh_DMA2
 |

16 
RCC_AHB1Pîùh_GPIOA
 |

17 
RCC_AHB1Pîùh_GPIOC
;

18 
	`RCC_AHB1PîùhClockCmd
(
Comp⁄ítsU£d
, 
ENABLE
);

19 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

22 
DMA_InôSåu˘uª
.
DMA_Ch™√l
 = 
DMA_Ch™√l_0
;

23 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = (
uöt32_t
)&(
ADC1
->
DR
);

24 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)
adc_øw_vÆues_
;

25 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

26 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = 9;

27 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

28 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

29 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_HÆfW‹d
;

30 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_HÆfW‹d
;

31 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_Cúcuœr
;

32 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_High
;

33 
DMA_InôSåu˘uª
.
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

34 
DMA_InôSåu˘uª
.
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

35 
DMA_InôSåu˘uª
.
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

36 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

37 
	`DMA_Inô
(
DMA2_Såóm0
, &
DMA_InôSåu˘uª
);

38 
	`DMA_Cmd
(
DMA2_Såóm0
, 
ENABLE
);

41 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AN
;

42 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
 ;

43 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_1
|
GPIO_Pö_2
|
GPIO_Pö_3
|
GPIO_Pö_4
|
GPIO_Pö_5
|
GPIO_Pö_6
|
GPIO_Pö_7
;

44 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

45 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_4
|
GPIO_Pö_5
;

46 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

49 
ADC_Comm⁄InôSåu˘uª
.
ADC_Mode
 = 
ADC_Mode_Indïídít
;

50 
ADC_Comm⁄InôSåu˘uª
.
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

51 
ADC_Comm⁄InôSåu˘uª
.
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

52 
ADC_Comm⁄InôSåu˘uª
.
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

53 
	`ADC_Comm⁄Inô
(&
ADC_Comm⁄InôSåu˘uª
);

56 
ADC_InôSåu˘uª
.
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

57 
ADC_InôSåu˘uª
.
ADC_SˇnC⁄vMode
 = 
ENABLE
;

58 
ADC_InôSåu˘uª
.
ADC_C⁄töuousC⁄vMode
 = 
ENABLE
;

59 
ADC_InôSåu˘uª
.
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_Risög
;

60 
ADC_InôSåu˘uª
.
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC3
;

61 
ADC_InôSåu˘uª
.
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

62 
ADC_InôSåu˘uª
.
ADC_NbrOfC⁄vîsi⁄
 = 9;

63 
	`ADC_Inô
(
ADC1
, &
ADC_InôSåu˘uª
);

67 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_1
, 1, 
ADC_Sam∂eTime_480Cy˛es
);

68 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_2
, 2, 
ADC_Sam∂eTime_480Cy˛es
);

69 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_3
, 3, 
ADC_Sam∂eTime_480Cy˛es
);

70 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_4
, 4, 
ADC_Sam∂eTime_480Cy˛es
);

71 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_5
, 5, 
ADC_Sam∂eTime_480Cy˛es
);

72 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_6
, 6, 
ADC_Sam∂eTime_480Cy˛es
);

73 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_7
, 7, 
ADC_Sam∂eTime_480Cy˛es
);

74 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_14
, 8, 
ADC_Sam∂eTime_480Cy˛es
);

75 
	`ADC_ReguœrCh™√lC⁄fig
(
ADC1
, 
ADC_Ch™√l_15
, 9, 
ADC_Sam∂eTime_480Cy˛es
);

78 
	`ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC1
, 
ENABLE
);

81 
	`ADC_DMACmd
(
ADC1
, 
ENABLE
);

84 
	`ADC_Cmd
(
ADC1
, 
ENABLE
);

87 
ADC1
->
CR2
 |= 0x40000000;

90 
	}
}

93 
	gA«logIn
::
	$gëVﬁèges
(
vﬁèges
[9])

95 
uöt8_t
 
i
 = 0; i < 9; i++)

97 
vﬁèges
[
i
] = 
adc_øw_vÆues_
[i] * 3.3f / 0xFFF;

99 
	}
}

102 
	gA«logIn
::
	$£tupI¡îru±
()

104 
	`DMA_ITC⁄fig
(
DMA2_Såóm0
, 
DMA_IT_TC
, 
ENABLE
);

105 
	}
}

108 "C" 
	$DMA2_Såóm0_IRQH™dÀr
()

110 
uöt32_t
 
cou¡
;

112 i‡(
	`DMA_GëITSètus
(
DMA2_Såóm0
, 
DMA_IT_TCIF0
))

115 
	`DMA_CÀ¨ITPídögBô
(
DMA2_Såóm0
, 
DMA_IT_TCIF0
);

117 
cou¡
++;

118 i‡(
cou¡
 > 81300)

120 
cou¡
--;

123 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\bootloader_init.cpp

2 
	~"boŸlﬂdî_öô.h
"

3 
	~<c°döt
>

4 
	~"°m32f4xx_rcc.h
"

7 
	$boŸlﬂdî_öô
()

12 
uöt32_t
 
Êag_loˇti⁄
 = 0x2001FFF1;

13 *((
uöt32_t
 *)
Êag_loˇti⁄
) = 0xDEADBEEF;

15 
	`NVIC_Sy°emRe£t
();

16 
	}
}

18 
	$boŸlﬂdî_öô_›ti⁄2
(
boﬁ
 
usög_usb
)

23 (*
	tboŸ_jump_t
)();

24 
boŸ_jump_t
 
sys_mem_boŸ_jump
 = (boŸ_jump_t)(*((
uöt32_t
 *) 0x1fff0004));

27 
	`RCC_DeInô
();

30 
SysTick
->
CTRL
 = 0;

31 
SysTick
->
LOAD
 = 0;

32 
SysTick
->
VAL
 = 0;

35 
	`RCC_SYSCLKC⁄fig
(
RCC_SYSCLKSour˚_HSI
);

37 i‡(
usög_usb
)

40 
	`__£t_PRIMASK
(0);

46 
	`__£t_PRIMASK
(1);

51 
	`__£t_MSP
(0x20001D80);

54 
	`sys_mem_boŸ_jump
();

56 
åue
);

57 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\complementary_filter.cpp

2 
	~<m©h.h
>

3 
	~<°rög.h
>

5 
	~"com∂emíèry_fûãr.h
"

6 
	~"co‹dö©e_c⁄vîsi⁄s.h
"

7 
	~"physiˇl_c⁄°™ts.h
"

10 
	gCom∂emíèryFûãr
::
	$Com∂emíèryFûãr
()

12 
cuâoff
 = 6.28f / 6.0f;

13 
k∑_
 = 
cuâoff
;

14 
kü_
 = 
cuâoff
 * cuttoff;

16 
qu©_
[0] = 1.0f;

17 
qu©_
[1] = quat_[2] = quat_[3] = 0.0f;

19 
	`mem£t
(
©t_öãgøl_
, 0, (att_integral_));

20 
	}
}

23 
	gCom∂emíèryFûãr
::
	$upd©e
(
dt
, c⁄° 
gyros
[3], c⁄° 
ac˚ls
[3])

25 
îr‹
[3];

26 
ac˚ls_mag
;

27 
¥edi˘ed_ac˚ls_mag
;

28 
ac˚ls_dúe˘i⁄
[3];

29 
ac˚ls_¥edi˘ed
[3];

30 
rbe
[3][3];

31 
up
[3];

36 
	`qu©îni⁄_2_R
(
qu©_
, 
rbe
);

37 
up
[0] = 
rbe
[0][2];

38 
up
[1] = 
rbe
[1][2];

39 
up
[2] = 
rbe
[2][2];

46 
ac˚ls_¥edi˘ed
[0] = 
up
[0] * 
GRAVITY
;

47 
ac˚ls_¥edi˘ed
[1] = 
up
[1] * 
GRAVITY
;

48 
ac˚ls_¥edi˘ed
[2] = 
up
[2] * 
GRAVITY
;

51 
¥edi˘ed_ac˚ls_mag
 = 
	`ve˘‹_magnôude
(
ac˚ls_¥edi˘ed
);

52 
ac˚ls_mag
 = 
	`ve˘‹_magnôude
(
ac˚ls
);

54 i‡–(
	`Ábsf
(
¥edi˘ed_ac˚ls_mag
Ë< 1e-30Ë|| (Ábsf(
ac˚ls_mag
) < 1e-30) )

57 
ac˚ls_dúe˘i⁄
[0] =áccels_direction[1] =áccels_direction[2] = 0.0f;

62 
ac˚ls_dúe˘i⁄
[0] = 
ac˚ls
[0] / 
ac˚ls_mag
;

63 
ac˚ls_dúe˘i⁄
[1] = 
ac˚ls
[1] / 
ac˚ls_mag
;

64 
ac˚ls_dúe˘i⁄
[2] = 
ac˚ls
[2] / 
ac˚ls_mag
;

65 
ac˚ls_¥edi˘ed
[0] /
¥edi˘ed_ac˚ls_mag
;

66 
ac˚ls_¥edi˘ed
[1] /
¥edi˘ed_ac˚ls_mag
;

67 
ac˚ls_¥edi˘ed
[2] /
¥edi˘ed_ac˚ls_mag
;

71 
	`¸oss_¥odu˘
(
ac˚ls_dúe˘i⁄
, 
ac˚ls_¥edi˘ed
, 
îr‹
);

75 
©t_öãgøl_
[0] +
îr‹
[0] * 
dt
;

76 
©t_öãgøl_
[1] +
îr‹
[1] * 
dt
;

77 
©t_öãgøl_
[2] +
îr‹
[2] * 
dt
;

80 
wx
 = 
gyros
[0] + 
k∑_
*
îr‹
[0] + 
kü_
*
©t_öãgøl_
[0];

81 
wy
 = 
gyros
[1] + 
k∑_
*
îr‹
[1] + 
kü_
*
©t_öãgøl_
[1];

82 
wz
 = 
gyros
[2] + 
k∑_
*
îr‹
[2] + 
kü_
*
©t_öãgøl_
[2];

85 
qdŸ
[4];

86 
qdŸ
[0] = (-
qu©_
[1]*
wx
 - qu©_[2]*
wy
 - qu©_[3]*
wz
) / 2.0f;

87 
qdŸ
[1] = ( 
qu©_
[0]*
wx
 - qu©_[3]*
wy
 + qu©_[2]*
wz
) / 2.0f;

88 
qdŸ
[2] = ( 
qu©_
[3]*
wx
 + qu©_[0]*
wy
 - qu©_[1]*
wz
) / 2.0f;

89 
qdŸ
[3] = (-
qu©_
[2]*
wx
 + qu©_[1]*
wy
 + qu©_[0]*
wz
) / 2.0f;

92 
qu©_
[0] +
qdŸ
[0] * 
dt
;

93 
qu©_
[1] +
qdŸ
[1] * 
dt
;

94 
qu©_
[2] +
qdŸ
[2] * 
dt
;

95 
qu©_
[3] +
qdŸ
[3] * 
dt
;

98 
	`£tAâôude
(
qu©_
);

99 
	}
}

102 
	gCom∂emíèryFûãr
::
	$£tAâôude
(c⁄° 
qu©îni⁄
[4])

107 
qu©_sign
 = (
qu©îni⁄
[0] < 0) ? -1 : 1;

108 
qu©_mag
 = 
	`qu©_magnôude
(
qu©îni⁄
);

109 
uöt8_t
 
i
 = 0; i < 4; i++)

111 
qu©_
[
i
] = (
qu©îni⁄
[i] * 
qu©_sign
Ë/ 
qu©_mag
;

113 
	}
}

116 
	gCom∂emíèryFûãr
::
	$gëAâôude
(
qu©îni⁄
[4])

118 
qu©îni⁄
[0] = 
qu©_
[0];

119 
qu©îni⁄
[1] = 
qu©_
[1];

120 
qu©îni⁄
[2] = 
qu©_
[2];

121 
qu©îni⁄
[3] = 
qu©_
[3];

122 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\coordinate_conversions.cpp

1 
	~<m©h.h
>

2 
	~"co‹dö©e_c⁄vîsi⁄s.h
"

5 
	$Œa_2_e˚f
(c⁄° 
Œa
[3],

6 
e˚f
[3])

8 c⁄° 
a
 = 6378137.0;

9 c⁄° 
e
 = 8.1819190842622e-2;

10 
söL©
, 
söL⁄
, 
cosL©
, 
cosL⁄
;

11 
N
;

13 
söL©
 = 
	`sö
(
Œa
[0]);

14 
söL⁄
 = 
	`sö
(
Œa
[1]);

15 
cosL©
 = 
	`cos
(
Œa
[0]);

16 
cosL⁄
 = 
	`cos
(
Œa
[1]);

18 
N
 = 
a
 / 
	`sqπ
(1.0 - 
e
 *É * 
söL©
 * sinLat);

20 
e˚f
[0] = (
N
 + 
Œa
[2]Ë* 
cosL©
 * 
cosL⁄
;

21 
e˚f
[1] = (
N
 + 
Œa
[2]Ë* 
cosL©
 * 
söL⁄
;

22 
e˚f
[2] = ((1 - 
e
 *ÉË* 
N
 + 
Œa
[2]Ë* 
söL©
;

23 
	}
}

26 
uöt16_t
 
	$e˚f_2_Œa
(c⁄° 
e˚f
[3],

27 
Œa
[3])

29 c⁄° 
a
 = 6378137.0;

30 c⁄° 
e
 = 8.1819190842622e-2;

31 
x
 = 
e˚f
[0], 
y
 =É˚f[1], 
z
 =Écef[2];

32 
L©
, 
N
, 
N∂usH
, 
dñè
, 
esL©
;

33 
uöt16_t
 
ôî
;

35 
	#MAX_ITER
 10

36 
	#ACCURACY
 1.0e-11

	)

38 
Œa
[1] = 
	`©™2
(
y
, 
x
);

39 
L©
 = 
Œa
[0];

40 
esL©
 = 
e
 * 
	`sö
(
L©
);

41 
N
 = 
a
 / 
	`sqπ
(1 - 
esL©
 *ÉsLat);

42 
N∂usH
 = 
N
 + 
Œa
[2];

43 
dñè
 = 1;

44 
ôî
 = 0;

46 ((
dñè
 > 
ACCURACY
Ë|| (dñè < -ACCURACY)Ë&& (
ôî
 < 
MAX_ITER
))

48 
dñè
 = 
L©
 - 
	`©™
(
z
 / (
	`sqπ
(
x
 * x + 
y
 * yË* (1 - (
N
 * 
e
 *É / 
N∂usH
))));

49 
L©
 = L© - 
dñè
;

50 
esL©
 = 
e
 * 
	`sö
(
L©
);

51 
N
 = 
a
 / 
	`sqπ
(1 - 
esL©
 *ÉsLat);

52 
N∂usH
 = 
	`sqπ
(
x
 * x + 
y
 * yË/ 
	`cos
(
L©
);

53 
ôî
 += 1;

56 
Œa
[0] = 
L©
;

57 
Œa
[2] = 
N∂usH
 - 
N
;

59  (
ôî
 < 
MAX_ITER
);

60 
	}
}

63 
	$R√_‰om_Œa
(c⁄° 
Œa
[3],

64 
R√
[3][3])

66 
söL©
, 
söL⁄
, 
cosL©
, 
cosL⁄
;

68 
söL©
 = 
	`söf
(
Œa
[0]);

69 
söL⁄
 = 
	`söf
(
Œa
[1]);

70 
cosL©
 = 
	`cosf
(
Œa
[0]);

72 
cosL⁄
 = 
	`cosf
(
Œa
[1]);

74 
R√
[0][0] = -
söL©
 * 
cosL⁄
;

75 
R√
[0][1] = -
söL©
 * 
söL⁄
;

76 
R√
[0][2] = 
cosL©
;

77 
R√
[1][0] = -
söL⁄
;

78 
R√
[1][1] = 
cosL⁄
;

79 
R√
[1][2] = 0;

80 
R√
[2][0] = -
cosL©
 * 
cosL⁄
;

81 
R√
[2][1] = -
cosL©
 * 
söL⁄
;

82 
R√
[2][2] = -
söL©
;

83 
	}
}

86 
	$qu©îni⁄_2_Ωy
(c⁄° 
q
[4],

87 
Ωy
[3])

89 
R13
, 
R11
, 
R12
, 
R23
, 
R33
;

90 
q0s
 = 
q
[0] * q[0];

91 
q1s
 = 
q
[1] * q[1];

92 
q2s
 = 
q
[2] * q[2];

93 
q3s
 = 
q
[3] * q[3];

95 
R13
 = 2.0‡* (
q
[1] * q[3] - q[0] * q[2]);

96 
R11
 = 
q0s
 + 
q1s
 - 
q2s
 - 
q3s
;

97 
R12
 = 2.0‡* (
q
[1] * q[2] + q[0] * q[3]);

98 
R23
 = 2.0‡* (
q
[2] * q[3] + q[0] * q[1]);

99 
R33
 = 
q0s
 - 
q1s
 - 
q2s
 + 
q3s
;

101 
Ωy
[1] = 
	`asöf
(-
R13
);

102 
Ωy
[2] = 
	`©™2f
(
R12
, 
R11
);

103 
Ωy
[0] = 
	`©™2f
(
R23
, 
R33
);

111 
	}
}

114 
	$Ωy_2_qu©îni⁄
(c⁄° 
Ωy
[3],

115 
q
[4])

117 
phi
, 
thëa
, 
psi
;

118 
˝hi
, 
•hi
, 
˘hëa
, 
°hëa
, 
˝si
, 
•si
;

120 
phi
 = 
Ωy
[0] / 2;

121 
thëa
 = 
Ωy
[1] / 2;

122 
psi
 = 
Ωy
[2] / 2;

123 
˝hi
 = 
	`cosf
(
phi
);

124 
•hi
 = 
	`söf
(
phi
);

125 
˘hëa
 = 
	`cosf
(
thëa
);

126 
°hëa
 = 
	`söf
(
thëa
);

127 
˝si
 = 
	`cosf
(
psi
);

128 
•si
 = 
	`söf
(
psi
);

130 
q
[0] = 
˝hi
 * 
˘hëa
 * 
˝si
 + 
•hi
 * 
°hëa
 * 
•si
;

131 
q
[1] = 
•hi
 * 
˘hëa
 * 
˝si
 - 
˝hi
 * 
°hëa
 * 
•si
;

132 
q
[2] = 
˝hi
 * 
°hëa
 * 
˝si
 + 
•hi
 * 
˘hëa
 * 
•si
;

133 
q
[3] = 
˝hi
 * 
˘hëa
 * 
•si
 - 
•hi
 * 
°hëa
 * 
˝si
;

135 i‡(
q
[0] < 0)

137 
q
[0] = -q[0];

138 
q
[1] = -q[1];

139 
q
[2] = -q[2];

140 
q
[3] = -q[3];

142 
	}
}

145 
	$qu©îni⁄_2_R
(c⁄° 
q
[4],

146 
Rbe
[3][3])

148 
q0s
 = 
q
[0]*q[0], 
q1s
 = q[1]*q[1], 
q2s
 = q[2]*q[2], 
q3s
 = q[3]*q[3];

150 
Rbe
[0][0] = 
q0s
 + 
q1s
 - 
q2s
 - 
q3s
;

151 
Rbe
[0][1] = 2 * (
q
[1] * q[2] + q[0] * q[3]);

152 
Rbe
[0][2] = 2 * (
q
[1] * q[3] - q[0] * q[2]);

153 
Rbe
[1][0] = 2 * (
q
[1] * q[2] - q[0] * q[3]);

154 
Rbe
[1][1] = 
q0s
 - 
q1s
 + 
q2s
 - 
q3s
;

155 
Rbe
[1][2] = 2 * (
q
[2] * q[3] + q[0] * q[1]);

156 
Rbe
[2][0] = 2 * (
q
[1] * q[3] + q[0] * q[2]);

157 
Rbe
[2][1] = 2 * (
q
[2] * q[3] - q[0] * q[1]);

158 
Rbe
[2][2] = 
q0s
 - 
q1s
 - 
q2s
 + 
q3s
;

159 
	}
}

162 
	$qu©îni⁄_rŸ
(c⁄° 
q
[4],

163 c⁄° 
vec
[3],

164 
boﬁ
 
ªvî£
,

165 
out_vec
[3])

167 
q0
,
q1
,
q2
,
q3
;

168 
q11
,
q22
,
q33
,
q01
,
q02
,
q03
,
q12
,
q13
,
q23
;

170 i‡(
ªvî£
)

172 
q0
=
q
[0]; 
q1
=-q[1]; 
q2
=-q[2]; 
q3
=-q[3];

176 
q0
=
q
[0]; 
q1
=q[1]; 
q2
=q[2]; 
q3
=q[3];

178 
q11
=
q1
*q1; 
q22
=
q2
*q2; 
q33
=
q3
*q3;

179 
q01
=
q0
*
q1
; 
q02
=q0*
q2
; 
q03
=q0*
q3
; 
q12
=q1*q2; 
q13
=q1*q3; 
q23
=q2*q3;

181 
out_vec
[0] = (1-2*(
q22
 + 
q33
))*
vec
[0] + 2*(
q12
 + 
q03
)*vec[1] + 2*(
q13
 - 
q02
)*vec[2];

182 
out_vec
[1] = 2*(
q12
 - 
q03
)*
vec
[0] + (1-2*(
q11
 + 
q33
))*vec[1] + 2*(
q23
 + 
q01
)*vec[2];

183 
out_vec
[2] = 2*(
q13
 + 
q02
)*
vec
[0] + 2*(
q23
 - 
q01
)*vec[1] + (1-2*(
q11
 + 
q22
))*vec[2];

184 
	}
}

187 
	$Ωy_2_R
(c⁄° 
Ωy
[3],

188 
Rbe
[3][3])

190 
sF
 = 
	`söf
(
Ωy
[0]), 
cF
 = 
	`cosf
(rpy[0]);

191 
sT
 = 
	`söf
(
Ωy
[1]), 
cT
 = 
	`cosf
(rpy[1]);

192 
sP
 = 
	`söf
(
Ωy
[2]), 
cP
 = 
	`cosf
(rpy[2]);

194 
Rbe
[0][0] = 
cT
*
cP
;

195 
Rbe
[0][1] = 
cT
*
sP
;

196 
Rbe
[0][2] = -
sT
;

197 
Rbe
[1][0] = 
sF
*
sT
*
cP
 - 
cF
*
sP
;

198 
Rbe
[1][1] = 
sF
*
sT
*
sP
 + 
cF
*
cP
;

199 
Rbe
[1][2] = 
cT
*
sF
;

200 
Rbe
[2][0] = 
cF
*
sT
*
cP
 + 
sF
*
sP
;

201 
Rbe
[2][1] = 
cF
*
sT
*
sP
 - 
sF
*
cP
;

202 
Rbe
[2][2] = 
cT
*
cF
;

203 
	}
}

206 
	$R_2_qu©îni⁄
(c⁄° 
Rbe
[3][3],

207 
q
[4])

209 
m
[4], 
mag
;

210 
uöt8_t
 
ödex
,
i
;

212 
m
[0] = 1 + 
Rbe
[0][0] + Rbe[1][1] + Rbe[2][2];

213 
m
[1] = 1 + 
Rbe
[0][0] - Rbe[1][1] - Rbe[2][2];

214 
m
[2] = 1 - 
Rbe
[0][0] + Rbe[1][1] - Rbe[2][2];

215 
m
[3] = 1 - 
Rbe
[0][0] - Rbe[1][1] + Rbe[2][2];

218 
ödex
 = 0;

219 
mag
 = 
m
[0];

220 
i
=1;i<4;i++)

222 i‡(
m
[
i
] > 
mag
)

224 
mag
 = 
m
[
i
];

225 
ödex
 = 
i
;

228 
mag
 = 2*
	`sqπf
(mag);

230 i‡(
ödex
 == 0)

232 
q
[0] = 
mag
/4;

233 
q
[1] = (
Rbe
[1][2]-Rbe[2][1])/
mag
;

234 
q
[2] = (
Rbe
[2][0]-Rbe[0][2])/
mag
;

235 
q
[3] = (
Rbe
[0][1]-Rbe[1][0])/
mag
;

237 i‡(
ödex
 == 1)

239 
q
[1] = 
mag
/4;

240 
q
[0] = (
Rbe
[1][2]-Rbe[2][1])/
mag
;

241 
q
[2] = (
Rbe
[0][1]+Rbe[1][0])/
mag
;

242 
q
[3] = (
Rbe
[0][2]+Rbe[2][0])/
mag
;

244 i‡(
ödex
 == 2)

246 
q
[2] = 
mag
/4;

247 
q
[0] = (
Rbe
[2][0]-Rbe[0][2])/
mag
;

248 
q
[1] = (
Rbe
[0][1]+Rbe[1][0])/
mag
;

249 
q
[3] = (
Rbe
[1][2]+Rbe[2][1])/
mag
;

253 
q
[3] = 
mag
/4;

254 
q
[0] = (
Rbe
[0][1]-Rbe[1][0])/
mag
;

255 
q
[1] = (
Rbe
[0][2]+Rbe[2][0])/
mag
;

256 
q
[2] = (
Rbe
[1][2]+Rbe[2][1])/
mag
;

260 i‡(
q
[0] < 0)

262 
q
[0] = -q[0];

263 
q
[1] = -q[1];

264 
q
[2] = -q[2];

265 
q
[3] = -q[3];

267 
	}
}

270 
uöt8_t
 
	$R_‰om_two_ve˘‹s
(c⁄° 
v1b
[3],

271 c⁄° 
v1e
[3],

272 c⁄° 
v2b
[3],

273 c⁄° 
v2e
[3],

274 
Rbe
[3][3])

276 
Rib
[3][3], 
Rõ
[3][3];

277 
mag
;

278 
uöt8_t
 
i
,
j
,
k
;

281 
i
=0;i<3;i++)

283 
j
=0;j<3;j++)

284 
Rbe
[
i
][
j
]=0;

285 
Rbe
[
i
][i]=1;

289 
mag
 = 
	`ve˘‹_magnôude
(
v1b
);

290 i‡(
	`Ábsf
(
mag
) < 1e-30)

292 
i
=0;i<3;i++)

293 
Rib
[0][
i
]=
v1b
[i]/
mag
;

295 
mag
 = 
	`ve˘‹_magnôude
(
v1e
);

296 i‡(
	`Ábs
(
mag
) < 1e-30)

298 
i
=0;i<3;i++)

299 
Rõ
[0][
i
]=
v1e
[i]/
mag
;

302 
	`¸oss_¥odu˘
(
v1b
,
v2b
,&
Rib
[1][0]);

303 
mag
 = 
	`ve˘‹_magnôude
(&
Rib
[1][0]);

304 i‡(
	`Ábsf
(
mag
) < 1e-30)

306 
i
=0;i<3;i++)

307 
Rib
[1][
i
]=Rib[1][i]/
mag
;

309 
	`¸oss_¥odu˘
(
v1e
,
v2e
,&
Rõ
[1][0]);

310 
mag
 = 
	`ve˘‹_magnôude
(&
Rõ
[1][0]);

311 i‡(
	`Ábsf
(
mag
) < 1e-30)

313 
i
=0;i<3;i++)

314 
Rõ
[1][
i
]=Rõ[1][i]/
mag
;

317 
	`¸oss_¥odu˘
(&
Rib
[0][0],&Rib[1][0],&Rib[2][0]);

318 
	`¸oss_¥odu˘
(&
Rõ
[0][0],&Rie[1][0],&Rie[2][0]);

321 
i
=0;i<3;i++)

322 
j
=0;j<3;j++)

324 
Rbe
[
i
][
j
]=0;

325 
k
=0;k<3;k++)

326 
Rbe
[
i
][
j
] +
Rib
[
k
][i]*
Rõ
[k][j];

330 
	}
}

333 
	$rvec_2_R
(c⁄° 
rvec
[3],

334 
R
[3][3])

336 
q
[4];

338 
™gÀ
 = 
	`ve˘‹_magnôude
(
rvec
);

339 i‡(
™gÀ
 <= 0.00048828125f)

342 
q
[0] = 1.0f;

345 
q
[1] = 0.5f*
rvec
[0];

346 
q
[2] = 0.5f*
rvec
[1];

347 
q
[3] = 0.5f*
rvec
[2];

352 
q
[0] = 
	`cosf
(
™gÀ
*0.5f);

353 
sˇÀ
 = 
	`söf
(
™gÀ
*0.5f) /ángle;

354 
q
[1] = 
sˇÀ
*
rvec
[0];

355 
q
[2] = 
sˇÀ
*
rvec
[1];

356 
q
[3] = 
sˇÀ
*
rvec
[2];

359 
	`qu©îni⁄_2_R
(
q
, 
R
);

360 
	}
}

363 
	$¸oss_¥odu˘
(c⁄° 
v1
[3],

364 c⁄° 
v2
[3],

365 
ªsu…
[3])

367 
ªsu…
[0] = 
v1
[1]*
v2
[2] - v2[1]*v1[2];

368 
ªsu…
[1] = 
v2
[0]*
v1
[2] - v1[0]*v2[2];

369 
ªsu…
[2] = 
v1
[0]*
v2
[1] - v2[0]*v1[1];

370 
	}
}

373 
	$≥Ωídicuœr_comp⁄ít
(c⁄° 
v1
[3],

374 c⁄° 
v2
[3],

375 
ªsu…
[3])

377 
dŸ_mag_squ¨ed
;

379 
dŸ_mag_squ¨ed
 = (
v1
[0]*
v2
[0] + v1[1]*v2[1] + v1[2]*v2[2])/

380 (
v2
[0]*v2[0] + v2[1]*v2[1] + v2[2]*v2[2]);

382 
ªsu…
[0] = 
v1
[0] - 
dŸ_mag_squ¨ed
*
v2
[0];

383 
ªsu…
[1] = 
v1
[1] - 
dŸ_mag_squ¨ed
*
v2
[1];

384 
ªsu…
[2] = 
v1
[2] - 
dŸ_mag_squ¨ed
*
v2
[2];

385 
	}
}

388 
	$ve˘‹_magnôude
(c⁄° 
v
[3])

390  
	`sqπf
(
v
[0]*v[0] + v[1]*v[1] + v[2]*v[2]);

391 
	}
}

394 
	$qu©_magnôude
(c⁄° 
q
[4])

396  
	`sqπf
(
q
[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);

397 
	}
}

400 
	$qu©_övî£
(
q
[4])

402 
q
[1] = -q[1];

403 
q
[2] = -q[2];

404 
q
[3] = -q[3];

405 
	}
}

408 
	$qu©_mu…
(c⁄° 
q1
[4], c⁄° 
q2
[4], 
qout
[4])

410 
qout
[0] = 
q1
[0]*
q2
[0] - q1[1]*q2[1] - q1[2]*q2[2] - q1[3]*q2[3];

411 
qout
[1] = 
q1
[0]*
q2
[1] + q1[1]*q2[0] + q1[2]*q2[3] - q1[3]*q2[2];

412 
qout
[2] = 
q1
[0]*
q2
[2] - q1[1]*q2[3] + q1[2]*q2[0] + q1[3]*q2[1];

413 
qout
[3] = 
q1
[0]*
q2
[3] + q1[1]*q2[2] - q1[2]*q2[1] + q1[3]*q2[0];

414 
	}
}

417 
	$qu©_£rõs
(c⁄° 
qcb
[4], c⁄° 
qba
[4], 
qˇ
[4])

419 
qˇ
[0] = 
qba
[0]*
qcb
[0] - qba[1]*qcb[1] - qba[2]*qcb[2] - qba[3]*qcb[3];

420 
qˇ
[1] = 
qba
[0]*
qcb
[1] + qba[1]*qcb[0] + qba[2]*qcb[3] - qba[3]*qcb[2];

421 
qˇ
[2] = 
qba
[0]*
qcb
[2] - qba[1]*qcb[3] + qba[2]*qcb[0] + qba[3]*qcb[1];

422 
qˇ
[3] = 
qba
[0]*
qcb
[3] + qba[1]*qcb[2] - qba[2]*qcb[1] + qba[3]*qcb[0];

423 
	}
}

426 
	$rŸ_mu…
(c⁄° 
R
[3][3], c⁄° 
vec
[3], 
vec_out
[3], 
boﬁ
 
å™•o£
)

428 i‡(!
å™•o£
)

430 
vec_out
[0] = 
R
[0][0] * 
vec
[0] + R[0][1] * vec[1] + R[0][2] * vec[2];

431 
vec_out
[1] = 
R
[1][0] * 
vec
[0] + R[1][1] * vec[1] + R[1][2] * vec[2];

432 
vec_out
[2] = 
R
[2][0] * 
vec
[0] + R[2][1] * vec[1] + R[2][2] * vec[2];

436 
vec_out
[0] = 
R
[0][0] * 
vec
[0] + R[1][0] * vec[1] + R[2][0] * vec[2];

437 
vec_out
[1] = 
R
[0][1] * 
vec
[0] + R[1][1] * vec[1] + R[2][1] * vec[2];

438 
vec_out
[2] = 
R
[0][2] * 
vec
[0] + R[1][2] * vec[1] + R[2][2] * vec[2];

440 
	}
}

443 
	#JAN61980
 44244

	)

444 
	#JAN11901
 15385

	)

445 
	$gps_2_ymdhms
(
uöt16_t
 
gps_wìk
, 
uöt32_t
 
m£c_of_wìk
, uöt16_à*
yór
,

446 
uöt8_t
 *
m⁄th
, uöt8_à*
day
, uöt8_à*
hour
, uöt8_à*
möuã
,

447 
uöt16_t
 *
m£c
)

449 c⁄° 
uöt16_t
 
m⁄th_day
[2][13] = {

453 
uöt8_t
 
À≠
, 
guess
, 
m‹e
;

454 
uöt32_t
 
mod_julün_day
, 
m£c_of_day
, 
days_‰_j™1_1901
, 
yday
;

455 
uöt32_t
 
dñè_yrs
, 
num_four_yrs
, 
yórs_so_Ár
, 
days_À·
;

457 
m£c_of_day
 = 
m£c_of_wìk
 - (msec_of_week/86400000)*86400000;

458 *
hour
 = 
m£c_of_day
/3600000;

459 *
möuã
 = (
m£c_of_day
-*
hour
*3600000)/60000;

460 *
m£c
 = 
m£c_of_day
 - *
hour
*3600000 - *
möuã
*60000;

462 
mod_julün_day
 = 
gps_wìk
*7 + 
m£c_of_wìk
/86400000 + 
JAN61980
;

463 
days_‰_j™1_1901
 = 
mod_julün_day
 - 
JAN11901
;

464 
num_four_yrs
 = 
days_‰_j™1_1901
/1461;

465 
yórs_so_Ár
 = 1901 + 4*
num_four_yrs
;

466 
days_À·
 = 
days_‰_j™1_1901
 - 1461*
num_four_yrs
;

467 
dñè_yrs
 = 
days_À·
/365 - days_left/1460;

468 *
yór
 = 
yórs_so_Ár
 + 
dñè_yrs
;

469 
yday
 = 
days_À·
 - 365*
dñè_yrs
 + 1;

470 
À≠
 = ( *
yór
%4 == 0 );

471 
guess
 = (
uöt8_t
)(()
yday
*0.032f);

472 
m‹e
 = ( ( (
öt32_t
)
yday
 - 
m⁄th_day
[
À≠
][
guess
+1] ) > 0 );

473 *
m⁄th
 = 
guess
 + 
m‹e
 + 1;

474 *
day
 = 
yday
 - 
m⁄th_day
[
À≠
][
guess
+
m‹e
];

475 
	}
}

478 
	$Œa_2_√d_löór
(c⁄° 
öt32_t
 
Œa
[3], c⁄° i¡32_à
home_Œa
[3],

479 
dñè_œt_n‹th
, 
dñè_l⁄_ó°
, 
√d
[3])

481 
√d
[0] = ()(
Œa
[0]-
home_Œa
[0])*1e-7/
dñè_œt_n‹th
;

482 
√d
[1] = ()(
Œa
[1]-
home_Œa
[1])*1e-7/
dñè_l⁄_ó°
;

483 
√d
[2] = -()(
Œa
[2]-
home_Œa
[2])/100.0f;

484 
	}
}

487 
	$√d_2_Œa_löór
(c⁄° 
√d
[3], c⁄° 
öt32_t
 
home_Œa
[3],

488 
dñè_œt_n‹th
, 
dñè_l⁄_ó°
, 
öt32_t
 
Œa
[3])

490 
Œa
[0] = (
öt32_t
)(
√d
[0]*
dñè_œt_n‹th
*1e7Ë+ 
home_Œa
[0];

491 
Œa
[1] = (
öt32_t
)(
√d
[1]*
dñè_l⁄_ó°
*1e7Ë+ 
home_Œa
[1];

492 
Œa
[2] = -(
öt32_t
)(
√d
[2]*100.0fË+ 
home_Œa
[2];

493 
	}
}

496 
	$ac˚ls_2_zîoyaw_rŸm
(c⁄° 
ac˚ls
[3], 
Rbe
[3][3])

498 
mag
 = 
	`sqπf
(
ac˚ls
[0]*accels[0] +áccels[1]*accels[1] +áccels[2]*accels[2]);

501 
Rbe
[0][2]-
ac˚ls
[0]/
mag
;

502 
Rbe
[1][2]-
ac˚ls
[1]/
mag
;

503 
Rbe
[2][2]-
ac˚ls
[2]/
mag
;

506 
Rbe
[0][1] = 0.0f;

507 
Rbe
[0][0] = 
	`sqπf
( 1.0f - Rbe[0][2]*Rbe[0][2] );

511 i‡(
Rbe
[0][0] < 0.01f)

514 
Rbe
[1][0] = 0.0f;

515 
Rbe
[1][1] = 
	`sqπ
( 1.0f - Rbe[1][2]*Rbe[1][2] );

518 
Rbe
[0][1] = -Rbe[0][2]*Rbe[1][2]/Rbe[1][1];

520 
Rbe
[2][1] = -Rbe[2][2]*Rbe[1][2]/Rbe[1][1];

523 
Rbe
[0][0] = Rbe[1][1]*Rbe[2][2] - Rbe[2][1]*Rbe[1][2];

524 
Rbe
[2][0] = Rbe[0][1]*Rbe[1][2] - Rbe[1][1]*Rbe[0][2];

529 
Rbe
[1][0] = -Rbe[0][2]*Rbe[1][2]/Rbe[0][0];

531 
Rbe
[2][0] = -Rbe[0][2]*Rbe[2][2]/Rbe[0][0];

534 
Rbe
[1][1] = Rbe[2][2]*Rbe[0][0] - Rbe[0][2]*Rbe[2][0];

535 
Rbe
[2][1] = Rbe[0][2]*Rbe[1][0] - Rbe[1][2]*Rbe[0][0];

537 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\crc.cpp

1 
	~"¸c.h
"

4 c⁄° 
uöt16_t
 
	glookup_èbÀ
[] =

35 
uöt16_t
 
	$ˇlcuœã_¸c
(
uöt8_t
 * 
buf„r
, 
uöt32_t
 
size
, 
uöt16_t
 
öô
)

37 
uöt16_t
 
¸c
 = 
öô
;

38 
size
--)

40 
¸c
 = (¸¯<< 8Ë^ 
lookup_èbÀ
[((¸¯>> 8Ë^ *
buf„r
++) & 0xFFFF];

42  
¸c
;

43 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\debug_printf.cpp

2 
	~<c°dio
>

3 
	~<c°rög
>

4 
	~<c°d¨g
>

6 
	~"ãÀmëry_£nd_èsk.h
"

7 
	~"globs.h
"

8 
	~"debug_¥ötf.h
"

9 
	~"ußπ.h
"

12 
	gdebug_¥ötf


14 c⁄° * 
	gf‹m©
,

18 
glo_debug_mesßge_t
 
	gdebug_mesßge
;

20 
va_li°
 
	g¨gs
;

21 
va_°¨t
(
¨gs
, 
f‹m©
);

22 
v¢¥ötf
(
debug_mesßge
.
ãxt
, 
TELEMETRY_TEXT_SIZE
, 
f‹m©
, 
¨gs
);

23 
va_íd
(
¨gs
);

25 
	g£nd_èsk
.
h™dÀ
(
debug_mesßge
);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\derivative_filter.cpp

2 
	~"dîiv©ive_fûãr.h
"

5 
	gDîiv©iveFûãr
::
	$Dîiv©iveFûãr
(
ßm∂e_time
, 
cuâoff_‰equícy
, 
dampög_øtio
)

7 
wn
 = 2 * 3.14159 * 
cuâoff_‰equícy
;

8 
T
 = 
ßm∂e_time
;

9 
zëa
 = 
dampög_øtio
;

12 
b0
 = (
T
*T*
wn
*w¿+ 4*
zëa
*T*wn + 4);

13 
b1_
 = (2*
T
*T*
wn
*w¿- 8)/
b0
;

14 
b2_
 = (
T
*T*
wn
*w¿- 4*
zëa
*T*w¿+ 4)/
b0
;

15 
a0_
 = 2*
T
*
wn
*wn/
b0
;

16 
a1_
 = 0/
b0
;

17 
a2_
 = (-2*
T
*
wn
*wn)/
b0
;

20 
	`ª£t
();

21 
	}
}

24 
	gDîiv©iveFûãr
::
	$ª£t
()

26 
vk1_
 = 
vk2_
 = 
pk1_
 = 
pk2_
 = 0;

27 
	}
}

30 
	gDîiv©iveFûãr
::
	$ˇlcuœã
(
posôi⁄
)

32 
vñocôy
 = 
a0_
*
posôi⁄
 + 
a1_
*
pk1_
 + 
a2_
*
pk2_
 - 
b1_
*
vk1_
 - 
b2_
*
vk2_
;

34 
pk2_
 = 
pk1_
;

35 
pk1_
 = 
posôi⁄
;

36 
vk2_
 = 
vk1_
;

37 
vk1_
 = 
vñocôy
;

39  
vñocôy
;

40 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\digital_in.cpp

2 
	~"digôÆ_ö.h
"

3 
	~"utû_as£π.h
"

6 
	gDigôÆIn
::
	$DigôÆIn
(
digôÆ_ö_pö_t
 
pö
, 
GPIOPuPd_Ty≥Def
 
puŒ_up_puŒ_down
)

8 
pö
)

10 
PB1
:

11 
gpio_pö_
 = 
GPIO_Pö_1
;

12 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOB
;

13 
p‹t_
 = 
GPIOB
;

15 
PC3
:

16 
gpio_pö_
 = 
GPIO_Pö_3
;

17 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOC
;

18 
p‹t_
 = 
GPIOC
;

21 
	`as£π_Æways_msg
(
ASSERT_STOP
, "UnsupportedÅype for digital inputÖin.");

26 
	`RCC_AHB1PîùhClockCmd
(
rcc_ahb1≥rùh_
, 
ENABLE
);

29 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

31 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
gpio_pö_
;

32 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

33 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

34 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

35 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
puŒ_up_puŒ_down
;

37 
	`GPIO_Inô
(
p‹t_
, &
GPIO_InôSåu˘uª
);

38 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\digital_out.cpp

2 
	~"digôÆ_out.h
"

5 
	gDigôÆOut
::
	$DigôÆOut
(
digôÆ_out_pö_t
 
pö
,

6 
GPIOOTy≥_Ty≥Def
 
out_ty≥
,

7 
GPIOPuPd_Ty≥Def
 
puŒ_up_puŒ_down
,

8 
uöt8_t
 
öôül_°©e
)

10 
pö
)

12 
PE13
:

13 
gpio_pö_
 = 
GPIO_Pö_13
;

14 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOE
;

15 
p‹t_
 = 
GPIOE
;

17 
PE14
:

18 
gpio_pö_
 = 
GPIO_Pö_14
;

19 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOE
;

20 
p‹t_
 = 
GPIOE
;

22 
PE15
:

23 
gpio_pö_
 = 
GPIO_Pö_15
;

24 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOE
;

25 
p‹t_
 = 
GPIOE
;

27 
PB10
:

28 
gpio_pö_
 = 
GPIO_Pö_10
;

29 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOB
;

30 
p‹t_
 = 
GPIOB
;

32 
PB4
:

33 
gpio_pö_
 = 
GPIO_Pö_4
;

34 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOB
;

35 
p‹t_
 = 
GPIOB
;

37 
PB5
:

38 
gpio_pö_
 = 
GPIO_Pö_5
;

39 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOB
;

40 
p‹t_
 = 
GPIOB
;

42 
PB8
:

43 
gpio_pö_
 = 
GPIO_Pö_8
;

44 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOB
;

45 
p‹t_
 = 
GPIOB
;

47 
PB9
:

48 
gpio_pö_
 = 
GPIO_Pö_9
;

49 
rcc_ahb1≥rùh_
 = 
RCC_AHB1Pîùh_GPIOB
;

50 
p‹t_
 = 
GPIOB
;

55 
	`RCC_AHB1PîùhClockCmd
(
rcc_ahb1≥rùh_
, 
ENABLE
);

58 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

59 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
gpio_pö_
;

60 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

61 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
out_ty≥
;

62 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

63 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
puŒ_up_puŒ_down
;

65 
	`GPIO_Inô
(
p‹t_
, &
GPIO_InôSåu˘uª
);

67 i‡(
öôül_°©e
)

69 
	`£t
();

73 
	`˛ór
();

75 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\dma_rx.cpp

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~"°m32f4xx.h
"

5 
	~"dma_rx.h
"

6 
	~"utû_as£π.h
"

9 
	gDmaRx
::
DmaRx


11 
DMA_Såóm_Ty≥Def
 * 
dma_°ªam
,

12 
uöt32_t
 
	gch™√l
,

13 
uöt32_t
 
	g≥rùh_ba£_addªss
,

14 
uöt32_t
 
	gbuff_Àngth


17 
	gbuff_Àngth_
 = 
buff_Àngth
;

18 
	gbuff_bŸtom_
 = 0;

19 
	gdma_°ªam_
 = 
dma_°ªam
;

20 
	gbuff_
 = 
√w
 
uöt8_t
[
buff_Àngth
];

21 
as£π
(
buff_
 !
NULL
, 
ASSERT_STOP
);

24 
RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA1
, 
ENABLE
);

25 
RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA2
, 
ENABLE
);

27 
DMA_InôTy≥Def
 
	gDMA_InôSåu˘uª
;

28 
DMA_DeInô
(
dma_°ªam
);

29 
	gDMA_InôSåu˘uª
.
	gDMA_Ch™√l
 = 
ch™√l
;

30 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆBa£Addr
 = (
uöt32_t
)
≥rùh_ba£_addªss
;

31 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)
buff_
;

32 
	gDMA_InôSåu˘uª
.
	gDMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

33 
	gDMA_InôSåu˘uª
.
	gDMA_Buf„rSize
 = 
buff_Àngth
;

34 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

35 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

36 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

37 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

38 
	gDMA_InôSåu˘uª
.
	gDMA_Mode
 = 
DMA_Mode_Cúcuœr
;

39 
	gDMA_InôSåu˘uª
.
	gDMA_Pri‹ôy
 = 
DMA_Pri‹ôy_High
;

40 
	gDMA_InôSåu˘uª
.
	gDMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

41 
	gDMA_InôSåu˘uª
.
	gDMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

42 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

43 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

44 
DMA_Inô
(
dma_°ªam
, &
DMA_InôSåu˘uª
);

46 
DMA_Cmd
(
dma_°ªam
, 
ENABLE
);

51 
	gDmaRx
::~
	$DmaRx
()

53 i‡(
buff_
 !
NULL
)

55 
dñëe
[] 
buff_
;

57 
	}
}

60 
boﬁ
 
	gDmaRx
::
	$em±y
() const

63 
uöt32_t
 
buff_t›
 = 
buff_Àngth_
 - (
uöt16_t
)
dma_°ªam_
->
NDTR
;

66  (
buff_t›
 =
buff_bŸtom_
);

67 
	}
}

70 
boﬁ
 
	gDmaRx
::
	$gëByã
(
uöt8_t
 * 
byã
)

72 i‡(
	`em±y
()Ë{  
Ál£
; }

74 *
byã
 = 
buff_
[
buff_bŸtom_
];

77 
buff_bŸtom_
 = (buff_bŸtom_ + 1Ë% 
buff_Àngth_
;

79  
åue
;

80 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\dma_tx.cpp

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~"debug_¥ötf.h
"

5 
	~"dma_tx.h
"

6 
	~"°m32f4xx.h
"

7 
	~"utû_as£π.h
"

10 
	gDmaTx
::
DmaTx


12 
DMA_Såóm_Ty≥Def
 * 
dma_°ªam
,

13 
uöt32_t
 
	gch™√l
,

14 
IRQn
 
	gdma_úq_num
,

15 
uöt32_t
 
	g≥rùh_ba£_addªss
,

16 
uöt32_t
 
	gå™s„r_com∂ëe_bô
,

17 
uöt32_t
 
	gå™s„r_îr‹_bô
,

18 
uöt32_t
 
	gbuff_Àngth


21 
	gbuff_Àngth_
 = 
buff_Àngth
;

22 
	gbuff_t›_
 = 0;

23 
	gdma_t›_
 = 0;

24 
	gdma_a˘ive_
 = 
Ál£
;

25 
	gå™s„r_com∂ëe_bô_
 = 
å™s„r_com∂ëe_bô
;

26 
	gå™s„r_îr‹_bô_
 = 
å™s„r_îr‹_bô
;

27 
	gîr‹_cou¡_
 = 0;

28 
	gdma_úq_num_
 = 
dma_úq_num
;

29 
	gdma_°ªam_
 = 
dma_°ªam
;

31 
	gbuff_
 = 
√w
 
uöt8_t
[
buff_Àngth
];

32 
as£π
(
buff_
 !
NULL
, 
ASSERT_STOP
);

36 
RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA1
, 
ENABLE
);

37 
RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA2
, 
ENABLE
);

39 
DMA_InôTy≥Def
 
	gDMA_InôSåu˘uª
;

40 
DMA_DeInô
(
dma_°ªam_
);

41 
	gDMA_InôSåu˘uª
.
	gDMA_Ch™√l
 = 
ch™√l
;

42 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆBa£Addr
 = (
uöt32_t
)
≥rùh_ba£_addªss
;

43 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)0;

44 
	gDMA_InôSåu˘uª
.
	gDMA_DIR
 = 
DMA_DIR_Mem‹yToPîùhîÆ
;

45 
	gDMA_InôSåu˘uª
.
	gDMA_Buf„rSize
 = 0;

46 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

47 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

48 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

49 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

50 
	gDMA_InôSåu˘uª
.
	gDMA_Mode
 = 
DMA_Mode_N‹mÆ
;

51 
	gDMA_InôSåu˘uª
.
	gDMA_Pri‹ôy
 = 
DMA_Pri‹ôy_High
;

52 
	gDMA_InôSåu˘uª
.
	gDMA_FIFOMode
 = 
DMA_FIFOMode_E«bÀ
;

53 
	gDMA_InôSåu˘uª
.
	gDMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

54 
	gDMA_InôSåu˘uª
.
	gDMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

55 
	gDMA_InôSåu˘uª
.
	gDMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

56 
DMA_Inô
(
dma_°ªam_
, &
DMA_InôSåu˘uª
);

59 
DMA_ITC⁄fig
(
dma_°ªam_
, 
DMA_IT_TC
|
DMA_IT_TE
, 
ENABLE
);

61 
DMA_Cmd
(
dma_°ªam_
, 
ENABLE
);

65 
	gDmaTx
::~
	$DmaTx
()

67 i‡(
buff_
 !
NULL
)

69 
dñëe
[] 
buff_
;

71 
	}
}

74 
boﬁ
 
	gDmaTx
::
	$£ndBuf„r
(
uöt8_t
 c⁄° * 
d©a
, 
uöt16_t
 
Àn
)

76 i‡((
Àn
 > 
buff_Àngth_
) || (len == 0))

78  
Ál£
;

83 
	`NVIC_DißbÀIRQ
(
dma_úq_num_
);

85 
uöt16_t
 
°¨t
, 
íd
;

86 
boﬁ
 
c›y_suc˚ssful
 = 
	`c›yToTøns„rBuf„r
(
d©a
, 
Àn
, &
°¨t
, &
íd
);

88 i‡(
c›y_suc˚ssful
 && !
dma_a˘ive_
)

90 
	`a˘iv©eDMATøns„r
(
°¨t
);

93 
	`NVIC_E«bÀIRQ
(
dma_úq_num_
);

95  
c›y_suc˚ssful
;

96 
	}
}

99 
boﬁ
 
	gDmaTx
::
c›yToTøns„rBuf„r


101 
uöt8_t
 c⁄° * 
d©a
,

102 
uöt16_t
 
	gÀn
,

103 
uöt16_t
 * 
	g°¨t
,

104 
uöt16_t
 * 
	gíd


107 
uöt16_t
 
	gnum_ö_buff
 = 0;

110 *
	g°¨t
 = 
buff_t›_
 + 1;

111 *
	gíd
 = 
buff_t›_
 + 
Àn
;

113 i‡(
	gdma_a˘ive_
)

116 
uöt16_t
 
	gnum_d©a_À·_to_å™s„r
 = 
dma_°ªam_
->
NDTR
;

117 i‡(
	gdma_t›_
 > 
	gbuff_t›_
)

119 
	gnum_ö_buff
 = 
buff_t›_
 + 
buff_Àngth_
 + 
num_d©a_À·_to_å™s„r
 - 
dma_t›_
;

123 
	gnum_ö_buff
 = 
buff_t›_
 - 
dma_t›_
 + 
num_d©a_À·_to_å™s„r
;

129 
	gnum_ö_buff
 = 
buff_t›_
 = 
dma_t›_
 = *
°¨t
 = 0;

130 *
	gíd
 = 
Àn
 - 1;

137 i‡(
	gÀn
 > (
	gbuff_Àngth_
 - 
	gnum_ö_buff
 - 1))

139  
	gÁl£
;

142 i‡(*
	g°¨t
 =
buff_Àngth_
)

144 *
°¨t
 = 0;

145 *
	gíd
 = 
Àn
 - 1;

147 
mem˝y
(
buff_
, 
d©a
, 
Àn
);

149 i‡(*
	gíd
 >
buff_Àngth_
)

151 *
íd
 -
buff_Àngth_
;

153 
mem˝y
(
buff_
 + *
°¨t
, 
d©a
, 
buff_Àngth_
 - *start);

154 
mem˝y
(
buff_
, 
d©a
 + 
buff_Àngth_
 - *
°¨t
, 
Àn
 + *start - buff_length_);

159 
mem˝y
(
buff_
 + *
°¨t
, 
d©a
, 
Àn
);

162 
	gbuff_t›_
 = *
íd
;

164  
	gåue
;

168 
boﬁ
 
	gDmaTx
::
	$a˘iv©eDMATøns„r
(
uöt16_t
 
°¨t_ödex
)

170 
uöt16_t
 
Àngth
 = 0;

172 i‡(
°¨t_ödex
 > 
buff_t›_
)

175 
Àngth
 = 
buff_Àngth_
 - 
°¨t_ödex
;

176 
dma_t›_
 = 
buff_Àngth_
 - 1;

180 
Àngth
 = 
buff_t›_
 - 
°¨t_ödex
 + 1;

181 
dma_t›_
 = 
buff_t›_
;

185 
	`DMA_Cmd
(
dma_°ªam_
, 
DISABLE
);

189 
dma_°ªam_
->
M0AR
 = (
uöt32_t
)(
buff_
 + 
°¨t_ödex
);

190 
dma_°ªam_
->
NDTR
 = 
Àngth
;

195 
dma_a˘ive_
 = 
åue
;

196 
	`DMA_CÀ¨ITPídögBô
(
dma_°ªam_
, 
å™s„r_com∂ëe_bô_
);

197 
	`DMA_CÀ¨ITPídögBô
(
dma_°ªam_
, 
å™s„r_îr‹_bô_
);

198 
	`DMA_Cmd
(
dma_°ªam_
, 
ENABLE
);

200  
åue
;

201 
	}
}

204 
	gDmaTx
::
	$h™dÀISR
()

206 i‡(
	`DMA_GëITSètus
(
dma_°ªam_
, 
å™s„r_îr‹_bô_
))

209 
	`DMA_CÀ¨ITPídögBô
(
dma_°ªam_
, 
å™s„r_îr‹_bô_
);

210 
îr‹_cou¡_
++;

214 i‡(
	`DMA_GëITSètus
(
dma_°ªam_
, 
å™s„r_com∂ëe_bô_
))

217 
	`DMA_CÀ¨ITPídögBô
(
dma_°ªam_
, 
å™s„r_com∂ëe_bô_
);

219 i‡(
dma_t›_
 !
buff_t›_
)

222 
	`a˘iv©eDMATøns„r
((
dma_t›_
 + 1Ë% 
buff_Àngth_
);

226 
dma_a˘ive_
 = 
Ál£
;

229 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\encoder.cpp

2 
	~"ícodî.h
"

5 
	gEncodî
::
	$Encodî
(
ícodî_id_t
 
id
)

7 
ícodî_id_
 = 
id
;

8 
¥ev_cou¡î_
 = 0;

9 
ovîÊows_
 = 0;

11 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

13 
ícodî_id_
)

15 
EncodîA
:

18 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

21 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

23 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
|
GPIO_Pö_7
;

24 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

25 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

26 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

27 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
 ;

28 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

30 
	`TIM_SëAut‹ñﬂd
(
TIM3
, 0xffff);

31 
	`TIM_EncodîI¡îÁ˚C⁄fig
(
TIM3
, 
TIM_EncodîMode_TI12
, 
TIM_ICPﬁ¨ôy_Risög
, TIM_ICPolarity_Rising);

33 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚6
, 
GPIO_AF_TIM3
);

34 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚7
, 
GPIO_AF_TIM3
);

36 
	`TIM_Cmd
(
TIM3
, 
ENABLE
);

38 
TIM3
->
CCMR1
 |= 0xF0F0;

42 
EncodîB
:

44 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

47 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

49 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
|
GPIO_Pö_13
;

50 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

51 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

52 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

53 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
 ;

54 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

56 
	`TIM_SëAut‹ñﬂd
(
TIM4
, 0xffff);

57 
	`TIM_EncodîI¡îÁ˚C⁄fig
(
TIM4
, 
TIM_EncodîMode_TI12
, 
TIM_ICPﬁ¨ôy_Risög
, TIM_ICPolarity_Rising);

59 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚12
, 
GPIO_AF_TIM4
);

60 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚13
, 
GPIO_AF_TIM4
);

62 
	`TIM_Cmd
(
TIM4
, 
ENABLE
);

64 
TIM4
->
CCMR1
 |= 0xF0F0;

68 
	}
}

71 
öt32_t
 
	gEncodî
::
	$ªad
()

73 
uöt16_t
 
cou¡î
;

74 
öt32_t
 
cou¡32
;

76 
ícodî_id_
)

78 
EncodîA
:

79 
cou¡î
 = 
TIM3
->
CNT
;

81 
EncodîB
:

82 
cou¡î
 = 
TIM4
->
CNT
;

89 i‡((
¥ev_cou¡î_
 > 0xc000Ë&& (
cou¡î
 < 0x4000))

91 
ovîÊows_
 += 1;

94 i‡((
¥ev_cou¡î_
 < 0x4000Ë&& (
cou¡î
 > 0xc000))

96 
ovîÊows_
 -= 1;

99 
cou¡32
 = 
ovîÊows_
*0x10000 + 
cou¡î
;

100 
¥ev_cou¡î_
 = 
cou¡î
;

102  
cou¡32
;

103 
	}
}

106 
	gEncodî
::
	$£t
(
öt32_t
 
cou¡32
)

108 i‡(
cou¡32
 < 0)

110 
ovîÊows_
 = 
cou¡32
 / ((
öt32_t
)0x10000) - 1;

114 
ovîÊows_
 = 
cou¡32
 / ((
öt32_t
)0x10000);

117 
uöt16_t
 
cou¡î
 = (uöt16_t)(
cou¡32
 - 
ovîÊows_
*0x10000);

118 
¥ev_cou¡î_
 = 
cou¡î
;

120 
ícodî_id_
)

122 
EncodîA
:

123 
TIM3
->
CNT
 = 
cou¡î
;

125 
EncodîB
:

126 
TIM4
->
CNT
 = 
cou¡î
;

129 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\green_leds.cpp

2 
	~"gªí_Àds.h
"

3 
	~"°m32f4xx_gpio.h
"

6 
	gGªíLeds
::
	$GªíLeds
()

9 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

10 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

13 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

14 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

15 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

16 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

17 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

19 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
|
GPIO_Pö_13
|
GPIO_Pö_14
|
GPIO_Pö_15
;

20 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

22 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_8
|
GPIO_Pö_9
|
GPIO_Pö_10
|
GPIO_Pö_11
;

23 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

25 
this
->
	`£t
(0);

26 
	}
}

29 
	gGªíLeds
::
	$£t
(
uöt8_t
 
∑âîn
)

32 
uöt8_t
 
i
 = 0; i < 4; i++)

34 i‡(
∑âîn
 & (1 << 
i
))

36 
GPIOB
->
BSRRH
 = 1 << (
i
+12);

40 
GPIOB
->
BSRRL
 = 1 << (
i
+12);

44 
uöt8_t
 
i
 = 4; i < 8; i++)

46 i‡(
∑âîn
 & (1 << 
i
))

48 
GPIOD
->
BSRRH
 = 1 << (
i
+4);

52 
GPIOD
->
BSRRL
 = 1 << (
i
+4);

55 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\analog_in.h

1 #i‚de‡
ANALOG_IN_H_INCLUDED


2 
	#ANALOG_IN_H_INCLUDED


	)

5 
	~<c°döt
>

21 ˛as†
	cA«logIn


23 
	mpublic
:

26 
A«logIn
();

29 
gëVﬁèges
(
vﬁèges
[9]);

31 
	m¥iv©e
:

34 
£tupI¡îru±
();

36 
	m¥iv©e
:

39 vﬁ©ûê
uöt16_t
 
adc_øw_vÆues_
[9];

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\bootloader_init.h

1 #i‚de‡
BOOTLOADER_INIT_H_INCLUDED


2 
	#BOOTLOADER_INIT_H_INCLUDED


	)

4 
boŸlﬂdî_öô
();

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\complementary_filter.h

1 #i‚de‡
COMPLEMENTARY_FILTER_H_INCLUDED


2 
	#COMPLEMENTARY_FILTER_H_INCLUDED


	)

5 
	~<c°döt
>

12 ˛as†
	cCom∂emíèryFûãr


14 
	mpublic
:

17 
ex∂icô
 
Com∂emíèryFûãr
();

21 
upd©e
(
dt
, c⁄° 
gyros
[3], c⁄° 
ac˚ls
[3]);

24 
£tAâôude
(c⁄° 
qu©îni⁄
[4]);

27 
gëAâôude
(
qu©îni⁄
[4]);

29 
	m¥iv©e
:

32 
k∑_
, 
	mkü_
;

35 
	mqu©_
[4];

38 
	m©t_öãgøl_
[3];

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\coordinate_conversions.h

1 #i‚de‡
COORDINATE_CONVERSIONS_H_INCLUDED


2 
	#COORDINATE_CONVERSIONS_H_INCLUDED


	)

5 
	~<°dboﬁ.h
>

6 
	~<°döt.h
>

9 
Œa_2_e˚f
(c⁄° 
Œa
[3],

10 
e˚f
[3]);

13 
uöt16_t
 
e˚f_2_Œa
(c⁄° 
e˚f
[3],

14 
Œa
[3]);

18 
R√_‰om_Œa
(c⁄° 
Œa
[3],

19 
R√
[3][3]);

23 
rvec_2_R
(c⁄° 
rvec
[3],

24 
R
[3][3]);

27 
qu©îni⁄_2_Ωy
(c⁄° 
q
[4],

28 
Ωy
[3]);

31 
Ωy_2_qu©îni⁄
(c⁄° 
Ωy
[3],

32 
q
[4]);

36 
qu©îni⁄_2_R
(c⁄° 
q
[4],

37 
Rbe
[3][3]);

42 
qu©îni⁄_rŸ
(c⁄° 
q
[4],

43 c⁄° 
vec
[3],

44 
boﬁ
 
ªvî£
,

45 
out_vec
[3]);

49 
Ωy_2_R
(c⁄° 
Ωy
[3],

50 
Rbe
[3][3]);

54 
R_2_qu©îni⁄
(c⁄° 
Rbe
[3][3],

55 
q
[4]);

61 
uöt8_t
 
R_‰om_two_ve˘‹s
(c⁄° 
v1b
[3],

62 c⁄° 
v1e
[3],

63 c⁄° 
v2b
[3],

64 c⁄° 
v2e
[3],

65 
Rbe
[3][3]);

68 
¸oss_¥odu˘
(c⁄° 
v1
[3],

69 c⁄° 
v2
[3],

70 
ªsu…
[3]);

74 
≥Ωídicuœr_comp⁄ít
(c⁄° 
v1
[3],

75 c⁄° 
v2
[3],

76 
ªsu…
[3]);

79 
ve˘‹_magnôude
(c⁄° 
v
[3]);

82 
qu©_magnôude
(c⁄° 
q
[4]);

85 
qu©_övî£
(
q
[4]);

88 
qu©_mu…
(c⁄° 
q1
[4], c⁄° 
q2
[4], 
qout
[4]);

95 
qu©_£rõs
(c⁄° 
qcb
[4], c⁄° 
qba
[4], 
qˇ
[4]);

99 
rŸ_mu…
(c⁄° 
R
[3][3], c⁄° 
vec
[3], 
vec_out
[3], 
boﬁ
 
å™•o£
);

103 
gps_2_ymdhms
(
uöt16_t
 
gps_wìk
, 
uöt32_t
 
m£c_of_wìk
, uöt16_à*
yór
,

104 
uöt8_t
 *
m⁄th
, uöt8_à*
day
, uöt8_à*
hour
, uöt8_à*
möuã
,

105 
uöt16_t
 *
m£c
);

108 
Œa_2_√d_löór
(c⁄° 
öt32_t
 
Œa
[3], c⁄° i¡32_à
home_Œa
[3],

109 
dñè_œt_n‹th
, 
dñè_l⁄_ó°
, 
√d
[3]);

112 
√d_2_Œa_löór
(c⁄° 
√d
[3], c⁄° 
öt32_t
 
home_Œa
[3],

113 
dñè_œt_n‹th
, 
dñè_l⁄_ó°
, 
öt32_t
 
Œa
[3]);

119 
ac˚ls_2_zîoyaw_rŸm
(c⁄° 
ac˚ls
[3], 
Rbe
[3][3]);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\crc.h

1 #i‚de‡
CRC_H_INCLUDED


2 
	#CRC_H_INCLUDED


	)

5 
	~<c°döt
>

9 
uöt16_t
 
ˇlcuœã_¸c
(
uöt8_t
 * 
buf„r
, 
uöt32_t
 
size
, uöt16_à
öô
);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\debug_printf.h

1 #i‚de‡
DEBUG_PRINTF_H_INCLUDED


2 
	#DEBUG_PRINTF_H_INCLUDED


	)

5 
	~<c°döt
>

10 
	gdebug_¥ötf


12 c⁄° * 
	gf‹m©
,

17 
	gdebug_¥öt_buf„r


19 
uöt8_t
 c⁄° * 
	gbuf„r_to_¥öt
,

20 
uöt32_t
 
	gbyãs_to_¥öt


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\derivative_filter.h

1 #i‚de‡
DERIVATIVE_FILTER_H_INCLUDED


2 
	#DERIVATIVE_FILTER_H_INCLUDED


	)

8 ˛as†
	cDîiv©iveFûãr


10 
	mpublic
:

13 
Dîiv©iveFûãr
(
ßm∂e_time
, 
cuâoff_‰equícy
, 
dampög_øtio
);

17 
ˇlcuœã
(
posôi⁄
);

20 
ª£t
();

22 
	m¥iv©e
:

25 
a0_
, 
	ma1_
, 
	ma2_
, 
	mb1_
, 
	mb2_
;

28 
	mvk1_
, 
	mvk2_
, 
	mpk1_
, 
	mpk2_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\digital_in.h

1 #i‚de‡
DIGITAL_IN_H_INCLUDED


2 
	#DIGITAL_IN_H_INCLUDED


	)

5 
	~"°m32f4xx_gpio.h
"

10 
	mPB1
,

11 
	mPC3
,

12 } 
	tdigôÆ_ö_pö_t
;

15 ˛as†
	cDigôÆIn


17 
	mpublic
:

23 
ex∂icô
 
DigôÆIn
(
digôÆ_ö_pö_t
 
pö
, 
GPIOPuPd_Ty≥Def
 
puŒ_up_puŒ_down
 = 
GPIO_PuPd_NOPULL
);

26 
boﬁ
 
	$ªad
(Ëc⁄° {  ((
p‹t_
->
IDR
 & 
gpio_pö_
) == gpio_pin_); }

28 
¥iv©e
:

31 
uöt16_t
 
gpio_pö_
;

34 
uöt32_t
 
rcc_ahb1≥rùh_
;

37 
GPIO_Ty≥Def
 * 
p‹t_
;

39 
	}
};

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\digital_out.h

1 #i‚de‡
DIGITAL_OUT_H_INCLUDED


2 
	#DIGITAL_OUT_H_INCLUDED


	)

5 
	~"°m32f4xx_gpio.h
"

11 
	mPE13
,

12 
	mPE14
,

13 
	mPE15
,

14 
	mPB10
,

17 
	mPB4
,

18 
	mPB5
,

19 
	mPB8
,

20 
	mPB9
,

22 } 
	tdigôÆ_out_pö_t
;

25 ˛as†
	cDigôÆOut


27 
	mpublic
:

38 
DigôÆOut
(
digôÆ_out_pö_t
 
pö
,

39 
GPIOOTy≥_Ty≥Def
 
out_ty≥
 = 
GPIO_OTy≥_PP
,

40 
GPIOPuPd_Ty≥Def
 
puŒ_up_puŒ_down
 = 
GPIO_PuPd_NOPULL
,

41 
uöt8_t
 
öôül_°©e
 = 0);

44 
boﬁ
 
	$ªad
(Ëc⁄° { ((
p‹t_
->
ODR
 & 
gpio_pö_
) == gpio_pin_); }

47 
	$£t
(Ë{ 
p‹t_
->
BSRRL
 = 
gpio_pö_
; 
	}
}

48 
	$˛ór
(Ë{ 
p‹t_
->
BSRRH
 = 
gpio_pö_
; 
	}
}

50 
	g¥iv©e
:

53 
uöt16_t
 
gpio_pö_
;

56 
uöt32_t
 
	grcc_ahb1≥rùh_
;

59 
GPIO_Ty≥Def
 * 
	gp‹t_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\dma_rx.h

1 #i‚de‡
DMA_RX_H_INCLUDED


2 
	#DMA_RX_H_INCLUDED


	)

5 
	~"°m32f4xx.h
"

9 ˛as†
	cDmaRx


11 
	mpublic
:

14 
DmaRx


16 
DMA_Såóm_Ty≥Def
 * 
dma_°ªam
,

17 
uöt32_t
 
	mch™√l
,

18 
uöt32_t
 
	m≥rùh_ba£_addªss
,

19 
uöt32_t
 
	mbuff_Àngth


23 ~
DmaRx
();

26 
boﬁ
 
	$em±y
() const;

32 
boﬁ
 
	`gëByã
(
uöt8_t
 * 
byã
);

34 
¥iv©e
:

36 
uöt8_t
 * 
buff_
;

37 
uöt32_t
 
buff_Àngth_
;

38 
uöt32_t
 
buff_bŸtom_
;

40 
DMA_Såóm_Ty≥Def
 * 
dma_°ªam_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\dma_tx.h

1 #i‚de‡
DMA_TX_H_INCLUDED


2 
	#DMA_TX_H_INCLUDED


	)

5 
	~"°m32f4xx.h
"

9 ˛as†
	cDmaTx


11 
	mpublic
:

15 
DmaTx


17 
DMA_Såóm_Ty≥Def
 * 
dma_°ªam
,

18 
uöt32_t
 
	mch™√l
,

19 
IRQn
 
	mdma_úq_num
,

20 
uöt32_t
 
	m≥rùh_ba£_addªss
,

21 
uöt32_t
 
	må™s„r_com∂ëe_bô
,

22 
uöt32_t
 
	må™s„r_îr‹_bô
,

23 
uöt32_t
 
	mbuff_Àngth


27 ~
DmaTx
();

32 
boﬁ
 
£ndBuf„r
(
uöt8_t
 c⁄° * 
d©a
, 
uöt16_t
 
Àn
);

37 
h™dÀISR
();

39 
	m¥iv©e
:

42 
boﬁ
 
c›yToTøns„rBuf„r


44 
uöt8_t
 c⁄° * 
d©a
,

45 
uöt16_t
 
	mÀn
,

46 
uöt16_t
 * 
	m°¨t
,

47 
uöt16_t
 * 
	míd


51 
boﬁ
 
a˘iv©eDMATøns„r
(
uöt16_t
 
°¨t_ödex
);

53 
	m¥iv©e
:

55 
uöt8_t
 * 
buff_
;

56 
uöt32_t
 
	mbuff_Àngth_
;

57 
uöt32_t
 
	mbuff_t›_
;

58 
uöt32_t
 
	mdma_t›_
;

59 
boﬁ
 
	mdma_a˘ive_
;

61 
IRQn
 
	mdma_úq_num_
;

62 
DMA_Såóm_Ty≥Def
 * 
	mdma_°ªam_
;

64 
uöt32_t
 
	må™s„r_com∂ëe_bô_
;

65 
uöt32_t
 
	må™s„r_îr‹_bô_
;

66 
uöt32_t
 
	mîr‹_cou¡_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\encoder.h

1 #i‚de‡
ENCODER_H_INCLUDED


2 
	#ENCODER_H_INCLUDED


	)

5 
	~"°m32f4xx.h
"

10 
	mEncodîA
,

11 
	mEncodîB


12 } 
	tícodî_id_t
;

15 ˛as†
	cEncodî


17 
	mpublic
:

20 
ex∂icô
 
Encodî
(
ícodî_id_t
 
id
);

23 
öt32_t
 
ªad
();

26 
£t
(
öt32_t
 
cou¡32
);

28 
	m¥iv©e
:

30 
ícodî_id_t
 
ícodî_id_
;

31 
uöt16_t
 
	m¥ev_cou¡î_
;

32 
öt16_t
 
	movîÊows_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\green_leds.h

1 #i‚de‡
GREEN_LEDS_H_INCLUDED


2 
	#GREEN_LEDS_H_INCLUDED


	)

5 
	~<c°döt
>

8 ˛as†
	cGªíLeds


10 
	mpublic
:

13 
ex∂icô
 
GªíLeds
();

17 
£t
(
uöt8_t
 
∑âîn
);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\math_util.h

1 #i‚de‡
MATH_UTIL_H_INCLUDED


2 
	#MATH_UTIL_H_INCLUDED


	)

4 
	~"physiˇl_c⁄°™ts.h
"

7 
	gãm∂©e
 <
˛ass
 
	gT
>

8 
T
 
	$limô
(
T
 
öput
, T 
lowî_limô
, T 
uµî_limô
)

10 i‡(
öput
 < 
lowî_limô
) { Üower_limit; }

11 i‡(
öput
 > 
uµî_limô
) {  upper_limit; }

12  
öput
;

13 
	}
}

16 
	gãm∂©e
 <
˛ass
 
	gT
>

17 
T
 
	$wøp_™gÀ
(
T
 
™gÀ
)

19 
™gÀ
 <-
PI
) {ángle += 2*PI; }

20 
™gÀ
 > 
PI
) {ángle -= 2*PI; }

21  
™gÀ
;

22 
	}
}

25 
	gãm∂©e
 <
˛ass
 
	gT
>

26 
T
 
	$max
(
T
 
p1
, T 
p2
)

28  (
p1
 > 
p2
) ?Ö1 :Ö2;

29 
	}
}

32 
	gãm∂©e
 <
˛ass
 
	gT
>

33 
T
 
	$mö
(
T
 
p1
, T 
p2
)

35  (
p1
 < 
p2
) ?Ö1 :Ö2;

36 
	}
}

39 
	gãm∂©e
 <
˛ass
 
	gT
>

40 
T
 
	$max
(
T
 * 
¨øy
, 
uöt32_t
 
num_ñemíts
)

42 i‡(
num_ñemíts
 == 0) {  0; }

43 
T
 
max
 = 
¨øy
[0];

44 
uöt32_t
 
i
 = 1; i < 
num_ñemíts
; i++)

46 i‡(
¨øy
[
i
] > 
max
)

48 
max
 = 
¨øy
[
i
];

51  
max
;

52 
	}
}

55 
	gãm∂©e
 <
˛ass
 
	gT
>

56 
T
 
	$mö
(
T
 * 
¨øy
, 
uöt32_t
 
num_ñemíts
)

58 i‡(
num_ñemíts
 == 0) {  0; }

59 
T
 
mö
 = 
¨øy
[0];

60 
uöt32_t
 
i
 = 1; i < 
num_ñemíts
; i++)

62 i‡(
¨øy
[
i
] < 
mö
)

64 
mö
 = 
¨øy
[
i
];

67  
mö
;

68 
	}
}

71 
	gãm∂©e
 <
˛ass
 
	gT
>

72 
T
 
	$avîage
(
T
 * 
¨øy
, 
uöt32_t
 
num_ñemíts
)

74 
T
 
sum
 = 0;

75 
uöt32_t
 
i
 = 0; i < 
num_ñemíts
; i++)

77 
sum
 +
¨øy
[
i
];

80  
sum
 / 
num_ñemíts
;

81 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\mpu6000.h

1 #i‚de‡
MPU6000_H_INCLUDED


2 
	#MPU6000_H_INCLUDED


	)

5 
	~"°m32f4xx.h
"

6 
	~"•i.h
"

7 
	~"sy°em_timî.h
"

10 ˛as†
	cMPU6000


12 
	mpublic
:

15 
MPU6000
();

18 
öt8_t
 
öôülize
();

21 
ªadGyro
(* 
d©a
);

24 
ªadAc˚l
(* 
d©a
);

26 
	m¥iv©e
:

29 
ª£t
();

33 
boﬁ
 
¥obe
();

36 
£tSam∂eR©e
(
uöt16_t
 
desúed_øã
);

39 
£tDLPFûãr
(
uöt16_t
 
‰equícy
);

42 
uöt8_t
 
ªadRegi°î
(uöt8_à
addªss
);

45 
£tRegi°î
(
uöt8_t
 
addªss
, uöt8_à
vÆue
);

48 
modifyRegi°î
(
uöt8_t
 
addªss
, uöt8_à
˛órbôs
, uöt8_à
£tbôs
);

51 
	$c⁄vîtRawGyro
(
öt16_t
 
øw
Ë{  (Ïaw * 
gyro_ønge_sˇÀ_
; }

54 
	$c⁄vîtRawAc˚l
(
öt16_t
 
øw
Ë{  (Ïaw * 
ac˚l_ønge_sˇÀ_
; 
	}
}

57 
u¶ìp
(
uöt32_t
 
mi¸o£c⁄ds
);

59 
	g¥iv©e
:

62 
uöt8_t
 
¥odu˘_id_
;

65 
SPI
 * 
	g•i_
;

66 
•i_bus_id_t
 
	g•i_bus_
;

69 
	ggyro_ønge_sˇÀ_
;

70 
	gac˚l_ønge_sˇÀ_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\physical_constants.h

1 #i‚de‡
PHYSICAL_CONSTANTS_H_INCLUDED


2 
	#PHYSICAL_CONSTANTS_H_INCLUDED


	)

5 
	#GRAVITY
 9.805f

6 

	)

8 
	#PI
 3.141593f

	)

9 
	#DEG2RAD
 (
PI
 / 180.0f)

	)

10 
	#RAD2DEG
 (180.0‡/ 
PI
)

	)

12 
	#PI_DOUBLE
 3.14159265358979323846

13 
	#DEG2RAD_DOUBLE
 (
PI_DOUBLE
 / 180.0)

	)

14 
	#RAD2DEG_DOUBLE
 (180.0 / 
PI_DOUBLE
)

	)

17 
	#CELSIUS2KELVIN
 273.15f

	)

18 
	#INCHES_MERCURY2KPA
 3.386f

	)

19 
	#KPA2HECTAPASCAL
 0.001f

	)

20 
	#HECTAPASCAL2KPA
 100.0f

	)

23 
	#FEET2MILES
 0.3048f

	)

24 
	#KNOTS2M_PER_SECOND
 0.514444444f

	)

25 
	#FEET_PER_SECOND2CM_PER_SECOND
 30.48f

	)

26 
	#METERS_PER_SECOND2KM_PER_HOUR
 3.6f

	)

27 
	#KM_PER_HOUR2METERS_PER_SECOND
 (1.0f/3.6f)

	)

28 
	#NM2DEG_LAT
 60.0f

29 
	#DEG_LAT2NM
 (1.0/60.f)

30 

	)

32 
	#UNIVERSAL_GAS_CONSTANT
 8.31447f

33 
	#DRY_AIR_CONSTANT
 287.058f

34 
	#STANDARD_AIR_DENSITY
 1.225f

35 
	#STANDARD_AIR_LAPSE_RATE
 0.0065f

36 
	#STANDARD_AIR_MOLS2KG
 0.0289644f

37 
	#STANDARD_AIR_RELATIVE_HUMIDITY
 20.0f

38 
	#STANDARD_AIR_SEA_LEVEL_PRESSURE
 101325.0f

39 
	#STANDARD_AIR_TEMPERATURE
 (15.0‡+ 
CELSIUS2KELVIN
)

40 
	#STANDARD_AIR_MACH_SPEED
 340.27f

41 

	)

43 
	#WGS84_RADIUS_EARTH_KM
 6371.008f

44 
	#WGS84_A
 6378.137f

45 
	#WGS84_B
 6356.7523142f

46 
	#WGS84_FLATTENING
 3.35281066474748e-3f

47 
	#WGS84_EPS
 8.1819190842622e-2f

48 
	#WGS84_EPS2
 6.694379990e-3f

49 

	)

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\pid_controller.h

1 #i‚de‡
PID_CONTROLLER_H_INCLUDED


2 
	#PID_CONTROLLER_H_INCLUDED


	)

5 
	~"globs.h
"

8 ˛as†
	cPidC⁄åﬁÀr


10 
	mpublic
:

13 
PidC⁄åﬁÀr
(
kp
, 
ki
, 
kd
,

14 
öãgøl_lﬁimô
, 
öãgøl_hûimô
,

15 
ouçut_lﬁimô
, 
ouçut_hûimô
);

19 
ˇlcuœã
(
îr‹
, 
dîiv©ive
, 
dt
);

23 
ˇlcuœã
(
îr‹
, 
dt
);

26 
	$ª£tI¡egøl
(Ë{ 
öãgøl_
 = 0.0f; };

31 
	`£t
(
glo_pid_∑øms_t
 c⁄° & 
∑øms
);

32 
	$gë
(
glo_pid_∑øms_t
 & 
∑øms
) const;

34 
¥iv©e
:

37 
kp_
, 
ki_
, 
kd_
;

38 
öãgøl_hûimô_
, 
öãgøl_lﬁimô_
;

39 
hûimô_
, 
lﬁimô_
;

42 
öãgøl_
;

45 
œ°_îr‹_
;

46 
	}
};

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\pwm_out_advanced_timer.h

1 #i‚de‡
PWM_OUT_ADVANCED_TIMER_H_INCLUDED


2 
	#PWM_OUT_ADVANCED_TIMER_H_INCLUDED


	)

5 
	~<c°döt
>

8 ˛as†
	cPwmOutAdv™˚dTimî


10 
	mpublic
:

13 
PwmOutAdv™˚dTimî
();

17 
£tDuty
(
duty
, 
uöt8_t
 
ch™√l_num
);

19 
	m¥iv©e
:

22 
uöt32_t
 
auto_ªlﬂd_ªg_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\simple_array.h

1 #i‚de‡
SIMPLE_ARRAY_H_INCLUDED


2 
	#SIMPLE_ARRAY_H_INCLUDED


	)

5 
öt32_t
 
	t¨øy_idx_t
;

7 
	#INVALID_ARRAY_INDEX
 (-1)

	)

10 
	gãm∂©e
 <
˛ass
 
	gT
>

11 ˛as†
	cSim∂eAºay


13 
	mpublic
:

16 
	$Sim∂eAºay
(
uöt32_t
 
max_num_ñemíts
) :

17 
	$max_num_ñemíts_
(
max_num_ñemíts
)

19 
d©a_
 = 
√w
 
T
[
max_num_ñemíts_
];

20 
vÆid_
 = 
√w
 
boﬁ
[
max_num_ñemíts_
];

22 
uöt32_t
 
i
 = 0; i < 
max_num_ñemíts_
; ++i)

24 
vÆid_
[
i
] = 
Ál£
;

29 ~
	$Sim∂eAºay
()

31 
dñëe
[] 
d©a_
;

32 
dñëe
[] 
vÆid_
;

33 
	}
}

37 
¨øy_idx_t
 
add
(
T
 & 
d©a
);

43 * 
ªque°St‹age
(
¨øy_idx_t
 * 
idx
);

47 
boﬁ
 
ªmove
(
¨øy_idx_t
 
idx
);

51 * 
ª„ªn˚
(
¨øy_idx_t
 
idx
);

55 
boﬁ
 
gë
(
¨øy_idx_t
 
idx
, 
T
 * 
ñemít
);

57 
	g¥iv©e
:

59 
T
 * 
d©a_
;

60 
boﬁ
 * 
	gvÆid_
;

62 
uöt32_t
 
	gmax_num_ñemíts_
;

67 
	gãm∂©e
 <
˛ass
 
	gT
>

68 
¨øy_idx_t
 
	gSim∂eAºay
<
	gT
>::
	$add
(
T
 & 
√w_d©a
)

70 
¨øy_idx_t
 
fú°_›í_ödex
 = 
INVALID_ARRAY_INDEX
;

72 
¨øy_idx_t
 
i
 = 0; i < 
max_num_ñemíts_
; ++i)

74 i‡(!
vÆid_
[
i
])

76 
fú°_›í_ödex
 = 
i
;

77 
d©a_
[
i
] = 
√w_d©a
;

78 
vÆid_
[
i
] = 
åue
;

83  
fú°_›í_ödex
;

84 
	}
}

87 
	gãm∂©e
 <
˛ass
 
	gT
>

88 * 
	gSim∂eAºay
<
	gT
>::
	$ªque°St‹age
(
¨øy_idx_t
 * 
idx
)

90 *
idx
 = 
INVALID_ARRAY_INDEX
;

92 
¨øy_idx_t
 
i
 = 0; i < 
max_num_ñemíts_
; ++i)

94 i‡(!
vÆid_
[
i
])

96 *
idx
 = 
i
;

97 
vÆid_
[
i
] = 
åue
;

98  
d©a_
 + 
i
;

102  
NULL
;

103 
	}
}

106 
	gãm∂©e
 <
˛ass
 
	gT
>

107 
boﬁ
 
	gSim∂eAºay
<
	gT
>::
	$ªmove
(
¨øy_idx_t
 
idx
)

109 i‡((
idx
 < 0Ë|| (idx >
max_num_ñemíts_
))

111  
Ál£
;

114 
vÆid_
[
idx
] = 
Ál£
;

115  
åue
;

116 
	}
}

119 
	gãm∂©e
 <
˛ass
 
	gT
>

120 * 
	gSim∂eAºay
<
	gT
>::
	$ª„ªn˚
(
¨øy_idx_t
 
idx
)

122 i‡((
idx
 < 0Ë|| (idx >
max_num_ñemíts_
))

124  
NULL
;

127  
d©a_
 + 
idx
;

128 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\six_point_sensor_cal.h

1 #i‚de‡
SIX_POINT_SENSOR_CAL_H_INCLUDED


2 
	#SIX_POINT_SENSOR_CAL_H_INCLUDED


	)

10 
boﬁ
 
six_poöt_£ns‹_ˇl
(
fõl_mag
, c⁄° 
x
[6], c⁄° 
y
[6],

11 c⁄° 
z
[6], 
S
[3], 
b
[3]);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\spi.h

1 #i‚de‡
SPI_H_INCLUDED


2 
	#SPI_H_INCLUDED


	)

4 
	~<c°döt
>

5 
	~"°m32f4xx_•i.h
"

8 
	#DEFAULT_SPI_FREQUENCY
 (1000000)

9 

	)

11 
uöt32_t
 
	t•i_bus_id_t
;

14 
	mSPI_BUS_1
,

15 
	mSPI_BUS_2
,

16 
	mSPI_BUS_3
,

17 
	mSPI_BUS_4
,

18 
	mSPI_BUS_COUNT


22 ˛as†
	cSPI


24 
	mpublic
:

28 
SPI
 * 
ö°™˚
(
•i_bus_id_t
 
bus
);

31 
£tFªquícy
(
uöt32_t
 
‰equícy
);

34 
uöt8_t
 
£ndByã
(uöt8_à
byã_to_£nd
);

36 
	m¥iv©e
:

38 
boﬁ
 
öô
[
SPI_BUS_COUNT
];

39 
SPI
 
	mobjs
[
SPI_BUS_COUNT
];

42 
•i_bus_id_t
 
	mbus_
;

43 
SPI_Ty≥Def
 * 
	mba£_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\system_timer.h

1 #i‚de‡
SYSTEM_TIMER_H_INCLUDED


2 
	#SYSTEM_TIMER_H_INCLUDED


	)

5 
	~<c°döt
>

8 ˛as†
	cSy°emTimî


10 
	mpublic
:

13 
Sy°emTimî
();

16 
uöt64_t
 
ticks
();

19 
	$£c⁄ds
(Ë{  
	`ticks
(Ë* 
£c⁄ds_≥r_tick_
; }

22 
uöt32_t
 
	$‰equícy
(Ëc⁄° {  
timî_‰equícy_
; 
	}
}

25 
busyWaô
(
£c⁄ds_to_waô
);

27 
	gpublic
:

32 
uöt64_t
 
rﬁlovî_cou¡_
;

34 
	g¥iv©e
:

37 
uöt32_t
 
ªlﬂd_vÆue_
;

40 
uöt32_t
 
	gtimî_‰equícy_
;

43 
	g£c⁄ds_≥r_tick_
;

46 
uöt64_t
 
	gœ°_ªp‹ãd_ticks_
;

50 
Sy°emTimî
 
sys_timî
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\tb6612fng.h

1 #i‚de‡
TB6612FNG_H_INCLUDED


2 
	#TB6612FNG_H_INCLUDED


	)

5 
	~"digôÆ_out.h
"

6 
	~"pwm_out_adv™˚d_timî.h
"

9 ˛as†
	cTB6612FNG


11 
	mpublic
:

14 
TB6612FNG
();

17 
£tDutyA
(
duty
);

18 
£tDutyB
(
duty
);

20 
	m¥iv©e
:

22 
PwmOutAdv™˚dTimî
 
pwm_timî_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\trigtables.h

1 #i‚de‡
TRIGTABLES_H_INCLUDED


2 
	#TRIGTABLES_H_INCLUDED


	)

4 
	#TABLEN
 1000

	)

5 
	#ATANRANGE
 22.36068f

6 

	)

8 c⁄° 
COSTABLE
[
TABLEN
];

9 c⁄° 
ATANTABLE
[
TABLEN
];

12 #ifde‡
__˝lu•lus


15 
©™2èb
(
y
, 
x
);

16 
söco°ab
(
thëa
, *
°h
, *
˘h
);

17 #ifde‡
__˝lu•lus


	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\usart.h

1 #i‚de‡
USART_H_INCLUDED


2 
	#USART_H_INCLUDED


	)

5 
	~"°m32f4xx.h
"

6 
	~"dma_rx.h
"

7 
	~"dma_tx.h
"

10 
uöt8_t
 
	tußπ_bus_t
;

13 
	mUSART_BUS_1
 = 0,

14 
	mUSART_BUS_2
,

15 
	mUSART_BUS_COUNT


21 
	mUSART1_TX_BUFF_SIZE
 = 256,

22 
	mUSART1_RX_BUFF_SIZE
 = 50,

23 
	mUSART2_TX_BUFF_SIZE
 = 1024,

24 
	mUSART2_RX_BUFF_SIZE
 = 250,

30 ˛as†
	cUßπ


32 
	mpublic
:

36 
Ußπ
 * 
ö°™˚
(
ußπ_bus_t
 
bus
);

39 ~
Ußπ
();

44 
boﬁ
 
gëByã
(
uöt8_t
 * 
byã
);

49 
boﬁ
 
£ndBuf„r
(
uöt8_t
 c⁄° * 
d©a
, 
uöt16_t
 
Àn
);

52 
boﬁ
 
	$em±y
(Ëc⁄° {  
dma_rx_
->
	`em±y
(); }

55 
	`upd©eBaudøã
(
uöt32_t
 
baudøã
);

58 
	$USART1_TX_ISR
(Ë{ 
Ußπ
::
objs
[
USART_BUS_1
].
dma_tx_
->
	`h™dÀISR
(); 
	}
}

59 
	$USART2_TX_ISR
(Ë{ 
Ußπ
::
objs
[
USART_BUS_2
].
dma_tx_
->
	`h™dÀISR
(); 
	}
}

61 
	g¥iv©e
:

63 
	$Ußπ
(Ë{
	}
}

66 
InôBus1
();

67 
InôBus2
();

69 
	g¥iv©e
:

72 
Ußπ
 
objs
[
USART_BUS_COUNT
];

74 
boﬁ
 
	göô
[
USART_BUS_COUNT
];

77 
DmaRx
 * 
	gdma_rx_
;

78 
DmaTx
 * 
	gdma_tx_
;

81 
ußπ_bus_t
 
	gbus_
;

82 
USART_Ty≥Def
 * 
	gUSARTx_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\user_leds.h

1 #i‚de‡
USER_LEDS_H_INCLUDED


2 
	#USER_LEDS_H_INCLUDED


	)

5 
	~"°m32f4xx.h
"

10 
	mUSER_LED_ORANGE
,

11 
	mUSER_LED_YELLOW
,

12 
	mUSER_LED_GREEN
,

13 
	mUSER_LED_RED


14 } 
	tu£r_Àd_id_t
;

17 ˛as†
	cU£rLeds


19 
	mpublic
:

22 
U£rLeds
();

25 
£t
(
u£r_Àd_id_t
 
Àd
);

26 
˛ór
(
u£r_Àd_id_t
 
Àd
);

27 
toggÀ
(
u£r_Àd_id_t
 
Àd
);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\user_pb.h

1 #i‚de‡
USER_PB_H_INCLUDED


2 
	#USER_PB_H_INCLUDED


	)

4 
	~<c°döt
>

6 
uöt8_t
 
	tu£r_buâ⁄_id_t
;

9 
	mUSER_PB_TOP
,

10 
	mUSER_PB_BOTTOM


13 ˛as†
	cU£rPushBuâ⁄


15 
	mpublic
:

18 
U£rPushBuâ⁄
(
u£r_buâ⁄_id_t
 
buâ⁄_id
);

21 
boﬁ
 
ªad
();

26 
boﬁ
 
a˘iv©ed
();

28 
	m¥iv©e
:

30 
u£r_buâ⁄_id_t
 
buâ⁄_id_
;

33 
boﬁ
 
	mbuâ⁄_was_¥es£d_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\util_assert.h

35 #i‚de‡
UTIL_ASSERT_H_INCLUDED


36 
	#UTIL_ASSERT_H_INCLUDED


	)

44 
	mASSERT_CONTINUE
,

45 
	mASSERT_RESTART
,

46 
	mASSERT_STOP
,

53 
	#INCLUDE_META_INFO
 1

54 
	#ENABLE_DEBUG_ASSERTS
 1

55 

	)

61 #i‡
INCLUDE_META_INFO


62 
	#META_INFO_ARGS
 
__FILE__
,
__LINE__


	)

64 
	#META_INFO_ARGS
 "",(-1)

	)

68 
	#DEBUG_MARK_STRING
 "D: "

	)

77 
	#as£π_msg
(
c⁄dôi⁄
, 
a˘i⁄
, ...Ë(!(c⁄dôi⁄Ë? 
	`utû_as£π_Áûed
(◊˘i⁄), 
META_INFO_ARGS
, 
__VA_ARGS__
Ë: ()0)

	)

78 
	#as£π_Æways_msg
(
a˘i⁄
, ...Ë
	`as£π_msg
(
Ál£
, (a˘i⁄), 
__VA_ARGS__
)

	)

79 
	#as£π
(
c⁄dôi⁄
, 
a˘i⁄
Ë
	`as£π_msg
((c⁄dôi⁄), (a˘i⁄), #c⁄dôi⁄)

	)

81 #i‡
ENABLE_DEBUG_ASSERTS


83 
	#debug_as£π_msg
(
c⁄dôi⁄
, 
a˘i⁄
, ...Ë(!(c⁄dôi⁄Ë? 
	`utû_as£π_Áûed
(◊˘i⁄), 
META_INFO_ARGS
, 
DEBUG_MARK_STRING
 
__VA_ARGS__
Ë: ()0)

	)

84 
	#debug_as£π_Æways_msg
(
a˘i⁄
, ...Ë
	`debug_as£π_msg
(
Ál£
, (a˘i⁄), 
__VA_ARGS__
)

	)

85 
	#debug_as£π
(
c⁄dôi⁄
, 
a˘i⁄
Ë
	`debug_as£π_msg
((c⁄dôi⁄), (a˘i⁄), #c⁄dôi⁄)

	)

89 
	#debug_as£π_msg
(
c⁄dôi⁄
, 
a˘i⁄
, ...)

	)

90 
	#debug_as£π_Æways
(
a˘i⁄
)

	)

91 
	#debug_as£π
(
c⁄dôi⁄
, 
a˘i⁄
)

	)

101 
	gutû_as£π_Áûed


103 
	ga˘i⁄
,

104 c⁄° * 
	gfûe_«me
,

105 
	glöe_numbî
,

106 c⁄° * 
	gf‹m©
,

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\mpu6000.cpp

5 
	~<c°dio
>

6 
	~<c°döt
>

7 
	~"mpu6000.h
"

8 
	~"utû_as£π.h
"

14 
	#CMD_READ
 (0x80)

	)

15 
	#CMD_WRITE
 (0x00)

	)

16 
	#ADDR_MASK
 (0x7F)

	)

17 
	#WHO_I_AM
 (0x68)

	)

23 
	#MPUREG_PRODUCT_ID
 (0x0C)

	)

24 
	#MPUREG_SMPLRT_DIV
 (0x19)

	)

25 
	#MPUREG_CONFIG
 (0x1A)

	)

26 
	#MPUREG_GYRO_CONFIG
 (0x1B)

	)

27 
	#MPUREG_ACCEL_CONFIG
 (0x1C)

	)

28 
	#MPUREG_FIFO_EN
 (0x23)

	)

29 
	#MPUREG_INT_PIN_CFG
 (0x37)

	)

30 
	#MPUREG_INT_ENABLE
 (0x38)

	)

31 
	#MPUREG_INT_STATUS
 (0x3A)

	)

32 
	#MPUREG_ACCEL_XOUT_H
 (0x3B)

	)

33 
	#MPUREG_ACCEL_XOUT_L
 (0x3C)

	)

34 
	#MPUREG_ACCEL_YOUT_H
 (0x3D)

	)

35 
	#MPUREG_ACCEL_YOUT_L
 (0x3E)

	)

36 
	#MPUREG_ACCEL_ZOUT_H
 (0x3F)

	)

37 
	#MPUREG_ACCEL_ZOUT_L
 (0x40)

	)

38 
	#MPUREG_TEMP_OUT_H
 (0x41)

	)

39 
	#MPUREG_TEMP_OUT_L
 (0x42)

	)

40 
	#MPUREG_GYRO_XOUT_H
 (0x43)

	)

41 
	#MPUREG_GYRO_XOUT_L
 (0x44)

	)

42 
	#MPUREG_GYRO_YOUT_H
 (0x45)

	)

43 
	#MPUREG_GYRO_YOUT_L
 (0x46)

	)

44 
	#MPUREG_GYRO_ZOUT_H
 (0x47)

	)

45 
	#MPUREG_GYRO_ZOUT_L
 (0x48)

	)

46 
	#MPUREG_USER_CTRL
 (0x6A)

	)

47 
	#MPUREG_PWR_MGMT_1
 (0x6B)

	)

48 
	#MPUREG_PWR_MGMT_2
 (0x6C)

	)

49 
	#MPUREG_SIGPATH_RESET
 (0x68)

	)

50 
	#MPUREG_FIFO_COUNTH
 (0x72)

	)

51 
	#MPUREG_FIFO_COUNTL
 (0x73)

	)

52 
	#MPUREG_FIFO_R_W
 (0x74)

	)

53 
	#MPUREG_WHOAMI
 (0x75)

	)

58 
	#BIT_SLEEP
 (0x40)

	)

59 
	#BIT_H_RESET
 (0x80)

	)

60 
	#MPU_CLK_SEL_INT8MHZ
 (0x00)

	)

61 
	#MPU_CLK_SEL_PLLGYROX
 (0x01)

	)

62 
	#MPU_CLK_SEL_PLLGYROY
 (0x02)

	)

63 
	#MPU_CLK_SEL_PLLGYROZ
 (0x03)

	)

64 
	#MPU_CLK_SEL_PLLEXT32KHZ
 (0x04)

	)

65 
	#MPU_CLK_SEL_PLLEXT19MHZ
 (0x05)

	)

66 
	#MPU_CLK_SEL_STOPRESET
 (0x07)

	)

68 
	#MASK_CLKSEL
 (0x07)

	)

72 
	#BITS_FS_250DPS
 (0x00)

	)

73 
	#BITS_FS_500DPS
 (0x08)

	)

74 
	#BITS_FS_1000DPS
 (0x10)

	)

75 
	#BITS_FS_2000DPS
 (0x18)

	)

76 
	#MASK_FS
 (0x18)

	)

92 
	#BITS_DLPF_CFG_256HZ_NOLPF2
 (0x00)

	)

93 
	#BITS_DLPF_CFG_188HZ
 (0x01)

	)

94 
	#BITS_DLPF_CFG_98HZ
 (0x02)

	)

95 
	#BITS_DLPF_CFG_42HZ
 (0x03)

	)

96 
	#BITS_DLPF_CFG_20HZ
 (0x04)

	)

97 
	#BITS_DLPF_CFG_10HZ
 (0x05)

	)

98 
	#BITS_DLPF_CFG_5HZ
 (0x06)

	)

99 
	#BITS_DLPF_CFG_2100HZ_NOLPF
 (0x07)

	)

100 
	#MASK_DLPF_CFG
 (0x07)

	)

104 
	#BIT_INT_ANYRD_2CLEAR
 (0x10)

	)

107 
	#BIT_RAW_RDY_EN
 (0x01)

	)

110 
	#BIT_I2C_IF_DIS
 (0x10)

	)

113 
	#BIT_SIGPATH_RESET_ALL
 (0x07)

	)

118 
	#MPU6000ES_REV_C4
 (0x14)

	)

119 
	#MPU6000ES_REV_C5
 (0x15)

	)

120 
	#MPU6000ES_REV_D6
 (0x16)

	)

121 
	#MPU6000ES_REV_D7
 (0x17)

	)

122 
	#MPU6000ES_REV_D8
 (0x18)

	)

123 
	#MPU6000_REV_C4
 (0x54)

	)

124 
	#MPU6000_REV_C5
 (0x55)

	)

125 
	#MPU6000_REV_D6
 (0x56)

	)

126 
	#MPU6000_REV_D7
 (0x57)

	)

127 
	#MPU6000_REV_D8
 (0x58)

	)

128 
	#MPU6000_REV_D9
 (0x59)

	)

129 
	#MPU6000_REV_D10
 (0x5A)

	)

131 
	#MPU6000_ONE_G
 (9.80665f)

	)

133 
	#MPU6000_DEFAULT_ONCHIP_FILTER_FREQ
 (42)

	)

136 
	#SENSOR_READ_SPI_FREQUENCY
 (20 * 
DEFAULT_SPI_FREQUENCY
)

	)

143 
	#CS_SELECT
(Ë
GPIOA
->
BSRRH
 = 
GPIO_Pö_15


	)

144 
	#CS_DESELECT
(Ë
GPIOA
->
BSRRL
 = 
GPIO_Pö_15


	)

151 
	gMPU6000
::
	$MPU6000
() :

152 
	`¥odu˘_id_
(0),

153 
	`•i_
(
NULL
),

154 
	`•i_bus_
(
SPI_BUS_3
),

155 
	`gyro_ønge_sˇÀ_
(0),

156 
	$ac˚l_ønge_sˇÀ_
(0)

158 
	}
}

161 
öt8_t
 
	gMPU6000
::
	$öôülize
()

163 
•i_
 = 
SPI
::
	`ö°™˚
(
•i_bus_
);

165 i‡(
•i_
 =
NULL
) {  -2; }

167 i‡(!
	`¥obe
())

172 
	`ª£t
();

175 
	}
}

178 
	gMPU6000
::
	$ªadGyro
(* 
d©a
)

182 
öt16_t
 
øw
;

183 
uöt8_t
 
byãs
[2];

184 } 
ªadög
;

186 
	`CS_SELECT
();

189 
•i_
->
	`£tFªquícy
(
SENSOR_READ_SPI_FREQUENCY
);

191 
•i_
->
	`£ndByã
(
CMD_READ
 | 
MPUREG_GYRO_XOUT_H
);

193 
ªadög
.
byãs
[1] = 
•i_
->
	`£ndByã
(0);

194 
ªadög
.
byãs
[0] = 
•i_
->
	`£ndByã
(0);

195 
d©a
[0] = 
	`c⁄vîtRawGyro
(
ªadög
.
øw
);

197 
ªadög
.
byãs
[1] = 
•i_
->
	`£ndByã
(0);

198 
ªadög
.
byãs
[0] = 
•i_
->
	`£ndByã
(0);

199 
d©a
[1] = 
	`c⁄vîtRawGyro
(
ªadög
.
øw
);

201 
ªadög
.
byãs
[1] = 
•i_
->
	`£ndByã
(0);

202 
ªadög
.
byãs
[0] = 
•i_
->
	`£ndByã
(0);

203 
d©a
[2] = 
	`c⁄vîtRawGyro
(
ªadög
.
øw
);

205 
	`CS_DESELECT
();

208 
•i_
->
	`£tFªquícy
(
DEFAULT_SPI_FREQUENCY
);

209 
	}
}

212 
	gMPU6000
::
	$ªadAc˚l
(* 
d©a
)

216 
öt16_t
 
øw
;

217 
uöt8_t
 
byãs
[2];

218 } 
ªadög
;

220 
	`CS_SELECT
();

223 
•i_
->
	`£tFªquícy
(
SENSOR_READ_SPI_FREQUENCY
);

225 
•i_
->
	`£ndByã
(
CMD_READ
 | 
MPUREG_INT_STATUS
);

227 
•i_
->
	`£ndByã
(0);

229 
ªadög
.
byãs
[1] = 
•i_
->
	`£ndByã
(0);

230 
ªadög
.
byãs
[0] = 
•i_
->
	`£ndByã
(0);

231 
d©a
[0] = 
	`c⁄vîtRawAc˚l
(
ªadög
.
øw
);

233 
ªadög
.
byãs
[1] = 
•i_
->
	`£ndByã
(0);

234 
ªadög
.
byãs
[0] = 
•i_
->
	`£ndByã
(0);

235 
d©a
[1] = 
	`c⁄vîtRawAc˚l
(
ªadög
.
øw
);

237 
ªadög
.
byãs
[1] = 
•i_
->
	`£ndByã
(0);

238 
ªadög
.
byãs
[0] = 
•i_
->
	`£ndByã
(0);

239 
d©a
[2] = 
	`c⁄vîtRawAc˚l
(
ªadög
.
øw
);

247 
	`CS_DESELECT
();

250 
•i_
->
	`£tFªquícy
(
DEFAULT_SPI_FREQUENCY
);

251 
	}
}

254 
	gMPU6000
::
	$ª£t
()

257 
	`£tRegi°î
(
MPUREG_PWR_MGMT_1
, 
BIT_H_RESET
);

258 
	`u¶ìp
(10000);

261 
	`£tRegi°î
(
MPUREG_SIGPATH_RESET
, 
BIT_SIGPATH_RESET_ALL
);

262 
	`u¶ìp
(10000);

267 
	`£tRegi°î
(
MPUREG_PWR_MGMT_1
, 
MPU_CLK_SEL_PLLGYROZ
);

268 
	`u¶ìp
(1000);

271 
	`£tRegi°î
(
MPUREG_USER_CTRL
, 
BIT_I2C_IF_DIS
);

272 
	`u¶ìp
(1000);

274 
	`£tSam∂eR©e
(500);

275 
	`u¶ìp
(1000);

279 
	`£tDLPFûãr
(
MPU6000_DEFAULT_ONCHIP_FILTER_FREQ
);

280 
	`u¶ìp
(1000);

283 
gyro_ønge_sˇÀ_
 = (0.0174532f / 16.4f);

284 
	`£tRegi°î
(
MPUREG_GYRO_CONFIG
, 
BITS_FS_2000DPS
);

285 
	`u¶ìp
(1000);

288 
¥odu˘_id_
)

290 
MPU6000ES_REV_C4
:

291 
MPU6000ES_REV_C5
:

292 
MPU6000_REV_C4
:

293 
MPU6000_REV_C5
:

296 
	`£tRegi°î
(
MPUREG_ACCEL_CONFIG
, 1 << 3);

299 
MPU6000ES_REV_D6
:

300 
MPU6000ES_REV_D7
:

301 
MPU6000ES_REV_D8
:

302 
MPU6000_REV_D6
:

303 
MPU6000_REV_D7
:

304 
MPU6000_REV_D8
:

305 
MPU6000_REV_D9
:

306 
MPU6000_REV_D10
:

311 
	`£tRegi°î
(
MPUREG_ACCEL_CONFIG
, 2 << 3);

317 
ac˚l_ønge_sˇÀ_
 = (
MPU6000_ONE_G
 / 4096.0f);

320 
	`£tRegi°î
(
MPUREG_INT_ENABLE
, 
BIT_RAW_RDY_EN
);

321 
	`u¶ìp
(1000);

324 
	`£tRegi°î
(
MPUREG_INT_PIN_CFG
, 
BIT_INT_ANYRD_2CLEAR
);

325 
	`u¶ìp
(1000);

326 
	}
}

329 
boﬁ
 
	gMPU6000
::
	$¥obe
()

331 
boﬁ
 
¥obe_suc˚ssful
 = 
åue
;

332 
¥odu˘_id_
 = 
	`ªadRegi°î
(
MPUREG_PRODUCT_ID
);

334 
¥odu˘_id_
)

336 
MPU6000ES_REV_C4
:

337 
MPU6000ES_REV_C5
:

338 
MPU6000_REV_C4
:

339 
MPU6000_REV_C5
:

340 
MPU6000ES_REV_D6
:

341 
MPU6000ES_REV_D7
:

342 
MPU6000ES_REV_D8
:

343 
MPU6000_REV_D6
:

344 
MPU6000_REV_D7
:

345 
MPU6000_REV_D8
:

346 
MPU6000_REV_D9
:

347 
MPU6000_REV_D10
:

350 
¥obe_suc˚ssful
 = 
Ál£
;

355  
¥obe_suc˚ssful
;

356 
	}
}

359 
	gMPU6000
::
	$£tSam∂eR©e
(
uöt16_t
 
desúed_øã
)

361 i‡(
desúed_øã
 == 0)

363 
desúed_øã
 = 1000;

366 
uöt8_t
 
div
 = 1000 / 
desúed_øã
;

368 i‡(
div
 > 200)

370 
div
 = 200;

372 i‡(
div
 < 1)

374 
div
 = 1;

377 
	`£tRegi°î
(
MPUREG_SMPLRT_DIV
, 
div
-1);

378 
	}
}

381 
	gMPU6000
::
	$£tDLPFûãr
(
uöt16_t
 
‰equícy
)

383 
uöt8_t
 
fûãr
 = 0;

386 i‡(
‰equícy
 <= 5)

388 
fûãr
 = 
BITS_DLPF_CFG_5HZ
;

390 i‡(
‰equícy
 <= 10)

392 
fûãr
 = 
BITS_DLPF_CFG_10HZ
;

394 i‡(
‰equícy
 <= 20)

396 
fûãr
 = 
BITS_DLPF_CFG_20HZ
;

398 i‡(
‰equícy
 <= 42)

400 
fûãr
 = 
BITS_DLPF_CFG_42HZ
;

402 i‡(
‰equícy
 <= 98)

404 
fûãr
 = 
BITS_DLPF_CFG_98HZ
;

406 i‡(
‰equícy
 <= 188)

408 
fûãr
 = 
BITS_DLPF_CFG_188HZ
;

410 i‡(
‰equícy
 <= 256)

412 
fûãr
 = 
BITS_DLPF_CFG_256HZ_NOLPF2
;

416 
fûãr
 = 
BITS_DLPF_CFG_2100HZ_NOLPF
;

419 
	`£tRegi°î
(
MPUREG_CONFIG
, 
fûãr
);

420 
	}
}

423 
uöt8_t
 
	gMPU6000
::
	$ªadRegi°î
(
uöt8_t
 
addªss
)

425 
addªss
 &
ADDR_MASK
;

427 
	`CS_SELECT
();

429 
•i_
->
	`£ndByã
(
CMD_READ
 | 
addªss
);

430 
uöt8_t
 
vÆue
 = 
•i_
->
	`£ndByã
(0);

432 
	`CS_DESELECT
();

434  
vÆue
;

435 
	}
}

438 
	gMPU6000
::
	$£tRegi°î
(
uöt8_t
 
addªss
, uöt8_à
vÆue
)

440 
addªss
 &
ADDR_MASK
;

442 
	`CS_SELECT
();

443 
	`u¶ìp
(1);

444 
•i_
->
	`£ndByã
(
CMD_WRITE
 | 
addªss
);

445 
•i_
->
	`£ndByã
(
vÆue
);

446 
	`u¶ìp
(1);

447 
	`CS_DESELECT
();

448 
	}
}

451 
	gMPU6000
::
	$modifyRegi°î
(
uöt8_t
 
addªss
, uöt8_à
˛órbôs
, uöt8_à
£tbôs
)

453 
uöt8_t
 
vÆue
 = 
	`ªadRegi°î
(
addªss
);

454 
vÆue
 &~
˛órbôs
;

455 
vÆue
 |
£tbôs
;

456 
	`£tRegi°î
(
addªss
, 
vÆue
);

457 
	}
}

460 
	gMPU6000
::
	$u¶ìp
(
uöt32_t
 
mi¸o£c⁄ds
)

462 
sys_timî
.
	`busyWaô
(
mi¸o£c⁄ds
 * 1.0e-6);

463 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\pid_controller.cpp

2 
	~"pid_c⁄åﬁÀr.h
"

5 
	gPidC⁄åﬁÀr
::
	$PidC⁄åﬁÀr
(
kp
, 
ki
, 
kd
,

6 
öãgøl_lﬁimô
, 
öãgøl_hûimô
,

7 
ouçut_lﬁimô
, 
ouçut_hûimô
)

10 
kp_
 = 
kp
;

11 
ki_
 = 
ki
;

12 
kd_
 = 
kd
;

13 
öãgøl_lﬁimô_
 = 
öãgøl_lﬁimô
;

14 
öãgøl_hûimô_
 = 
öãgøl_hûimô
;

15 
lﬁimô_
 = 
ouçut_lﬁimô
;

16 
hûimô_
 = 
ouçut_hûimô
;

17 
öãgøl_
 = 0.0f;

18 
œ°_îr‹_
 = 0.0f;

19 
	}
}

22 
	gPidC⁄åﬁÀr
::
	$ˇlcuœã
(
îr‹
, 
dîiv©ive
, 
dt
)

26 
öãgøl_
 +
ki_
 * 
îr‹
 * 
dt
;

29 i‡(
öãgøl_
 < 
öãgøl_lﬁimô_
) { integral_ = integral_lolimit_; }

30 i‡(
öãgøl_
 > 
öãgøl_hûimô_
) { integral_ = integral_hilimit_; }

32 
ouçut
 = 
kp_
*
îr‹
 + 
öãgøl_
 + 
kd_
*
dîiv©ive
;

35 i‡(
ouçut
 < 
lﬁimô_
) { output =Üolimit_; }

36 i‡(
ouçut
 > 
hûimô_
) { output = hilimit_; }

39 
œ°_îr‹_
 = 
îr‹
;

41  
ouçut
;

42 
	}
}

45 
	gPidC⁄åﬁÀr
::
	$ˇlcuœã
(
îr‹
, 
dt
)

47 i‡(
dt
 == 0) {  0; }

49 
dîiv©ive
 = (
îr‹
 - 
œ°_îr‹_
Ë/ 
dt
;

51  
	`ˇlcuœã
(
îr‹
, 
dîiv©ive
, 
dt
);

52 
	}
}

55 
	gPidC⁄åﬁÀr
::
	$£t
(
glo_pid_∑øms_t
 c⁄° & 
∑øms
)

57 
kp_
 = 
∑øms
.
kp
;

58 
kd_
 = 
∑øms
.
kd
;

59 
ki_
 = 
∑øms
.
ki
;

60 
lﬁimô_
 = 
∑øms
.
lﬁimô
;

61 
hûimô_
 = 
∑øms
.
hûimô
;

62 
öãgøl_lﬁimô_
 = 
∑øms
.
öãgøl_lﬁimô
;

63 
öãgøl_hûimô_
 = 
∑øms
.
öãgøl_hûimô
;

64 
	}
}

67 
	gPidC⁄åﬁÀr
::
	$gë
(
glo_pid_∑øms_t
 & 
∑øms
) const

69 
∑øms
.
kp
 = 
kp_
;

70 
∑øms
.
kd
 = 
kd_
;

71 
∑øms
.
ki
 = 
ki_
;

72 
∑øms
.
lﬁimô
 = 
lﬁimô_
;

73 
∑øms
.
hûimô
 = 
hûimô_
;

74 
∑øms
.
öãgøl_lﬁimô
 = 
öãgøl_lﬁimô_
;

75 
∑øms
.
öãgøl_hûimô
 = 
öãgøl_hûimô_
;

76 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\pwm_out_advanced_timer.cpp

2 
	~"°m32f4xx.h
"

3 
	~"pwm_out_adv™˚d_timî.h
"

4 
	~"m©h_utû.h
"

5 
	~"utû_as£π.h
"

8 
	gPwmOutAdv™˚dTimî
::
	$PwmOutAdv™˚dTimî
()

20 
uöt16_t
 
¥esˇœr
 = 0;

21 
auto_ªlﬂd_ªg_
 = 3599;

24 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

27 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

30 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

31 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_8
 | 
GPIO_Pö_9
;

32 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

33 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

34 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

35 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

36 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

39 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚8
, 
GPIO_AF_TIM1
);

40 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚9
, 
GPIO_AF_TIM1
);

43 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

44 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 
auto_ªlﬂd_ªg_
;

45 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 
¥esˇœr
;

46 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 0;

47 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

48 
TIM_TimeBa£Såu˘uª
.
TIM_Rïëôi⁄Cou¡î
 = 0;

49 
	`TIM_TimeBa£Inô
(
TIM1
, &
TIM_TimeBa£Såu˘uª
);

52 
TIM_OCInôTy≥Def
 
TIM_OCInôSåu˘uª
;

53 
TIM_OCInôSåu˘uª
.
TIM_OCMode
 = 
TIM_OCMode_PWM1
;

54 
TIM_OCInôSåu˘uª
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_E«bÀ
;

55 
TIM_OCInôSåu˘uª
.
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

56 
TIM_OCInôSåu˘uª
.
TIM_Pul£
 = 0;

57 
TIM_OCInôSåu˘uª
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

58 
TIM_OCInôSåu˘uª
.
TIM_OCNPﬁ¨ôy
 = 
TIM_OCNPﬁ¨ôy_High
;

59 
TIM_OCInôSåu˘uª
.
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

60 
TIM_OCInôSåu˘uª
.
TIM_OCNIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

62 
	`TIM_OC1Inô
(
TIM1
, &
TIM_OCInôSåu˘uª
);

63 
	`TIM_OC1PªlﬂdC⁄fig
(
TIM1
, 
TIM_OCPªlﬂd_E«bÀ
);

65 
	`TIM_OC2Inô
(
TIM1
, &
TIM_OCInôSåu˘uª
);

66 
	`TIM_OC2PªlﬂdC⁄fig
(
TIM1
, 
TIM_OCPªlﬂd_E«bÀ
);

69 
TIM_BDTRInôTy≥Def
 
TIM_BDTRInôSåu˘uª
;

70 
TIM_BDTRInôSåu˘uª
.
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

71 
TIM_BDTRInôSåu˘uª
.
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

72 
TIM_BDTRInôSåu˘uª
.
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

73 
TIM_BDTRInôSåu˘uª
.
TIM_DódTime
 = 0;

74 
TIM_BDTRInôSåu˘uª
.
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

75 
TIM_BDTRInôSåu˘uª
.
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

76 
TIM_BDTRInôSåu˘uª
.
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

77 
	`TIM_BDTRC⁄fig
(
TIM1
, &
TIM_BDTRInôSåu˘uª
);

79 
	`TIM_ARRPªlﬂdC⁄fig
(
TIM1
, 
ENABLE
);

82 
TIM1
->
BDTR
 |= 0x8000;

85 
	`TIM_Cmd
(
TIM1
, 
ENABLE
);

86 
	}
}

89 
	gPwmOutAdv™˚dTimî
::
	$£tDuty
(
duty
, 
uöt8_t
 
ch™√l_num
)

91 
duty
 = 
	`limô
(duty, 0.0f, 1.0f);

92 
uöt32_t
 
c¸
 = (uöt32_t)(
duty
 * 
auto_ªlﬂd_ªg_
);

93 
ch™√l_num
)

96 
TIM1
->
CCR1
 = 
c¸
;

99 
TIM1
->
CCR2
 = 
c¸
;

102 
TIM1
->
CCR3
 = 
c¸
;

105 
TIM1
->
CCR4
 = 
c¸
;

108 
	`as£π_Æways_msg
(
ASSERT_STOP
, "Invalid CCRÇum for PWM outputÅimer.");

112 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\six_point_sensor_cal.cpp

2 
	~<m©h.h
>

3 
	~"°döt.h
"

5 
	~"six_poöt_£ns‹_ˇl.h
"

8 
boﬁ
 
guass_sﬁve
(**
a
, 
öt8_t
 
n
, *
x
);

11 
boﬁ
 
	$six_poöt_£ns‹_ˇl
(
fõld_mag
, c⁄° 
x
[6], c⁄° 
y
[6],

12 c⁄° 
z
[6], 
S
[3], 
b
[3] )

14 
öt16_t
 
i
;

15 
A
[5][5];

16 *
A±rs
[5] = {
A
[0], A[1], A[2], A[3], A[4]};

17 
c
[5];

18 
xp
, 
yp
, 
zp
, 
Sx
;

27 
i
=0;i<5;i++)

29 
A
[
i
][0] = 2.0 * (
x
[i+1] - x[i]);

30 
A
[
i
][1] = 
y
[i+1]*y[i+1] - y[i]*y[i];

31 
A
[
i
][2] = 2.0 * (
y
[i+1] - y[i]);

32 
A
[
i
][3] = 
z
[i+1]*z[i+1] - z[i]*z[i];

33 
A
[
i
][4] = 2.0 * (
z
[i+1] - z[i]);

34 
c
[
i
] = 
x
[i]*x[i] - x[i+1]*x[i+1];

38 i‡–!
	`guass_sﬁve
(
A±rs
, 5, 
c
) )

44 
xp
 = 
x
[0]; 
yp
 = 
y
[0]; 
zp
 = 
z
[0];

45 
Sx
 = 
	`sqπ
(
fõld_mag
*fõld_mag / (
xp
*x∞+ 2*
c
[0]*x∞+ c[0]*c[0] + c[1]*
yp
*yp +

46 2*
c
[2]*
yp
 + c[2]*c[2]/c[1] + c[3]*
zp
*zp + 2*c[4]*zp + c[4]*c[4]/c[3]));

48 
S
[0] = 
Sx
;

49 
b
[0] = 
Sx
*
c
[0];

50 
S
[1] = 
	`sqπ
(
c
[1]*
Sx
*Sx);

51 
b
[1] = 
c
[2]*
Sx
*Sx/
S
[1];

52 
S
[2] = 
	`sqπ
(
c
[3]*
Sx
*Sx);

53 
b
[2] = 
c
[4]*
Sx
*Sx/
S
[2];

56 
	}
}

63 
boﬁ
 
	$guass_sﬁve
(**
a
, 
öt8_t
 
n
, *
x
)

65 
öt8_t
 
i
,
j
,
k
,
maxrow
;

66 
tmp
;

68 
i
=0;i<
n
;i++)

71 
maxrow
 = 
i
;

72 
j
=
i
+1;j<
n
;j++)

74 i‡(
	`Ábs
(
a
[
j
][
i
]Ë> fabs◊[
maxrow
][i]))

76 
maxrow
 = 
j
;

81 
k
=
i
;k<
n
;k++)

83 
tmp
 = 
a
[
i
][
k
];

84 
a
[
i
][
k
] =á[
maxrow
][k];

85 
a
[
maxrow
][
k
] = 
tmp
;

87 
tmp
 = 
x
[
i
];

88 
x
[
i
]x[
maxrow
];

89 
x
[
maxrow
]=
tmp
;

92 i‡(
	`Ábs
(
a
[
i
][i]) < 1e-30)

94  
Ál£
;

99 
j
=
i
+1;j<
n
;j++)

101 
tmp
 = 
a
[
j
][
i
]/a[i][i];

102 
x
[
j
] -x[
i
] * 
tmp
;

103 
k
=
i
+1;k<
n
;k++)

105 
a
[
j
][
k
] -a[
i
][k] * 
tmp
;

111 
x
[
n
-1]=x[n-1]/
a
[n-1][n-1];

112 
i
=
n
-2;i>=0;i--)

114 
j
=
n
-1;j>
i
;j--)

116 
x
[
i
] -
a
[i][
j
] * x[j];

118 
x
[
i
] = x[i]/
a
[i][i];

121  
åue
;

122 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\spi.cpp

2 
	~<c°döt
>

3 
	~<c°dio
>

4 
	~"•i.h
"

5 
	~"utû_as£π.h
"

7 
	#SPI_MAX_ATTEMPTS
 (100)

8 

	)

9 
	#SPI3_SCLK_GPIO_PORT
 (
GPIOC
 )

	)

10 
	#SPI3_SCLK_GPIO_CLK
 (
RCC_AHB1Pîùh_GPIOC
)

	)

11 
	#SPI3_SCLK_GPIO_PIN
 (
GPIO_Pö_10
 )

	)

12 
	#SPI3_SCLK_AF_PIN
 (
GPIO_PöSour˚10
 )

	)

14 
	#SPI3_MISO_GPIO_PORT
 (
GPIOC
 )

	)

15 
	#SPI3_MISO_GPIO_CLK
 (
RCC_AHB1Pîùh_GPIOC
)

	)

16 
	#SPI3_MISO_GPIO_PIN
 (
GPIO_Pö_11
 )

	)

17 
	#SPI3_MISO_AF_PIN
 (
GPIO_PöSour˚11
 )

	)

19 
	#SPI3_MOSI_GPIO_PORT
 (
GPIOC
 )

	)

20 
	#SPI3_MOSI_GPIO_CLK
 (
RCC_AHB1Pîùh_GPIOC
)

	)

21 
	#SPI3_MOSI_GPIO_PIN
 (
GPIO_Pö_12
 )

	)

22 
	#SPI3_MOSI_AF_PIN
 (
GPIO_PöSour˚12
 )

	)

25 
boﬁ
 
	gSPI
::
öô
[
SPI_BUS_COUNT
];

26 
SPI
 
	gSPI
::
objs
[
SPI_BUS_COUNT
];

29 
SPI
 * 
	gSPI
::
	$ö°™˚
(
•i_bus_id_t
 
bus
)

31 i‡(
bus
 >
SPI_BUS_COUNT
)

33 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "Invalid SPI bus ID");

34  
NULL
;

37 i‡(
öô
[
bus
])

39  &
objs
[
bus
];

42 
bus
)

44 
SPI_BUS_1
:

45  
NULL
;

47 
SPI_BUS_2
:

48  
NULL
;

50 
SPI_BUS_3
:

51 
objs
[
bus
].
ba£_
 = 
SPI3
;

54 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

55 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

56 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_15
;

57 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

58 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

59 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

60 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

61 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

62 
GPIOA
->
BSRRL
 = 
GPIO_Pö_15
;

65 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

66 
	`RCC_AHB1PîùhClockCmd
(
SPI3_SCLK_GPIO_CLK
, 
ENABLE
);

67 
	`RCC_AHB1PîùhClockCmd
(
SPI3_MISO_GPIO_CLK
, 
ENABLE
);

68 
	`RCC_AHB1PîùhClockCmd
(
SPI3_MOSI_GPIO_CLK
, 
ENABLE
);

71 
	`GPIO_PöAFC⁄fig
(
SPI3_SCLK_GPIO_PORT
, 
SPI3_SCLK_AF_PIN
, 
GPIO_AF_SPI3
);

72 
	`GPIO_PöAFC⁄fig
(
SPI3_MOSI_GPIO_PORT
, 
SPI3_MOSI_AF_PIN
, 
GPIO_AF_SPI3
);

73 
	`GPIO_PöAFC⁄fig
(
SPI3_MISO_GPIO_PORT
, 
SPI3_MISO_AF_PIN
, 
GPIO_AF_SPI3
);

76 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

77 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

78 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

79 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

82 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI3_SCLK_GPIO_PIN
;

83 
	`GPIO_Inô
(
SPI3_SCLK_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

86 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI3_MOSI_GPIO_PIN
;

87 
	`GPIO_Inô
(
SPI3_MOSI_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

90 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI3_MISO_GPIO_PIN
;

91 
	`GPIO_Inô
(
SPI3_MISO_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

94 
	`SPI_I2S_DeInô
(
SPI3
);

95 
SPI_InôTy≥Def
 
SPI_InôSåu˘uª
;

96 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

97 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

98 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

99 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_High
;

100 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_2Edge
;

101 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

102 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_4
;

103 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

104 
	`SPI_Inô
(
SPI3
, &
SPI_InôSåu˘uª
);

106 
objs
[
bus
].
	`£tFªquícy
(
DEFAULT_SPI_FREQUENCY
);

108 
	`SPI_Cmd
(
SPI3
, 
ENABLE
);

111 
öô
[
bus
] = 
åue
;

112 (&
objs
[
bus
]);

114 
SPI_BUS_4
:

115  
NULL
;

119  
NULL
;

121 
	}
}

124 
	gSPI
::
	$£tFªquícy
(
uöt32_t
 
‰equícy
)

127 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

128 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

129 
uöt32_t
 
p˛k
 = 
RCC_Clocks
.
PCLK2_Fªquícy
;

132 
uöt16_t
 
ªg
 = 
ba£_
->
CR1
 & ~(0x0038);

135 i‡(
‰equícy
 >(
p˛k
 >> 1))

137 
ªg
 |= (0x00 << 3);

139 i‡(
‰equícy
 >(
p˛k
 >> 2))

141 
ªg
 |= (0x01 << 3);

143 i‡(
‰equícy
 >(
p˛k
 >> 3))

145 
ªg
 |= (0x02 << 3);

147 i‡(
‰equícy
 >(
p˛k
 >> 4))

149 
ªg
 |= (0x03 << 3);

151 i‡(
‰equícy
 >(
p˛k
 >> 5))

153 
ªg
 |= (0x04 << 3);

155 i‡(
‰equícy
 >(
p˛k
 >> 6))

157 
ªg
 |= (0x05 << 3);

159 i‡(
‰equícy
 >(
p˛k
 >> 7))

161 
ªg
 |= (0x06 << 3);

163 i‡(
‰equícy
 >(
p˛k
 >> 8))

165 
ªg
 |= (0x07 << 3);

169 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "[SPI]: Invalid frequencyáttemptedÅo be set.");

173 
ba£_
->
CR1
 = 
ªg
;

175 
	}
}

178 
uöt8_t
 
	gSPI
::
	$£ndByã
(
uöt8_t
 
byã_to_£nd
)

180 
uöt32_t
 
©ãm±s
 = 0;

183 
	`SPI_I2S_GëFœgSètus
(
ba£_
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
)

185 
©ãm±s
++;

186 i‡(
©ãm±s
 >
SPI_MAX_ATTEMPTS
)

195 
	`SPI_I2S_SídD©a
(
ba£_
, 
byã_to_£nd
);

198 
©ãm±s
 = 0;

199 
	`SPI_I2S_GëFœgSètus
(
ba£_
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
)

201 
©ãm±s
++;

202 i‡(
©ãm±s
 >
SPI_MAX_ATTEMPTS
)

211  (
	`SPI_I2S_Re˚iveD©a
(
ba£_
) & 0x00FF);

213 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\system_timer.cpp

2 
	~"°m32f4xx.h
"

3 
	~"sy°em_timî.h
"

4 
	~"scheduÀr.h
"

7 
	gSy°emTimî
::
	$Sy°emTimî
() :

8 
	`rﬁlovî_cou¡_
(0),

9 
	$œ°_ªp‹ãd_ticks_
(0)

12 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

13 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

14 
timî_‰equícy_
 = 
RCC_Clocks
.
HCLK_Fªquícy
;

17 
ªlﬂd_vÆue_
 = 0xFFFFFF;

20 
£c⁄ds_≥r_tick_
 = 1.0 / 
timî_‰equícy_
;

24 
uöt32_t
 
tick_bëwìn_öãºu±s
 = 
ªlﬂd_vÆue_
;

25 
uöt32_t
 
c⁄fig_îr‹
 = 
	`SysTick_C⁄fig
(
tick_bëwìn_öãºu±s
);

26 i‡(
c⁄fig_îr‹
 != 0)

28 
åue
);

32 
	`NVIC_SëPri‹ôy
(
SysTick_IRQn
, 0x00);

33 
	}
}

36 "C" 
	$SysTick_H™dÀr
()

38 
sys_timî
.
rﬁlovî_cou¡_
++;

39 
	}
}

42 
uöt64_t
 
Sy°emTimî
::
	$ticks
()

50 
boﬁ
 
öãºu±s_íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

53 
uöt64_t
 
cuºít_ticks
 = (
rﬁlovî_cou¡_
*
ªlﬂd_vÆue_
Ë+ (ªlﬂd_vÆue_ - 
SysTick
->
VAL
);

55 i‡(
cuºít_ticks
 < 
œ°_ªp‹ãd_ticks_
)

57 
cuºít_ticks
 = ((
rﬁlovî_cou¡_
+1)*
ªlﬂd_vÆue_
Ë+ (ªlﬂd_vÆue_ - 
SysTick
->
VAL
);

60 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±s_íabÀd
);

62 
œ°_ªp‹ãd_ticks_
 = 
cuºít_ticks
;

64  
cuºít_ticks
;

65 
	}
}

68 
Sy°emTimî
::
	$busyWaô
(
£c⁄ds_to_waô
)

70 
°¨t_£c⁄ds
 = 
this
->
	`£c⁄ds
();

71 
this
->
	`£c⁄ds
(Ë< (
°¨t_£c⁄ds
 + 
£c⁄ds_to_waô
)) {}

72 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\tb6612fng.cpp

2 
	~"tb6612‚g.h
"

6 
DigôÆOut
 
a_ö1
(
PE14
);

7 
DigôÆOut
 
a_ö2
(
PE13
);

8 
DigôÆOut
 
b_ö1
(
PE15
);

9 
DigôÆOut
 
b_ö2
(
PB10
);

12 
	gTB6612FNG
::
	$TB6612FNG
()

15 
a_ö1
.
	`˛ór
();

16 
a_ö2
.
	`˛ór
();

17 
b_ö1
.
	`˛ór
();

18 
b_ö2
.
	`˛ór
();

19 
	}
}

22 
	gTB6612FNG
::
	$£tDutyA
(
duty
)

24 i‡(
duty
 > 0.0f)

26 
pwm_timî_
.
	`£tDuty
(
duty
, 2);

27 
a_ö2
.
	`£t
();

28 
a_ö1
.
	`˛ór
();

32 
pwm_timî_
.
	`£tDuty
(-
duty
, 2);

33 
a_ö1
.
	`£t
();

34 
a_ö2
.
	`˛ór
();

36 
	}
}

39 
	gTB6612FNG
::
	$£tDutyB
(
duty
)

41 i‡(
duty
 > 0.0f)

43 
pwm_timî_
.
	`£tDuty
(
duty
, 1);

44 
b_ö2
.
	`£t
();

45 
b_ö1
.
	`˛ór
();

49 
pwm_timî_
.
	`£tDuty
(-
duty
, 1);

50 
b_ö1
.
	`£t
();

51 
b_ö2
.
	`˛ór
();

53 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\trigtables.c

1 
	~"åigèbÀs.h
"

2 
	~<°döt.h
>

3 
	~<m©h.h
>

5 c⁄° 
	gCOSTABLE
[
TABLEN
]=

10 c⁄° 
	gATANTABLE
[
TABLEN
]=

17 
	$©™2èb
(
y
,
x
)

19 
öt16_t
 
Index
;

20 
th
;

22 i‡(
	`Ábsf
(
y
Ë> fabsf(
x
*
ATANRANGE
))

24 i‡(
y
 < 0Ë
th
 = -1.570796f;

25 
th
 = 1.570796f;

29 
Index
 = (
öt16_t
)((
y
/
x
/
ATANRANGE
 + 1)*
TABLEN
/2.0f);

30 i‡(
Index
 < 0) Index=0;

31 i‡(
Index
 > 
TABLEN
-1) Index=TABLEN-1;

33 
th
=
ATANTABLE
[
Index
];

35 i‡((
y
<0)&&(
x
<0)Ë
th
 -= 3.141593f;

36 i‡(
x
<0Ë
th
 += 3.141593f;

39 if(
th
<0)Åh += 6.283185f;

41 (
th
);

42 
	}
}

46 
	$söco°ab
(
thëa
, *
°h
, *
˘h
)

48 
öt16_t
 
CosIndex
, 
SöIndex
;

50 i‡(
thëa
 > 3.141593f)Åheta -= 6.283185f;

52 
CosIndex
 = (
öt16_t
)(
thëa
*
TABLEN
/2.0f/3.141593f + TABLEN/2.0f);

53 i‡(
CosIndex
 < 0) CosIndex=0;

54 i‡(
CosIndex
 > 
TABLEN
-1) CosIndex=TABLEN-1;

56 
SöIndex
=
CosIndex
-
TABLEN
/4;

57 i‡(
SöIndex
 < 0ËSöIndex +
TABLEN
;

59 *
˘h
=
COSTABLE
[
CosIndex
];

60 *
°h
=
COSTABLE
[
SöIndex
];

61 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\usart.cpp

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~"°m32f4xx.h
"

5 
	~"dma_rx.h
"

6 
	~"dma_tx.h
"

7 
	~"ußπ.h
"

8 
	~"utû_as£π.h
"

11 
boﬁ
 
	gUßπ
::
öô
[
USART_BUS_COUNT
];

12 
Ußπ
 
	gUßπ
::
objs
[
USART_BUS_COUNT
];

15 
Ußπ
 * 
	gUßπ
::
	$ö°™˚
(
ußπ_bus_t
 
bus
)

17 i‡(
öô
[
bus
])

19  &
objs
[
bus
];

22 
bus
)

24 
USART_BUS_1
:

25 
	`InôBus1
();

26 
objs
[
bus
].
bus_
 = bus;

27 
objs
[
bus
].
USARTx_
 = 
USART1
;

28 
öô
[
bus
] = 
åue
;

29  &
objs
[
bus
];

32 
USART_BUS_2
:

33 
	`InôBus2
();

34 
objs
[
bus
].
bus_
 = bus;

35 
objs
[
bus
].
USARTx_
 = 
USART2
;

36 
öô
[
bus
] = 
åue
;

37  &
objs
[
bus
];

41  
NULL
;

42 
	}
}

45 
	gUßπ
::~
	$Ußπ
()

47 i‡(
dma_tx_
 !
NULL
)

49 
dñëe
 
dma_tx_
;

52 i‡(
dma_rx_
 !
NULL
)

54 
dñëe
 
dma_rx_
;

56 
	}
}

59 
boﬁ
 
	gUßπ
::
	$gëByã
(
uöt8_t
 * 
byã
)

61  
dma_rx_
->
	`gëByã
(
byã
);

62 
	}
}

65 
boﬁ
 
	gUßπ
::
	$£ndBuf„r
(
uöt8_t
 c⁄° * 
d©a
, 
uöt16_t
 
Àn
)

67  
dma_tx_
->
	`£ndBuf„r
(
d©a
, 
Àn
);

68 
	}
}

71 
	gUßπ
::
	$upd©eBaudøã
(
uöt32_t
 
baudøã
)

73 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

74 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
baudøã
;

75 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

76 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

77 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

78 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

79 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

80 
	`USART_Inô
(
USARTx_
, &
USART_InôSåu˘uª
);

81 
	}
}

84 
	gUßπ
::
	$InôBus1
()

86 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

87 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

90 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

92 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

95 
Ußπ
 * 
ußπ
 = &
objs
[
USART_BUS_1
];

96 
ußπ
->
dma_rx_
 = 
√w
 
	`DmaRx
(
DMA2_Såóm2
,

97 
DMA_Ch™√l_4
,

98 (
uöt32_t
)&
USART1
->
DR
,

99 
USART1_RX_BUFF_SIZE
);

100 
ußπ
->
dma_tx_
 = 
√w
 
	`DmaTx
(
DMA2_Såóm7
,

101 
DMA_Ch™√l_4
,

102 
DMA2_Såóm7_IRQn
,

103 (
uöt32_t
)&
USART1
->
DR
,

104 
DMA_IT_TCIF7
,

105 
DMA_IT_TEIF7
,

106 
USART1_TX_BUFF_SIZE
);

108 
	`as£π
(
ußπ
->
dma_rx_
 !
NULL
, 
ASSERT_STOP
);

109 
	`as£π
(
ußπ
->
dma_tx_
 !
NULL
, 
ASSERT_STOP
);

111 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 57600;

112 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

113 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

114 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

115 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

116 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

117 
	`USART_Inô
(
USART1
, &
USART_InôSåu˘uª
);

120 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚7
, 
GPIO_AF_USART1
);

122 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚6
, 
GPIO_AF_USART1
);

125 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

126 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

127 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

128 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

129 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
 | 
GPIO_Pö_7
;

130 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

132 
	`USART_DMACmd
(
USART1
, 
USART_DMAReq_Rx
, 
ENABLE
);

133 
	`USART_DMACmd
(
USART1
, 
USART_DMAReq_Tx
, 
ENABLE
);

135 
	`USART_Cmd
(
USART1
, 
ENABLE
);

137 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

138 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
DMA1_Såóm7_IRQn
;

139 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 3;

140 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0x00;

141 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

142 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

143 
	}
}

146 
	gUßπ
::
	$InôBus2
()

148 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

149 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

152 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

154 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

157 
Ußπ
 * 
ußπ
 = &
objs
[
USART_BUS_2
];

158 
ußπ
->
dma_rx_
 = 
√w
 
	`DmaRx
(
DMA1_Såóm5
,

159 
DMA_Ch™√l_4
,

160 (
uöt32_t
)&
USART2
->
DR
,

161 
USART2_RX_BUFF_SIZE
);

162 
ußπ
->
dma_tx_
 = 
√w
 
	`DmaTx
(
DMA1_Såóm6
,

163 
DMA_Ch™√l_4
,

164 
DMA1_Såóm6_IRQn
,

165 (
uöt32_t
)&
USART2
->
DR
,

166 
DMA_IT_TCIF6
,

167 
DMA_IT_TEIF6
,

168 
USART2_TX_BUFF_SIZE
);

170 
	`as£π
(
ußπ
->
dma_rx_
 !
NULL
, 
ASSERT_STOP
);

171 
	`as£π
(
ußπ
->
dma_tx_
 !
NULL
, 
ASSERT_STOP
);

173 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 115200;

174 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

175 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

176 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

177 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

178 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

179 
	`USART_Inô
(
USART2
, &
USART_InôSåu˘uª
);

182 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚6
, 
GPIO_AF_USART2
);

184 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚5
, 
GPIO_AF_USART2
);

187 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

188 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

189 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

190 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

191 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_5
 | 
GPIO_Pö_6
;

192 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

194 
	`USART_DMACmd
(
USART2
, 
USART_DMAReq_Rx
, 
ENABLE
);

195 
	`USART_DMACmd
(
USART2
, 
USART_DMAReq_Tx
, 
ENABLE
);

197 
	`USART_Cmd
(
USART2
, 
ENABLE
);

199 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

200 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
DMA1_Såóm6_IRQn
;

201 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 3;

202 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0x00;

203 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

204 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

205 
	}
}

208 "C" 
	$DMA1_Såóm7_IRQH™dÀr
()

210 
Ußπ
::
	`USART1_TX_ISR
();

211 
	}
}

214 "C" 
	$DMA1_Såóm6_IRQH™dÀr
()

216 
Ußπ
::
	`USART2_TX_ISR
();

217 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\user_leds.cpp

2 
	~"u£r_Àds.h
"

5 
	gU£rLeds
::
	$U£rLeds
()

8 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

9 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

12 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

14 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_13
|
GPIO_Pö_14
|
GPIO_Pö_15
;

15 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

16 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

17 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

18 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

20 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

22 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_1
;

23 
	`GPIO_Inô
(
GPIOE
, &
GPIO_InôSåu˘uª
);

25 
	`£t
(
USER_LED_ORANGE
);

26 
	`£t
(
USER_LED_YELLOW
);

27 
	`£t
(
USER_LED_RED
);

28 
	`£t
(
USER_LED_GREEN
);

29 
	}
}

32 
	gU£rLeds
::
	$£t
(
u£r_Àd_id_t
 
Àd
)

34 
Àd
)

36 
USER_LED_ORANGE
:

37 
GPIOC
->
BSRRH
 = 
GPIO_Pö_13
;

39 
USER_LED_YELLOW
:

40 
GPIOC
->
BSRRH
 = 
GPIO_Pö_14
;

42 
USER_LED_GREEN
:

43 
GPIOC
->
BSRRH
 = 
GPIO_Pö_15
;

45 
USER_LED_RED
:

46 
GPIOE
->
BSRRH
 = 
GPIO_Pö_1
;

49 
	}
}

52 
	gU£rLeds
::
	$˛ór
(
u£r_Àd_id_t
 
Àd
)

54 
Àd
)

56 
USER_LED_ORANGE
:

57 
GPIOC
->
BSRRL
 = 
GPIO_Pö_13
;

59 
USER_LED_YELLOW
:

60 
GPIOC
->
BSRRL
 = 
GPIO_Pö_14
;

62 
USER_LED_GREEN
:

63 
GPIOC
->
BSRRL
 = 
GPIO_Pö_15
;

65 
USER_LED_RED
:

66 
GPIOE
->
BSRRL
 = 
GPIO_Pö_1
;

69 
	}
}

72 
	gU£rLeds
::
	$toggÀ
(
u£r_Àd_id_t
 
Àd
)

74 
Àd
)

76 
USER_LED_ORANGE
:

77 
GPIOC
->
ODR
 ^
GPIO_Pö_13
;

79 
USER_LED_YELLOW
:

80 
GPIOC
->
ODR
 ^
GPIO_Pö_14
;

82 
USER_LED_GREEN
:

83 
GPIOC
->
ODR
 ^
GPIO_Pö_15
;

85 
USER_LED_RED
:

86 
GPIOE
->
ODR
 ^
GPIO_Pö_1
;

89 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\user_pb.cpp

4 
	~"u£r_pb.h
"

5 
	~"°m32f4xx.h
"

8 
	gU£rPushBuâ⁄
::
	$U£rPushBuâ⁄
(
u£r_buâ⁄_id_t
 
buâ⁄_id
) :

9 
	`buâ⁄_id_
(
buâ⁄_id
),

10 
	$buâ⁄_was_¥es£d_
(
Ál£
)

12 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

14 i‡(
buâ⁄_id
 =
USER_PB_TOP
)

16 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

18 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
;

19 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

20 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

21 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

22 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

24 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

26 i‡(
buâ⁄_id
 =
USER_PB_BOTTOM
)

28 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

30 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
;

31 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

32 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

33 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

34 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

36 
	`GPIO_Inô
(
GPIOE
, &
GPIO_InôSåu˘uª
);

38 
	}
}

41 
boﬁ
 
	gU£rPushBuâ⁄
::
	$ªad
()

43 i‡(
buâ⁄_id_
 =
USER_PB_TOP
)

45  !(
boﬁ
)(
GPIOB
->
IDR
 & 
GPIO_Pö_2
);

47 i‡(
buâ⁄_id_
 =
USER_PB_BOTTOM
)

49  !(
boﬁ
)(
GPIOE
->
IDR
 & 
GPIO_Pö_0
);

52  
Ál£
;

53 
	}
}

56 
boﬁ
 
	gU£rPushBuâ⁄
::
	$a˘iv©ed
()

58 
boﬁ
 
buâ⁄_a˘iv©ed
 = 
Ál£
;

60 
boﬁ
 
is_¥es£d
 = 
	`ªad
();

61 i‡(!
is_¥es£d
 
™d
 
buâ⁄_was_¥es£d_
)

63 
buâ⁄_a˘iv©ed
 = 
åue
;

66 
buâ⁄_was_¥es£d_
 = 
is_¥es£d
;

68  
buâ⁄_a˘iv©ed
;

69 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\util_assert.cpp

2 
	~<c°d¨g
>

3 
	~<c°dio
>

4 
	~<c°rög
>

6 
	~"ãÀmëry_£nd_èsk.h
"

7 
	~"debug_¥ötf.h
"

8 
	~"utû_as£π.h
"

9 
	~"globs.h
"

22 
	gutû_as£π_Áûed


24 
	ga˘i⁄
,

25 c⁄° * 
	gfûe_«me
,

26 
	glöe_numbî
,

27 c⁄° * 
	gf‹m©
,

31 c⁄° 
	gbuf„r_size
 = 
TELEMETRY_TEXT_SIZE
;

32 
	gbuf„r
[
buf„r_size
];

33 
	gcuºít_ödex
 = 0;

34 c⁄° * 
	gju°_fûe_«me
 = 
NULL
;

38 i‡(
	glöe_numbî
 >= 0)

42 
ju°_fûe_«me
 = 
°ºchr
(
fûe_«me
, '/');

44 i‡(
	gju°_fûe_«me
 =
NULL
)

46 
ju°_fûe_«me
 = 
°ºchr
(
fûe_«me
, '\\');

48 i‡(
	gju°_fûe_«me
 =
NULL
)

50 
ju°_fûe_«me
 = 
fûe_«me
;

54 
	gcuºít_ödex
 +
¢¥ötf
(
buf„r
, 
buf„r_size
, "Fûe: %†%d: ", 
ju°_fûe_«me
, 
löe_numbî
);

58 
va_li°
 
	g¨gs
;

59 
va_°¨t
(
¨gs
, 
f‹m©
);

60 
	gcuºít_ödex
 +
v¢¥ötf
(
buf„r
 + 
cuºít_ödex
, 
buf„r_size
 - cuºít_ödex, 
f‹m©
, 
¨gs
);

61 
	gcuºít_ödex
 += 2;

62 
va_íd
(
¨gs
);

67 i‡(
	gcuºít_ödex
 >
buf„r_size
 - 2)

69 
cuºít_ödex
 = 
buf„r_size
 - 2;

73 
	gbuf„r
[
cuºít_ödex
-2] = '\r';

74 
	gbuf„r
[
cuºít_ödex
-1] = '\n';

75 
	gbuf„r
[
cuºít_ödex
] = '\0';

77 
glo_as£π_mesßge_t
 
	gas£π_mesßge
;

78 
	gas£π_mesßge
.
	ga˘i⁄
 = 
a˘i⁄
;

79 
mem˝y
(
as£π_mesßge
.
ãxt
, 
buf„r
, 
°æí
(buffer) + 1);

81 
	g£nd_èsk
.
h™dÀ
(
as£π_mesßge
);

84 i‡((
	ga˘i⁄
 =
ASSERT_STOP
Ë|| (
a˘i⁄
 =
ASSERT_RESTART
))

89 i‡(
scheduÀr
.
ru¬ögTaskID
(Ë!
TASK_ID_TELEM_SEND
)

91 
scheduÀr
.
ÊushOutgoögMesßges
();

95 i‡(
	gscheduÀr
.
ru¬ögTaskID
(Ë!
TASK_ID_TELEM_RECEIVE
)

97 
åue
)

101 
uöt32_t
 
i
 = 0; 
	gi
 < 3e5; ++i)

103 
asm
("");

105 
	g£nd_èsk
.
£nd
(
GLO_ID_STATUS_DATA
);

106 
	gscheduÀr
.
ÊushIncomögMesßges
();

107 
	gscheduÀr
.
ÊushOutgoögMesßges
();

112 
	gåue
) {};

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\balance_mode.cpp

2 
	~<cm©h
>

3 
	~"ãÀmëry_ª˚ive_èsk.h
"

4 
	~"globs.h
"

5 
	~"maö_c⁄åﬁ_èsk.h
"

6 
	~"physiˇl_c⁄°™ts.h
"

7 
	~"robŸ_£âögs.h
"

8 
	~"ãÀmëry_£nd_èsk.h
"

9 
	~"debug_¥ötf.h
"

10 
	~"utû_as£π.h
"

13 
	gMaöC⁄åﬁTask
::
	$bÆ™˚Mode
()

16 
di°™˚_comm™d_
 +
mŸi⁄_comm™ds_
.
löór_vñocôy
 * 
dñè_t_
;

17 
yaw_comm™d_
 +
mŸi⁄_comm™ds_
.
™guœr_vñocôy
 * 
dñè_t_
;

20 
thëa_cmd
 = 0;

24 
thëa
 = 
rﬁl_pôch_yaw_
.
Ωy
[1];

25 
thëad
 = 
imu_
.
gyros
[1];

26 
bëa_ªœtive
 = 
odomëry_
.
avg_di°™˚
 / 
WHEEL_RADIUS
;

27 
bëa
 = 
bëa_ªœtive
 + 
thëa
*(1 - 1.0‡/ 
GEAR_RATIO
);

28 
bëad
 = 
bëa_dîiv_
.
	`ˇlcuœã
(
bëa_ªœtive
Ë+ 
thëad
*(1 - 1.0‡/ 
GEAR_RATIO
);

30 
bëa_comm™d
 = 
di°™˚_comm™d_
 / 
WHEEL_RADIUS
;

33 
duty_cy˛e
 = 
thëa
*
K_
[0] + 
thëad
*K_[1] + (
bëa
-
bëa_comm™d
)*K_[2] + 
bëad
*K_[3];

35 
thëa_îr‹
 = 
thëa_cmd
 - 
rﬁl_pôch_yaw_
.
Ωy
[1];

38 
yaw_îr‹
 = 
yaw_comm™d_
 - 
odomëry_
.
yaw
;

39 
dñè_duty_cy˛e
 = 
yaw_pid
.
	`ˇlcuœã
(
yaw_îr‹
, -
imu_
.
gyros
[2], 
dñè_t_
);

41 
boﬁ
 
ÁŒí_down
 = (
thëa_îr‹
 > 0.8f) || (theta_error < -0.8f);

42 i‡(
ÁŒí_down
)

44 
duty_cy˛e
 = 0.0f;

45 
dñè_duty_cy˛e
 = 0.0f;

46 
yaw_pid
.
	`ª£tI¡egøl
();

49 
di°™˚_comm™d_
 = 
odomëry_
.
avg_di°™˚
;

50 
yaw_comm™d_
 = 
odomëry_
.
yaw
;

51 
mŸi⁄_comm™ds_
.
löór_vñocôy
 = 0.0f;

52 
mŸi⁄_comm™ds_
.
™guœr_vñocôy
 = 0.0f;

53 
ª˚ive_èsk
.
	`h™dÀ
(
mŸi⁄_comm™ds_
);

56 
mŸ‹_pwm_
.
À·_duty
 = 
duty_cy˛e
 - 
dñè_duty_cy˛e
;

57 
mŸ‹_pwm_
.
right_duty
 = 
duty_cy˛e
 + 
dñè_duty_cy˛e
;

59 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\custom_mode.cpp

2 
	~"globs.h
"

3 
	~"physiˇl_c⁄°™ts.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

5 
	~"Àds_èsk.h
"

6 
	~"debug_¥ötf.h
"

7 
	~"pid_c⁄åﬁÀr.h
"

9 
	#QTR_THRESHOLD
 (0.5f)

	)

10 
	#NOMINAL_SPEED
 (0.25f)

	)

13 
dëîmöe_löe_pos
(
uöt8_t
 
qå_°©e
, 
löe_posi°i⁄
, uöt8_à
num_qå_⁄
);

14 
PidC⁄åﬁÀr
 
åack_maze_löe_pid
(20, 15, 0, -1, 1, -4, 4);

17 
	gMaöC⁄åﬁTask
::
	$cu°omMode
()

19 i‡(
modes_
.
°©e
 =
STATE_NORMAL
)

21 
öt8_t
 
qå_°©e
 = 0;

22 
uöt8_t
 
num_qå_⁄
 = 0;

23 
dñè_•ìd
 = 0.0f, 
À·_•ìd_comm™d
 = 0.0f, 
right_•ìd_comm™d
 = 0.0f;

26 
uöt8_t
 
i
 = 0; i < 8; i ++)

28 i‡(
™Æog_
.
vﬁèges
[
i
] > 
QTR_THRESHOLD
)

30 
qå_°©e
 |
i
<<i;

31 
num_qå_⁄
++;

35 
Àds_èsk
.
	`ªque°NewLedGªíP©ã∫
(
qå_°©e
);

36 
löe_posôi⁄
 = 
	`dëîmöe_löe_pos
(
qå_°©e
,Üöe_posôi⁄, 
num_qå_⁄
);

38 
maze_mode
)

40 
TRACK_LINE
:

41 
dñè_•ìd
 = 
löe_åack_pid
.
	`ˇlcuœã
(0.0‡- 
löe_posôi⁄
, 
dñè_t_
);

42 
À·_•ìd_comm™d
 = 
NOMINAL_SPEED
 + 
dñè_•ìd
;

43 
right_•ìd_comm™d
 = 
NOMINAL_SPEED
 - 
dñè_•ìd
;

51 i‡(
num_qå_⁄
 > 3)

53 
°¨t_di°™˚
 = 
odomëry_
.
avg_di°™˚
;

55 if((
™Æog_
.
vﬁèges
[1] > 
QTR_THRESHOLD
) && (analog_.voltages[6] > QTR_THRESHOLD))

57 
tu∫_mode
 = 
LEFT
;

58 
maze_mode
 = 
ADVANCE
;

60 if((
™Æog_
.
vﬁèges
[6] > 
QTR_THRESHOLD
))

62 
tu∫_mode
 = 
LEFT
;

63 
maze_mode
 = 
ADVANCE
;

67 
tu∫_mode
 = 
RIGHT
;

68 
maze_mode
 = 
ADVANCE
;

71 i‡(
num_qå_⁄
 == 0)

73 
°¨t_di°™˚
 = 
odomëry_
.
avg_di°™˚
;

74 
tu∫_mode
 = 
AROUND
;

75 
maze_mode
 = 
ADVANCE
;

79 
ADVANCE
:

80 
À·_•ìd_comm™d
 = 
NOMINAL_SPEED
/2;

81 
right_•ìd_comm™d
 = 
NOMINAL_SPEED
/2;

83 i‡((
odomëry_
.
avg_di°™˚
 - 
°¨t_di°™˚
) > 0.125f)

85 
yaw
 = 
odomëry_
.yaw;

87 
tu∫_mode
)

89 
AROUND
:

90 
maze_mode
 = 
TURN_AROUND
;

94 
LEFT
:

95 
maze_mode
 = 
TURN_LEFT
;

98 
RIGHT
:

99 
maze_mode
 = 
TURN_RIGHT
;

105 
TERMINATION
:

106 
À·_•ìd_comm™d
 = 0.0f;

107 
right_•ìd_comm™d
 = 0.0f;

110 
TURN_AROUND
:

112 
À·_•ìd_comm™d
 = 
NOMINAL_SPEED
;

113 
right_•ìd_comm™d
 = -
NOMINAL_SPEED
;

115 if(
num_qå_⁄
 > 0)

117 
maze_mode
 = 
TRACK_LINE
;

122 
TURN_LEFT
:

123 
À·_•ìd_comm™d
 = -
NOMINAL_SPEED
;

124 
right_•ìd_comm™d
 = 
NOMINAL_SPEED
;

126 i‡((
™Æog_
.
vﬁèges
[3] > 
QTR_THRESHOLD
Ë&& (
odomëry_
.
yaw
 - yawË> 
PI
/8)

128 
maze_mode
 = 
TRACK_LINE
;

133 
TURN_RIGHT
:

134 
À·_•ìd_comm™d
 = 
NOMINAL_SPEED
;

135 
right_•ìd_comm™d
 = -
NOMINAL_SPEED
;

137 i‡((
™Æog_
.
vﬁèges
[4] > 
QTR_THRESHOLD
Ë&& (
odomëry_
.
yaw
 - yawË< 
PI
/8)

139 
maze_mode
 = 
TRACK_LINE
;

145 
À·_duty_comm™d
 = 
À·_•ìd_pid
.
	`ˇlcuœã
(
À·_•ìd_comm™d
 - 
odomëry_
.
À·_•ìd
, 
dñè_t_
);

146 
right_duty_comm™d
 = 
right_•ìd_pid
.
	`ˇlcuœã
(
right_•ìd_comm™d
 - 
odomëry_
.
right_•ìd
, 
dñè_t_
);

148 
mŸ‹_pwm_
.
À·_duty
 = 
À·_duty_comm™d
;

149 
mŸ‹_pwm_
.
right_duty
 = 
right_duty_comm™d
;

152 
	}
}

154 
	$dëîmöe_löe_pos
(
uöt8_t
 
qå_°©e
, 
œ°_löe_pos
, uöt8_à
num_qå_⁄
)

156 
öt8_t
 
löe_lo°_cou¡î
 = 0;

157 
löe_pos
 = 0;

159 
uöt8_t
 
i
 = 0; i < 8; i++)

161 i‡(
qå_°©e
 & (1<<
i
))

163 
löe_pos
 +(0.009525*
i
-0.0333375);

166 i‡((
num_qå_⁄
) && (num_qtr_on < 3))

168 i‡(
löe_lo°_cou¡î
)Üine_lost_counter -= 1;

169 
löe_pos
 =Üöe_pos/
num_qå_⁄
;

173 
löe_lo°_cou¡î
 = 9;

174 
löe_pos
 = 
œ°_löe_pos
;

177  (
löe_pos
);

178 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiment_mode.cpp

2 
	~<cm©h
>

3 
	~"globs.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

5 
	~"physiˇl_c⁄°™ts.h
"

6 
	~"åigèbÀs.h
"

7 
	~"utû_as£π.h
"

10 
upd©eWaveSèã
(
glo_wave_t
 & 
wave
);

11 
upd©eWave
(
glo_wave_t
 & 
wave
, 
dñè_t
);

14 
	gMaöC⁄åﬁTask
::
	$ex≥rimítMode
()

16 
	`upd©eWaveSèã
(
wave_
);

18 
	`upd©eWave
(
wave_
, 
dñè_t_
);

20 
modes_
.
sub_mode
)

22 
EXPERIMENT_MOTOR_SPEED_CONTROL
:

23 
	`ex≥rimít1Mode
(
wave_
.
vÆue
);

25 
EXPERIMENT_MOTOR_POSITION_CONTROL
:

26 
	`ex≥rimít2Mode
(
wave_
.
vÆue
);

28 
EXPERIMENT_NOT_IMPLEMENTED
:

29 
	`ex≥rimít3Mode
(
wave_
.
vÆue
);

32 
	}
}

35 
	$upd©eWaveSèã
(
glo_wave_t
 & 
wave
)

38 
wave_°¨tup_íd_time
 = 0;

40 i‡(
wave
.
°©e
 =
WAVE_READY_TO_RUN
)

42 
glo_ˇ±uª_comm™d_t
 
ˇ±uª_comm™d
;

43 
glo_ˇ±uª_comm™d
.
	`ªad
(&
ˇ±uª_comm™d
);

44 i‡(
ˇ±uª_comm™d
.
is_°¨t
 && c≠tuª_comm™d.
∑u£d
)

46 
ˇ±uª_comm™d
.
∑u£d
 = 
Ál£
;

47 
maö_c⁄åﬁ_èsk
.
	`h™dÀ
(
ˇ±uª_comm™d
);

50 
wave_°¨tup_íd_time
 = 
sys_timî
.
	`£c⁄ds
();

51 i‡((
wave
.
ty≥
 !
WAVE_CONSTANT
Ë&& (wave.
‰equícy
 > 0))

53 
wave_°¨tup_íd_time
 +(1.0‡/ 
wave
.
‰equícy
) / 8.0f;

56 
wave
.
°©e
 = 
WAVE_STARTING_UP
;

59 i‡(
wave
.
°©e
 =
WAVE_STARTING_UP
)

61 i‡(
sys_timî
.
	`£c⁄ds
(Ë>
wave_°¨tup_íd_time
)

63 
wave
.
°©e
 = 
WAVE_STARTED
;

66 
	}
}

69 
	$upd©eWave
(
glo_wave_t
 & 
wave
, 
dñè_t
)

71 i‡(
wave
.
°©e
 !
WAVE_STARTED
)

73 
wave
.
vÆue
 = 0;

77 
wave_≥riod
 = 0;

78 i‡(
wave
.
‰equícy
 != 0)

80 
wave_≥riod
 = 1.0‡/ 
wave
.
‰equícy
;

83 
wave
.
time
 +
dñè_t
;

84 
wave
.
tŸÆ_time
 +
dñè_t
;

86 i‡((
wave
.
tŸÆ_time
 > wave.
duøti⁄
Ë&& !wave.
run_c⁄töuous
)

88 
wave
.
vÆue
 = 0;

89 
wave
.
°©e
 = 
WAVE_STOPPED
;

94 i‡((
wave
.
time
 >
wave_≥riod
Ë&& (wave.
ty≥
 !
WAVE_TRAPEZOIDAL
))

96 
wave
.
time
 -
wave_≥riod
;

99 
wave
.
ty≥
)

101 
WAVE_SINE
:

102 
junk
;

103 
	`söco°ab
(
wave
.
time
 * wave.
‰equícy
 * 2*
PI
, &wave.
vÆue
, &
junk
);

104 
wave
.
vÆue
 = wave.
off£t
 + wave.
magnôude
 * wave.value;

106 
WAVE_SQUARE
:

107 i‡((
wave
.
time
 < 0.0fË|| (wave.timê>0.5‡* 
wave_≥riod
))

109 
wave
.
vÆue
 = wave.
off£t
;

113 
wave
.
vÆue
 = wave.
off£t
 + wave.
magnôude
;

116 
WAVE_TRIANGLE
:

117 i‡(
wave
.
time
 < 0.25‡* 
wave_≥riod
)

119 
wave
.
vÆue
 = wave.
off£t
 + 4.0‡* wave.
magnôude
 * wave.
‰equícy
 * wave.
time
;

121 i‡(
wave
.
time
 < 0.75‡* 
wave_≥riod
)

123 
wave
.
vÆue
 = wave.
off£t
 + 2.0‡* wave.
magnôude
 * (1.0‡- 2.0‡* wave.
‰equícy
 * wave.
time
);

127 
wave
.
vÆue
 = wave.
off£t
 + 4.0‡* wave.
magnôude
 * (wave.
‰equícy
 * wave.
time
 - 1.0f);

130 
WAVE_TRAPEZOIDAL
:

131 i‡(
wave
.
time
 < 0)

133 
wave
.
vÆue
 = wave.
off£t
;

135 i‡(
wave
.
time
 <wave.
t1
)

137 
wave
.
vÆue
 = wave.
off£t
 + wave.
c1
[0]*(wave.
time
*wave.time) + wave.c1[1]*wave.time + wave.c1[2];

139 i‡((
wave
.
time
 > wave.
t1
Ë&& (wave.timê<wave.
t2
))

141 
wave
.
vÆue
 = wave.
off£t
 + wave.
c2
[0]*(wave.
time
*wave.time) + wave.c2[1]*wave.time + wave.c2[2];

143 i‡((
wave
.
time
 > wave.
t2
Ë&& (wave.timê<wave.
t3
))

145 
wave
.
vÆue
 = wave.
off£t
 + wave.
c3
[0]*(wave.
time
*wave.time) + wave.c3[1]*wave.time + wave.c3[2];

147 i‡(
wave
.
time
 > wave.
t3
)

149 
wave
.
vÆue
 = wave.
off£t
 + wave.
dx
;

152 
WAVE_CONSTANT
:

153 
wave
.
vÆue
 = wave.
off£t
;

156 
wave
.
vÆue
 = 0;

160 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiments\experiment1_mode.cpp

2 
	~<cm©h
>

3 
	~"globs.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

5 
	~"physiˇl_c⁄°™ts.h
"

6 
	~"robŸ_£âögs.h
"

7 
	~"utû_as£π.h
"

10 
	gMaöC⁄åﬁTask
::
	$ex≥rimít1Mode
(
ex≥rimít_öput
)

12 i‡(
modes_
.
°©e
 !
STATE_NORMAL
)

18 
•ìd_comm™d
 = 
ex≥rimít_öput
;

20 
À·_•ìd_îr‹
 = 
•ìd_comm™d
 - 
odomëry_
.
À·_•ìd
;

21 
mŸ‹_pwm_
.
À·_duty
 = 
À·_•ìd_pid
.
	`ˇlcuœã
(
À·_•ìd_îr‹
, 
dñè_t_
);

23 
right_•ìd_îr‹
 = 
•ìd_comm™d
 - 
odomëry_
.
right_•ìd
;

24 
mŸ‹_pwm_
.
right_duty
 = 
right_•ìd_pid
.
	`ˇlcuœã
(
right_•ìd_îr‹
, 
dñè_t_
);

26 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiments\experiment2_mode.cpp

2 
	~<cm©h
>

3 
	~"globs.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

5 
	~"physiˇl_c⁄°™ts.h
"

6 
	~"robŸ_£âögs.h
"

7 
	~"utû_as£π.h
"

10 
	gMaöC⁄åﬁTask
::
	$ex≥rimít2Mode
(
ex≥rimít_öput
)

12 i‡(
modes_
.
°©e
 !
STATE_NORMAL
)

18 
posôi⁄_comm™d
 = 
ex≥rimít_öput
;

20 
À·_posôi⁄_îr‹
 = 
posôi⁄_comm™d
 - (
odomëry_
.
À·_di°™˚
 / 
WHEEL_RADIUS
 * 
RAD2DEG
);

21 
mŸ‹_pwm_
.
À·_duty
 = 
À·_posôi⁄_pid
.
	`ˇlcuœã
(
À·_posôi⁄_îr‹
, 
dñè_t_
);

23 
right_posôi⁄_îr‹
 = 
posôi⁄_comm™d
 - (
odomëry_
.
right_di°™˚
 / 
WHEEL_RADIUS
 * 
RAD2DEG
);

24 
mŸ‹_pwm_
.
right_duty
 = 
right_posôi⁄_pid
.
	`ˇlcuœã
(
right_posôi⁄_îr‹
, 
dñè_t_
);

26 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiments\experiment3_mode.cpp

2 
	~<cm©h
>

3 
	~"globs.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

5 
	~"physiˇl_c⁄°™ts.h
"

6 
	~"robŸ_£âögs.h
"

7 
	~"utû_as£π.h
"

10 
	gMaöC⁄åﬁTask
::
	$ex≥rimít3Mode
(
ex≥rimít_öput
)

12 i‡(
	`thrŸée
(2))

14 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "ThisÉxperiment isn't implemented");

16 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\horizontal_mode.cpp

2 
	~<cm©h
>

3 
	~"ãÀmëry_ª˚ive_èsk.h
"

4 
	~"globs.h
"

5 
	~"maö_c⁄åﬁ_èsk.h
"

6 
	~"physiˇl_c⁄°™ts.h
"

7 
	~"robŸ_£âögs.h
"

8 
	~"ãÀmëry_£nd_èsk.h
"

9 
	~"utû_as£π.h
"

12 
	gMaöC⁄åﬁTask
::
	$h‹iz⁄èlMode
()

14 
yaw_comm™d_
 +
mŸi⁄_comm™ds_
.
™guœr_vñocôy
 * 
dñè_t_
;

16 
À·_•ìd_îr‹
 = 
mŸi⁄_comm™ds_
.
löór_vñocôy
 - 
odomëry_
.
À·_•ìd
;

17 
À·_duty_cy˛e_comm™d
 = 
À·_•ìd_pid
.
	`ˇlcuœã
(
À·_•ìd_îr‹
, 
dñè_t_
);

19 
right_•ìd_îr‹
 = 
mŸi⁄_comm™ds_
.
löór_vñocôy
 - 
odomëry_
.
right_•ìd
;

20 
right_duty_cy˛e_comm™d
 = 
right_•ìd_pid
.
	`ˇlcuœã
(
right_•ìd_îr‹
, 
dñè_t_
);

23 
yaw_îr‹
 = (
yaw_comm™d_
 - 
odomëry_
.
yaw
);

24 
dñè_duty
 = 
yaw_pid
.
	`ˇlcuœã
(
yaw_îr‹
, -
imu_
.
gyros
[2], 
dñè_t_
);

26 i‡(
modes_
.
°©e
 !
STATE_NORMAL
)

28 
À·_duty_cy˛e_comm™d
 = 0.0f;

29 
right_duty_cy˛e_comm™d
 = 0.0f;

30 
dñè_duty
 = 0.0f;

31 
yaw_pid
.
	`ª£tI¡egøl
();

34 
yaw_comm™d_
 = 
odomëry_
.
yaw
;

35 
mŸi⁄_comm™ds_
.
löór_vñocôy
 = 0.0f;

36 
mŸi⁄_comm™ds_
.
™guœr_vñocôy
 = 0.0f;

37 
ª˚ive_èsk
.
	`h™dÀ
(
mŸi⁄_comm™ds_
);

40 
mŸ‹_pwm_
.
À·_duty
 = 
À·_duty_cy˛e_comm™d
 - 
dñè_duty
;

41 
mŸ‹_pwm_
.
right_duty
 = 
right_duty_cy˛e_comm™d
 + 
dñè_duty
;

43 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\line_following_mode.cpp

2 
	~"globs.h
"

3 
	~"Àds_èsk.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

7 
	gMaöC⁄åﬁTask
::
	$löeFﬁlowögMode
()

10 
•ìd_comm™d
 = .5;

13 
löe_posôi⁄
 = 0;

16 c⁄° 
löe_thªsh
 = 1.0f;

19 
uöt8_t
 
Àd_°©e
 = 0;

22 c⁄° 
ú_•acög
 = 0.009525;

25 
uöt8_t
 
num_£eög_löe
 = 0;

28 
œ°_löe_posôi⁄
 = 0;

31 
löe_posôi⁄_sum
 = 0;

34 
boﬁ
 
°›≥d_£eög
 = 
Ál£
;

35 
boﬁ
 
•lô_dëe˘ed
 = 
Ál£
;

39 c⁄° 
uöt8_t
 
num_£ns‹s
 = 8;

40 
uöt8_t
 
i
 = 0; i < 
num_£ns‹s
; ++i)

42 
boﬁ
 
£eög_löe
 = (
™Æog_
.
vﬁèges
[
i
] >
löe_thªsh
);

45 
Àd_°©e
 |
£eög_löe
 << 
i
;

47 i‡(
£eög_löe
)

49 
löe_posôi⁄_sum
 +
i
 * 
ú_•acög
;

50 
num_£eög_löe
++;

54 i‡(!
•lô_dëe˘ed
)

56 
•lô_dëe˘ed
 = 
°›≥d_£eög
 && 
£eög_löe
;

57 
°›≥d_£eög
 = !
£eög_löe
 && (
num_£eög_löe
 > 0);

61 i‡(
num_£eög_löe
 == 0)

64 
löe_posôi⁄
 = 
œ°_löe_posôi⁄
;

66 i‡(
•lô_dëe˘ed
)

70 
löe_posôi⁄
 = 
œ°_löe_posôi⁄
 / 2.0f;

75 
löe_posôi⁄
 = 
löe_posôi⁄_sum
 / 
num_£eög_löe
;

78 
löe_posôi⁄
 -((
num_£ns‹s
-1Ë/ 2.0fË* 
ú_•acög
;

81 
Àds_èsk
.
	`ªque°NewLedGªíP©ã∫
(
Àd_°©e
);

85 
dñè_duty
 = 
löe_åack_pid
.
	`ˇlcuœã
(0.0‡- 
löe_posôi⁄
, 
dñè_t_
);

87 
À·_duty_comm™d
 = 
À·_•ìd_pid
.
	`ˇlcuœã
(
•ìd_comm™d
 - 
odomëry_
.
À·_•ìd
, 
dñè_t_
);

88 
right_duty_comm™d
 = 
right_•ìd_pid
.
	`ˇlcuœã
(
•ìd_comm™d
 - 
odomëry_
.
right_•ìd
, 
dñè_t_
);

90 i‡(
modes_
.
°©e
 !
STATE_NORMAL
)

92 
À·_duty_comm™d
 = 0.0f;

93 
right_duty_comm™d
 = 0.0f;

94 
dñè_duty
 = 0.0f;

95 
À·_•ìd_pid
.
	`ª£tI¡egøl
();

96 
right_•ìd_pid
.
	`ª£tI¡egøl
();

97 
löe_åack_pid
.
	`ª£tI¡egøl
();

100 
mŸ‹_pwm_
.
À·_duty
 = 
À·_duty_comm™d
 + 
dñè_duty
;

101 
mŸ‹_pwm_
.
right_duty
 = 
right_duty_comm™d
 - 
dñè_duty
;

104 
œ°_löe_posôi⁄
 = 
löe_posôi⁄
;

106 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\race_mode.cpp

2 
	~"globs.h
"

3 
	~"Àds_èsk.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

7 
	gMaöC⁄åﬁTask
::
	$ø˚Mode
()

10 
•ìd_comm™d
 = 1.9;

13 
löe_posôi⁄
 = 0;

16 c⁄° 
löe_thªsh
 = 1.0f;

19 
uöt8_t
 
Àd_°©e
 = 0;

22 c⁄° 
ú_•acög
 = 0.009525;

25 
uöt8_t
 
num_£eög_löe
 = 0;

28 
œ°_löe_posôi⁄
 = 0;

31 
löe_posôi⁄_sum
 = 0;

34 
boﬁ
 
°›≥d_£eög
 = 
Ál£
;

35 
boﬁ
 
•lô_dëe˘ed
 = 
Ál£
;

39 c⁄° 
uöt8_t
 
num_£ns‹s
 = 8;

40 
uöt8_t
 
i
 = 0; i < 
num_£ns‹s
; ++i)

42 
boﬁ
 
£eög_löe
 = (
™Æog_
.
vﬁèges
[
i
] >
löe_thªsh
);

45 
Àd_°©e
 |
£eög_löe
 << 
i
;

47 i‡(
£eög_löe
)

49 
löe_posôi⁄_sum
 +
i
 * 
ú_•acög
;

50 
num_£eög_löe
++;

54 i‡(!
•lô_dëe˘ed
)

56 
•lô_dëe˘ed
 = 
°›≥d_£eög
 && 
£eög_löe
;

57 
°›≥d_£eög
 = !
£eög_löe
 && (
num_£eög_löe
 > 0);

61 i‡(
num_£eög_löe
 == 0)

64 
löe_posôi⁄
 = 
œ°_löe_posôi⁄
;

66 i‡(
•lô_dëe˘ed
)

70 
löe_posôi⁄
 = 
œ°_löe_posôi⁄
 / 2.0f;

75 
löe_posôi⁄
 = 
löe_posôi⁄_sum
 / 
num_£eög_löe
;

78 
löe_posôi⁄
 -((
num_£ns‹s
-1Ë/ 2.0fË* 
ú_•acög
;

81 
Àds_èsk
.
	`ªque°NewLedGªíP©ã∫
(
Àd_°©e
);

85 
dñè_duty
 = 
löe_åack_pid
.
	`ˇlcuœã
(0.0‡- 
löe_posôi⁄
, 
dñè_t_
);

87 
À·_duty_comm™d
 = 
À·_•ìd_pid
.
	`ˇlcuœã
(
•ìd_comm™d
 - 
odomëry_
.
À·_•ìd
, 
dñè_t_
);

88 
right_duty_comm™d
 = 
right_•ìd_pid
.
	`ˇlcuœã
(
•ìd_comm™d
 - 
odomëry_
.
right_•ìd
, 
dñè_t_
);

90 i‡(
modes_
.
°©e
 !
STATE_NORMAL
)

92 
À·_duty_comm™d
 = 0.0f;

93 
right_duty_comm™d
 = 0.0f;

94 
dñè_duty
 = 0.0f;

95 
À·_•ìd_pid
.
	`ª£tI¡egøl
();

96 
right_•ìd_pid
.
	`ª£tI¡egøl
();

97 
löe_åack_pid
.
	`ª£tI¡egøl
();

100 
mŸ‹_pwm_
.
À·_duty
 = 
À·_duty_comm™d
 + 
dñè_duty
;

101 
mŸ‹_pwm_
.
right_duty
 = 
right_duty_comm™d
 - 
dñè_duty
;

104 
œ°_löe_posôi⁄
 = 
löe_posôi⁄
;

106 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\periodic_task.h

1 #i‚de‡
SCHEDULER_PERIODIC_TASK_H_INCLUDED


2 
	#SCHEDULER_PERIODIC_TASK_H_INCLUDED


	)

5 
	~"èsk.h
"

7 
«me•a˚
 
	gScheduÀr
 {

10 ˛as†
	cPîiodicTask
 : 
public
 
Task


12 
public
:

16 
PîiodicTask
(c⁄° * 
èsk_«me
, 
èsk_id_t
 
èsk_id
, 
‰equícy
);

19 
vútuÆ
 
boﬁ
 
√edToRun
();

22 
vútuÆ
 
decideWhíToRunNext
();

34 
boﬁ
 
thrŸée
(
£c⁄ds
);

38 
boﬁ
 
thrŸéeHz
(
‰equícy
);

40 
	g¥iv©e
:

43 
vútuÆ
 
run
() = 0;

45 
	g¥Ÿe˘ed
:

48 
‰equícy_
;

51 
	gdñè_t_
;

55 
uöt32_t
 
	gdñay_ticks_
;

58 
uöt64_t
 
	g√xt_run_ticks_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\queue.h

1 #i‚de‡
SCHEDULER_QUEUE_H_INCLUDED


2 
	#SCHEDULER_QUEUE_H_INCLUDED


	)

5 
	~"scheduÀr.h
"

7 
«me•a˚
 
	gScheduÀr
 {

10 
	gãm∂©e
 <
˛ass
 
	gT
>

11 ˛as†
	cQueue


13 
	gpublic
:

16 
Queue
(
uöt32_t
 
size
) :

17 
size_
(
size
)

19 
d©a_
 = 
√w
 
T
[
size_
];

23 ~
Queue
()

25 
	gdñëe
[] 
	gd©a_
;

30 
boﬁ
 
íqueue
(
T
 & 
d©a
);

33 
boﬁ
 
íqueue_‰⁄t
(
T
 & 
d©a
);

37 
boﬁ
 
dequeue
(
T
 * 
d©a
);

41 
boﬁ
 
≥ak
(
T
 * 
d©a
);

44 
boﬁ
 
ªmove
();

47 
uöt32_t
 
cou¡
(Ëc⁄° {  
	gnum_ñemíts_
; }

49 
	g¥iv©e
:

51 
T
 * 
d©a_
;

52 
uöt32_t
 
	gsize_
;

54 
uöt32_t
 
	g‰⁄t_
;

55 
uöt32_t
 
	gback_
;

56 
uöt32_t
 
	gnum_ñemíts_
;

61 
	gãm∂©e
 <
˛ass
 
	gT
>

62 
boﬁ
 
	gQueue
<
	gT
>::
	$íqueue
(
T
 & 
d©a
)

64 
boﬁ
 
öãºu±sE«bÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

66 i‡(
num_ñemíts_
 >
size_
)

68 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

69  
Ál£
;

72 
d©a_
[
back_
] = 
d©a
;

74 
back_
++;

75 i‡(
back_
 =
size_
)

78 
back_
 = 0;

81 
num_ñemíts_
++;

83 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

85  
åue
;

86 
	}
}

89 
	gãm∂©e
 <
˛ass
 
	gT
>

90 
boﬁ
 
	gQueue
<
	gT
>::
	$íqueue_‰⁄t
(
T
 & 
d©a
)

92 
boﬁ
 
öãºu±sE«bÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

94 i‡(
num_ñemíts_
 >
size_
)

96 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

97  
Ál£
;

101 i‡(
‰⁄t_
 == 0)

103 
‰⁄t_
 = 
size_
-1;

107 
‰⁄t_
--;

110 
d©a_
[
‰⁄t_
] = 
d©a
;

112 
num_ñemíts_
++;

114 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

116  
åue
;

117 
	}
}

120 
	gãm∂©e
 <
˛ass
 
	gT
>

121 
boﬁ
 
	gQueue
<
	gT
>::
	$dequeue
(
T
 * 
d©a
)

123 i‡(!
	`≥ak
(
d©a
))

125  
Ál£
;

128  
	`ªmove
();

129 
	}
}

132 
	gãm∂©e
 <
˛ass
 
	gT
>

133 
boﬁ
 
	gQueue
<
	gT
>::
	$≥ak
(
T
 * 
d©a
)

135 
boﬁ
 
öãºu±sE«bÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

137 i‡(
num_ñemíts_
 == 0)

139 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

140  
Ál£
;

143 *
d©a
 = 
d©a_
[
‰⁄t_
];

145 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

147  
åue
;

148 
	}
}

151 
	gãm∂©e
 <
˛ass
 
	gT
>

152 
boﬁ
 
	gQueue
<
	gT
>::
	$ªmove
()

154 
boﬁ
 
öãºu±sE«bÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

156 i‡(
num_ñemíts_
 == 0)

158 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

159  
Ál£
;

162 
‰⁄t_
++;

163 i‡(
‰⁄t_
 =
size_
)

166 
‰⁄t_
 = 0;

169 
num_ñemíts_
--;

171 
scheduÀr
.
	`ª°‹eI¡îru±s
(
öãºu±sE«bÀd
);

173  
åue
;

174 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\queued_task.h

1 #i‚de‡
SCHEDULER_QUEUED_TASK_H_INCLUDED


2 
	#SCHEDULER_QUEUED_TASK_H_INCLUDED


	)

5 
	~"queue.h
"

6 
	~"èsk.h
"

8 
«me•a˚
 
	gScheduÀr
 {

13 
	gãm∂©e
<
˛ass
 
	gT
>

14 ˛as†
	cQueuedTask
 : 
public
 
Task


16 
public
:

19 
QueuedTask
(c⁄° * 
èsk_«me
, 
èsk_id_t
 
èsk_id
, 
uöt32_t
 
queue_size
) :

20 
Task
(
èsk_«me
, 
èsk_id
),

21 
queue_
(
queue_size
)

25 
boﬁ
 
íqueue
(
T
 & 
d©a
);

28 
vútuÆ
 
boﬁ
 
√edToRun
();

30 
	g¥iv©e
:

33 
vútuÆ
 
run
() = 0;

35 
	g¥Ÿe˘ed
:

38 
Queue
<
T
> 
queue_
;

43 
	gãm∂©e
<
˛ass
 
	gT
>

44 
boﬁ
 
	gQueuedTask
<
	gT
>::
	$íqueue
(
T
 & 
d©a
)

46 
boﬁ
 
suc˚ss
 = 
queue_
.
	`íqueue
(
d©a
);

47  
suc˚ss
;

48 
	}
}

51 
	gãm∂©e
<
˛ass
 
	gT
>

52 
boﬁ
 
	gQueuedTask
<
	gT
>::
	$√edToRun
()

54  (
queue_
.
	`cou¡
(Ë> 0Ë|| !
	`cuºítSãpIsDeÁu…
();

55 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\scheduler.h

1 #i‚de‡
SCHEDULER_H_INCLUDED


2 
	#SCHEDULER_H_INCLUDED


	)

5 
	~<c°ddef
>

6 
	~"èsk.h
"

7 
	~"sy°em_timî.h
"

9 
«me•a˚
 
	gScheduÀr
 {

12 c⁄° 
uöt8_t
 
	gMAX_NUMBER_OF_TASKS
 = 16;

17 ˛as†
	cScheduÀr


19 
	gpublic
:

22 
ScheduÀr
();

27 
boﬁ
 
ªgi°îTask
(
Task
 & 
èsk
);

31 
scheduÀTasks
();

35 
boﬁ
 
dißbÀI¡îru±s
() const;

40 
ª°‹eI¡îru±s
(
boﬁ
 
íabÀd
) const;

43 
boﬁ
 
cuºíéyTimögTasks
(Ëc⁄° {  
	gtimög_èsks_
; }

46 
timeTasks
();

49 
ÊushOutgoögMesßges
();

52 
ÊushIncomögMesßges
();

55 
èsk_id_t
 
ru¬ögTaskID
(Ëc⁄° {  
	gru¬ög_èsk_id_
; }

57 
	g¥iv©e
:

60 
uöt8_t
 
num_èsks_
;

63 
Task
 * 
	gèsks_
[
MAX_NUMBER_OF_TASKS
];

66 
boﬁ
 
	gtimög_èsks_
;

69 
èsk_id_t
 
	gru¬ög_èsk_id_
;

75 
ScheduÀr
::ScheduÀ∏
scheduÀr
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\task.h

1 #i‚de‡
SCHEDULER_TASK_H_INCLUDED


2 
	#SCHEDULER_TASK_H_INCLUDED


	)

5 
	~<c°döt
>

6 
	~"glob_ty≥s.h
"

7 
	~"èsk_ids.h
"

9 
«me•a˚
 
	gScheduÀr
 {

29 ˛as†
	cTask


32 
‰õnd
 
˛ass
 
	gScheduÀr
;

34 
	gpublic
:

37 
Task
(c⁄° * 
èsk_«me
, 
èsk_id_t
 
èsk_id
);

40 c⁄° * 
«me
(Ëc⁄° {  
	g«me_
; }

43 
èsk_id_t
 
èsk_id
(Ëc⁄° {  
	gid_
; }

45 
	g¥Ÿe˘ed
:

49 
åyInôülize
();

54 
execuã
();

59 
vútuÆ
 
boﬁ
 
ªadyToRun
();

62 
°¨tTimögA«lysis
();

63 
°›TimögA«lysis
(
glo_èsk_timög_t
 & 
timög
);

65 
	g¥Ÿe˘ed
:

70 
vútuÆ
 
öôülize
() = 0;

74 
vútuÆ
 
run
() = 0;

78 
vútuÆ
 
boﬁ
 
√edToRun
() = 0;

85 
vútuÆ
 
decideWhíToRunNext
();

91 
boﬁ
 
cuºítSãpIsDeÁu…
(Ëc⁄° {  
	gcuºít_°ï_
 == 0; }

97 
boﬁ
 
¥eviousSãpWasDeÁu…
(Ëc⁄° {  
	gcuºít_execuãd_°ï_
 == 0; }

99 
	g¥iv©e
:

102 
ªc‹dTimögInfo
();

105 
ª£tTaskTimögFõlds
();

107 
	g¥Ÿe˘ed
:

110 c⁄° * 
«me_
;

111 
èsk_id_t
 
	gid_
;

114 
boﬁ
 
	göôülized_
;

117 
uöt32_t
 
	gnum_times_øn_
;

120 
öt32_t
 
	gcuºít_°ï_
;

125 
öt32_t
 
	gcuºít_execuãd_°ï_
;

128 
boﬁ
 
	gscheduÀd_
;

131 
uöt64_t
 
	gscheduÀd_tick_°amp_
;

134 
uöt64_t
 
	g°¨ãd_tick_°amp_
;

138 
uöt64_t
 
	g°¨ãd_fú°_°ï_tick_°amp_
;

141 
uöt64_t
 
	gföished_tick_°amp_
;

144 
uöt64_t
 
	g¥evious_fú°_°ï_°¨ãd_tick_°amp_
;

147 
uöt32_t
 
	gœã_ticks_
;

150 
uöt32_t
 
	gtimes_èsked_skù≥d_
;

153 
	gèsk_timög_°¨t_time_
;

156 
uöt32_t
 
	gèsk_timög_°¨t_skù_cou¡_
;

159 
uöt32_t
 
	gèsk_timög_execuã_cou¡s_
;

162 
uöt32_t
 
	gdñay_ticks_max_
, 
	gdñay_ticks_mö_
, 
	gdñay_ticks_sum_
;

163 
uöt32_t
 
	grun_ticks_max_
, 
	grun_ticks_mö_
, 
	grun_ticks_sum_
;

164 
uöt32_t
 
	göãrvÆ_ticks_max_
, 
	göãrvÆ_ticks_mö_
, 
	göãrvÆ_ticks_sum_
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\task_ids.h

1 #i‚de‡
SCHEDULER_TASK_IDS_H_INCLUDED


2 
	#SCHEDULER_TASK_IDS_H_INCLUDED


	)

5 
öt32_t
 
	tèsk_id_t
;

8 
	mTASK_ID_FILTER
,

9 
	mTASK_ID_HF_CONTROL
,

10 
	mTASK_ID_LED
,

11 
	mTASK_ID_MAIN_CONTROL
,

12 
	mTASK_ID_MODES
,

13 
	mTASK_ID_STATUS_UPDATE
,

14 
	mTASK_ID_TELEM_RECEIVE
,

15 
	mTASK_ID_TELEM_SEND
,

17 
	mNUM_TASKS
,

19 
	mTASK_ID_INVALID
 = -1,

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\periodic_task.cpp

2 
	~<cm©h
>

3 
	~"≥riodic_èsk.h
"

4 
	~"sy°em_timî.h
"

5 
	~"utû_as£π.h
"

7 
«me•a˚
 
	gScheduÀr
 {

10 
	gPîiodicTask
::
PîiodicTask
(c⁄° * 
èsk_«me
, 
èsk_id_t
 
èsk_id
, 
‰equícy
) :

11 
Task
(
èsk_«me
, 
èsk_id
),

12 
‰equícy_
(
‰equícy
),

13 
dñay_ticks_
(1),

14 
√xt_run_ticks_
(0)

16 
as£π_msg
(
‰equícy_
 > 0, 
ASSERT_STOP
, "Invalid frequency forÖeriodicÅask.");

17 
as£π_msg
(
‰equícy_
 <
sys_timî
.
‰equícy
(), 
ASSERT_STOP
, "PeriodicÅask can'tÑun fasterÅhan mainÅimer.");

19 
	gdñè_t_
 = 1.0‡/ 
‰equícy_
;

21 
	gdñay_ticks_
 = (
uöt32_t
)(
sys_timî
.
‰equícy
(Ë/ 
‰equícy_
);

24 
	gîr‹_‰eq
 = 
Ábs
(()
sys_timî
.
‰equícy
(Ë/ ()
dñay_ticks_
 - 
‰equícy_
);

26 
	gîr‹_‰eq_≥r˚¡age
 = 
îr‹_‰eq
 / 
‰equícy_
 * 100;

28 
as£π_msg
(
îr‹_‰eq_≥r˚¡age
 < 1, 
ASSERT_STOP
, "InvalidÅask frequency for current mainÅimer frequency.");

32 
boﬁ
 
	gPîiodicTask
::
√edToRun
()

34 
boﬁ
 
íough_ticks_ñ≠£d
 = 
sys_timî
.
ticks
(Ë>
√xt_run_ticks_
;

35  
	gíough_ticks_ñ≠£d
 || !
cuºítSãpIsDeÁu…
();

39 
	gPîiodicTask
::
decideWhíToRunNext
()

43 i‡(!
¥eviousSãpWasDeÁu…
())

49 i‡(
	gnum_times_øn_
 > 1)

52 
	gœã_ticks_
 = 
°¨ãd_fú°_°ï_tick_°amp_
 - 
√xt_run_ticks_
;

55 
	gtimes_èsked_skù≥d_
 +
œã_ticks_
 / 
dñay_ticks_
;

64 
	g√xt_run_ticks_
 = 
°¨ãd_fú°_°ï_tick_°amp_
 - (°¨ãd_fú°_°ï_tick_°amp_ % 
dñay_ticks_
) + delay_ticks_;

68 
boﬁ
 
	gPîiodicTask
::
thrŸée
(
£c⁄ds
)

70 i‡(
£c⁄ds
 <0Ë{  
åue
; }

76 
uöt32_t
 
	gmod_cou¡s
 = (uöt32_t)(
sys_timî
.
‰equícy
(Ë* 
£c⁄ds
 / 
dñay_ticks_
);

78 i‡(
	gmod_cou¡s
 =0Ë{  
åue
; }

80  0 =(
num_times_øn_
 % 
mod_cou¡s
);

84 
boﬁ
 
	gPîiodicTask
::
thrŸéeHz
(
‰equícy
)

86 i‡(
‰equícy
 <0Ë{  
Ál£
; }

87  
thrŸée
(1.0‡/ 
‰equícy
);

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\scheduler.cpp

2 
	~<c°dio
>

3 
	~<c°rög
>

4 
	~"°m32f4xx.h
"

5 
	~"scheduÀr.h
"

6 
	~"m©h_utû.h
"

7 
	~"debug_¥ötf.h
"

8 
	~"globs.h
"

9 
	~"ãÀmëry_ª˚ive_èsk.h
"

10 
	~"ãÀmëry_£nd_èsk.h
"

12 
«me•a˚
 
	gScheduÀr
 {

15 
	gScheduÀr
::
ScheduÀr
() :

16 
num_èsks_
(0),

17 
timög_èsks_
(
Ál£
),

18 
ru¬ög_èsk_id_
(
TASK_ID_INVALID
)

20 
uöt8_t
 
	gi
 = 0; i < 
	gMAX_NUMBER_OF_TASKS
; i++)

22 
	gèsks_
[
i
] = 
NULL
;

26 
	gSCB
->
	gAIRCR
 = 0x05FA0300;

30 
boﬁ
 
	gScheduÀr
::
ªgi°îTask
(
Task
 & 
èsk
)

32 i‡(
num_èsks_
 >
MAX_NUMBER_OF_TASKS
)

34  
Ál£
;

37 
	gèsks_
[
num_èsks_
] = &
èsk
;

39 
	gnum_èsks_
++;

41  
	gåue
;

45 
	gScheduÀr
::
scheduÀTasks
()

48 
uöt8_t
 
i
 = 0; 
	gi
 < 
	gnum_èsks_
; i++)

50 
Task
 * 
	gèsk
 = 
èsks_
[
i
];

51 
	gru¬ög_èsk_id_
 = 
èsk
->
èsk_id
();

52 
	gèsk
->
åyInôülize
();

53 
	gru¬ög_èsk_id_
 = 
TASK_ID_INVALID
;

56 
	gåue
)

58 
boﬁ
 
	gèsk_exe˘uãd_this_lo›
 = 
Ál£
;

59 
uöt8_t
 
	gi
 = 0; i < 
	gnum_èsks_
; i++)

61 
Task
 * 
	gèsk
 = 
èsks_
[
i
];

68 i‡(
	gèsk
->
ªadyToRun
(Ë&& !
	gèsk_exe˘uãd_this_lo›
)

70 
	gru¬ög_èsk_id_
 = 
èsk
->
èsk_id
();

71 
	gèsk
->
execuã
();

72 
	gèsk_exe˘uãd_this_lo›
 = 
åue
;

73 
	gru¬ög_èsk_id_
 = 
TASK_ID_INVALID
;

80 
boﬁ
 
	gScheduÀr
::
dißbÀI¡îru±s
() const

83 
boﬁ
 
Æªady_íabÀd
 = (
__gë_PRIMASK
() == 0);

84 
__dißbÀ_úq
();

85  
	gÆªady_íabÀd
;

89 
	gScheduÀr
::
ª°‹eI¡îru±s
(
boﬁ
 
íabÀd
) const

91 i‡(
íabÀd
)

93 
__íabÀ_úq
();

98 
	gScheduÀr
::
timeTasks
()

100 i‡(
timög_èsks_
)

102 
debug_¥ötf
("StoppingÅaskÅiming.");

103 
glo_èsk_timög_t
 
	gèsk_timög
;

104 
uöt8_t
 
	gi
 = 0; i < 
	gnum_èsks_
; i++)

106 
	gèsks_
[
i
]->
°›TimögA«lysis
(
èsk_timög
);

109 
	g£nd_èsk
.
h™dÀ
(
èsk_timög
);

113 
°r˝y
(
èsk_timög
.
èsk_«me
, "done");

115 
	g£nd_èsk
.
h™dÀ
(
èsk_timög
);

119 
debug_¥ötf
("StartingÅaskÅiming");

120 
uöt8_t
 
	gi
 = 0; i < 
	gnum_èsks_
; i++)

122 
	gèsks_
[
i
]->
°¨tTimögA«lysis
();

126 
	gtimög_èsks_
 = !
timög_èsks_
;

130 
	gScheduÀr
::
ÊushOutgoögMesßges
()

132 
ru¬ög_èsk_id_
 = 
£nd_èsk
.
èsk_id
();

135 
	g£nd_èsk
.
åyInôülize
();

137 
	g£nd_èsk
.
ªadyToRun
())

139 
	g£nd_èsk
.
execuã
();

142 
	gru¬ög_èsk_id_
 = 
TASK_ID_INVALID
;

146 
	gScheduÀr
::
ÊushIncomögMesßges
()

148 
ru¬ög_èsk_id_
 = 
ª˚ive_èsk
.
èsk_id
();

151 
	gª˚ive_èsk
.
åyInôülize
();

153 
	gª˚ive_èsk
.
ªadyToRun
())

155 
	gª˚ive_èsk
.
execuã
();

158 
	gru¬ög_èsk_id_
 = 
TASK_ID_INVALID
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\task.cpp

2 
	~<c°rög
>

3 
	~"èsk.h
"

4 
	~"sy°em_timî.h
"

5 
	~"m©h_utû.h
"

6 
	~"scheduÀr.h
"

8 
«me•a˚
 
	gScheduÀr
 {

11 
	gTask
::
Task
(c⁄° * 
èsk_«me
, 
èsk_id_t
 
èsk_id
) :

12 
«me_
(
èsk_«me
),

13 
id_
(
èsk_id
),

14 
öôülized_
(
Ál£
),

15 
num_times_øn_
(0),

16 
cuºít_°ï_
(0),

17 
cuºít_execuãd_°ï_
(0),

18 
scheduÀd_
(
Ál£
),

19 
scheduÀd_tick_°amp_
(0),

20 
°¨ãd_tick_°amp_
(0),

21 
föished_tick_°amp_
(0),

22 
¥evious_fú°_°ï_°¨ãd_tick_°amp_
(0),

23 
œã_ticks_
(0),

24 
times_èsked_skù≥d_
(0),

25 
èsk_timög_°¨t_skù_cou¡_
(0)

27 
ª£tTaskTimögFõlds
();

31 
	gTask
::
åyInôülize
()

33 i‡(!
öôülized_
)

35 
öôülize
();

36 
	göôülized_
 = 
åue
;

41 
	gTask
::
execuã
()

43 
num_times_øn_
++;

45 
	g°¨ãd_tick_°amp_
 = 
sys_timî
.
ticks
();

47 i‡(
cuºítSãpIsDeÁu…
())

50 
	g¥evious_fú°_°ï_°¨ãd_tick_°amp_
 = 
°¨ãd_fú°_°ï_tick_°amp_
;

54 
	g°¨ãd_fú°_°ï_tick_°amp_
 = 
°¨ãd_tick_°amp_
;

57 
run
();

59 
	gföished_tick_°amp_
 = 
sys_timî
.
ticks
();

61 
decideWhíToRunNext
();

63 
	gscheduÀd_
 = 
Ál£
;

65 i‡(
	gscheduÀr
.
cuºíéyTimögTasks
())

67 
ªc‹dTimögInfo
();

71 
	gcuºít_execuãd_°ï_
 = 
cuºít_°ï_
;

75 
boﬁ
 
	gTask
::
ªadyToRun
()

77 
boﬁ
 
√ed_to_run
 = 
√edToRun
();

79 i‡(
	g√ed_to_run
 && !
	gscheduÀd_
)

82 
	gscheduÀd_tick_°amp_
 = 
sys_timî
.
ticks
();

83 
	gscheduÀd_
 = 
åue
;

86  
	g√ed_to_run
;

90 
	gTask
::
decideWhíToRunNext
()

94 
œã_ticks_
 = 
°¨ãd_fú°_°ï_tick_°amp_
 - 
scheduÀd_tick_°amp_
;

98 
	gTask
::
°¨tTimögA«lysis
()

100 
èsk_timög_°¨t_time_
 = 
sys_timî
.
£c⁄ds
();

101 
	gèsk_timög_°¨t_skù_cou¡_
 = 
times_èsked_skù≥d_
;

102 
	gèsk_timög_execuã_cou¡s_
 = 
num_times_øn_
;

104 
ª£tTaskTimögFõlds
();

108 
	gTask
::
°›TimögA«lysis
(
glo_èsk_timög_t
 & 
timög
)

110 
°r˝y
(
timög
.
èsk_«me
, 
«me_
);

113 
	gtimög
.
	gtimî_‰equícy
 = 
sys_timî
.
‰equícy
();

114 
	gtimög
.
	gªc‹dög_duøti⁄
 = 
sys_timî
.
£c⁄ds
(Ë- 
èsk_timög_°¨t_time_
;

115 
	gtimög
.
	gexecuã_cou¡s
 = 
èsk_timög_execuã_cou¡s_
;

116 
	gtimög
.
	gtimes_skù≥d
 = 
times_èsked_skù≥d_
 - 
èsk_timög_°¨t_skù_cou¡_
;

118 
	gtimög
.
	gdñay_ticks_max
 = 
dñay_ticks_max_
;

119 
	gtimög
.
	gdñay_ticks_mö
 = 
dñay_ticks_mö_
;

120 
	gtimög
.
	gdñay_ticks_avg
 = 
dñay_ticks_sum_
 / 
timög
.
execuã_cou¡s
;

121 
	gtimög
.
	grun_ticks_max
 = 
run_ticks_max_
;

122 
	gtimög
.
	grun_ticks_mö
 = 
run_ticks_mö_
;

123 
	gtimög
.
	grun_ticks_avg
 = 
run_ticks_sum_
 / 
timög
.
execuã_cou¡s
;

124 
	gtimög
.
	göãrvÆ_ticks_max
 = 
öãrvÆ_ticks_max_
;

125 
	gtimög
.
	göãrvÆ_ticks_mö
 = 
öãrvÆ_ticks_mö_
;

126 
	gtimög
.
	göãrvÆ_ticks_avg
 = 
öãrvÆ_ticks_sum_
 / 
timög
.
execuã_cou¡s
;

130 
	gTask
::
ª£tTaskTimögFõlds
()

132 
èsk_timög_execuã_cou¡s_
 = 0;

133 
	gdñay_ticks_max_
 = 0;

134 
	gdñay_ticks_mö_
 = 0xFFFFFFFF;

135 
	gdñay_ticks_sum_
 = 0;

136 
	grun_ticks_max_
 = 0;

137 
	grun_ticks_mö_
 = 0xFFFFFFFF;

138 
	grun_ticks_sum_
 = 0;

139 
	göãrvÆ_ticks_max_
 = 0;

140 
	göãrvÆ_ticks_mö_
 = 0xFFFFFFFF;

141 
	göãrvÆ_ticks_sum_
 = 0;

145 
	gTask
::
ªc‹dTimögInfo
()

147 
èsk_timög_execuã_cou¡s_
++;

150 
uöt32_t
 
	grun_ticks
 = 
föished_tick_°amp_
 - 
°¨ãd_tick_°amp_
;

154 
uöt32_t
 
	göãrvÆ_ticks
 = 
°¨ãd_fú°_°ï_tick_°amp_
 - 
¥evious_fú°_°ï_°¨ãd_tick_°amp_
;

157 
	gdñay_ticks_max_
 = 
max
(
dñay_ticks_max_
, 
œã_ticks_
);

158 
	gdñay_ticks_mö_
 = 
mö
(
dñay_ticks_mö_
, 
œã_ticks_
);

159 
	gdñay_ticks_sum_
 +
œã_ticks_
;

160 
	grun_ticks_max_
 = 
max
(
run_ticks_max_
, 
run_ticks
);

161 
	grun_ticks_mö_
 = 
mö
(
run_ticks_mö_
, 
run_ticks
);

162 
	grun_ticks_sum_
 +
run_ticks
;

163 
	göãrvÆ_ticks_max_
 = 
max
(
öãrvÆ_ticks_max_
, 
öãrvÆ_ticks
);

164 
	göãrvÆ_ticks_mö_
 = 
mö
(
öãrvÆ_ticks_mö_
, 
öãrvÆ_ticks
);

165 
	göãrvÆ_ticks_sum_
 +
öãrvÆ_ticks
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\complementary_filter_task.cpp

2 
	~"com∂emíèry_fûãr_èsk.h
"

3 
	~"co‹dö©e_c⁄vîsi⁄s.h
"

4 
	~"globs.h
"

5 
	~"modes_èsk.h
"

6 
	~"robŸ_£âögs.h
"

7 
	~"utû_as£π.h
"

10 
	gCom∂emíèryFûãrTask
::
	$Com∂emíèryFûãrTask
–
‰equícy
) :

11 
	`PîiodicTask
("Comp. Fûãr", 
TASK_ID_FILTER
, 
‰equícy
)

13 
cuºít_°ï_
 = 
READ_ACCEL
;

14 
	}
}

17 
	gCom∂emíèryFûãrTask
::
	$öôülize
()

19 
uöt32_t
 
mpu_Áû_cou¡
 = 0;

20 
mpu_
.
	`öôülize
() != 0)

23 
sys_timî
.
	`busyWaô
(0.5);

24 i‡(++
mpu_Áû_cou¡
 == 3)

26 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "MPU6000 failedÅo initialize.");

29 
	}
}

32 
	gCom∂emíèryFûãrTask
::
	$publishNewD©a
()

34 
glo_imu
.
	`publish
(&
imu_
);

35 
glo_øw_imu
.
	`publish
(&
øw_imu_
);

36 
glo_qu©îni⁄
.
	`publish
(&
qu©îni⁄_
);

37 
glo_rﬁl_pôch_yaw
.
	`publish
(&
rﬁl_pôch_yaw_
);

38 
	}
}

41 
	gCom∂emíèryFûãrTask
::
	$run
()

43 
cuºít_°ï_
)

45 
READ_ACCEL
:

46 
mpu_
.
	`ªadAc˚l
(
øw_imu_
.
ac˚ls
);

47 
cuºít_°ï_
 = 
READ_GYRO
;

49 
READ_GYRO
:

50 
mpu_
.
	`ªadGyro
(
øw_imu_
.
gyros
);

51 
cuºít_°ï_
 = 
ESTIMATE_STATE
;

53 
ESTIMATE_STATE
:

55 
	`e°im©eSèã
();

56 
	`publishNewD©a
();

57 
cuºít_°ï_
 = 
READ_ACCEL
;

59 
	}
}

62 
	gCom∂emíèryFûãrTask
::
	$e°im©eSèã
()

65 i‡(
modes_èsk
.
	`öVîtiˇlC⁄figuøti⁄
())

67 
imu_
.
ac˚ls
[0] = -(
øw_imu_
.ac˚ls[2]*
ACCEL_SCALES
[2] + 
ACCEL_OFFSETS
[2]);

68 
imu_
.
ac˚ls
[1] = (
øw_imu_
.ac˚ls[1]*
ACCEL_SCALES
[1] + 
ACCEL_OFFSETS
[1]);

69 
imu_
.
ac˚ls
[2] = (
øw_imu_
.ac˚ls[0]*
ACCEL_SCALES
[0] + 
ACCEL_OFFSETS
[0]);

70 
imu_
.
gyros
[0] = -
øw_imu_
.gyros[2];

71 
imu_
.
gyros
[1] = 
øw_imu_
.gyros[1];

72 
imu_
.
gyros
[2] = 
øw_imu_
.gyros[0];

76 
imu_
.
ac˚ls
[0] = (
øw_imu_
.ac˚ls[0]*
ACCEL_SCALES
[0] + 
ACCEL_OFFSETS
[0]);

77 
imu_
.
ac˚ls
[1] = (
øw_imu_
.ac˚ls[1]*
ACCEL_SCALES
[1] + 
ACCEL_OFFSETS
[1]);

78 
imu_
.
ac˚ls
[2] = (
øw_imu_
.ac˚ls[2]*
ACCEL_SCALES
[2] + 
ACCEL_OFFSETS
[2]);

79 
imu_
.
gyros
[0] = 
øw_imu_
.gyros[0];

80 
imu_
.
gyros
[1] = 
øw_imu_
.gyros[1];

81 
imu_
.
gyros
[2] = 
øw_imu_
.gyros[2];

85 
com∂emíèry_fûãr_
.
	`upd©e
(
dñè_t_
, 
imu_
.
gyros
, imu_.
ac˚ls
);

86 
com∂emíèry_fûãr_
.
	`gëAâôude
(
qu©îni⁄_
.
q
);

87 
	`qu©îni⁄_2_Ωy
(
qu©îni⁄_
.
q
, 
rﬁl_pôch_yaw_
.
Ωy
);

88 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\complementary_filter_task.h

1 #i‚de‡
COMPLEMENTARY_FILTER_TASK_H_INCLUDED


2 
	#COMPLEMENTARY_FILTER_TASK_H_INCLUDED


	)

5 
	~"com∂emíèry_fûãr.h
"

6 
	~"digôÆ_out.h
"

7 
	~"glob_ty≥s.h
"

8 
	~"mpu6000.h
"

9 
	~"≥riodic_èsk.h
"

12 ˛as†
	cCom∂emíèryFûãrTask
 : 
public
 
ScheduÀr
::
PîiodicTask


14 
¥iv©e
:

20 
READ_ACCEL
,

21 
	mREAD_GYRO
,

22 
	mESTIMATE_STATE


25 
	gpublic
:

28 
Com∂emíèryFûãrTask
(
‰equícy
);

30 
	g¥iv©e
:

33 
vútuÆ
 
öôülize
();

37 
vútuÆ
 
run
();

40 
e°im©eSèã
();

43 
publishNewD©a
();

45 
	g¥iv©e
:

48 
MPU6000
 
mpu_
;

51 
Com∂emíèryFûãr
 
	gcom∂emíèry_fûãr_
;

54 
glo_øw_imu_t
 
	gøw_imu_
;

55 
glo_imu_t
 
	gimu_
;

56 
glo_qu©îni⁄_t
 
	gqu©îni⁄_
;

57 
glo_rﬁl_pôch_yaw_t
 
	grﬁl_pôch_yaw_
;

62 
Com∂emíèryFûãrTask
 
comp_fûãr_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\leds_task.h

1 #i‚de‡
LEDS_TASK_H_INCLUDED


2 
	#LEDS_TASK_H_INCLUDED


	)

5 
	~"digôÆ_out.h
"

6 
	~"gªí_Àds.h
"

7 
	~"≥riodic_èsk.h
"

8 
	~"u£r_Àds.h
"

11 ˛as†
	cLedsTask
 : 
public
 
ScheduÀr
::
PîiodicTask


13 
public
:

16 
LedsTask
(
‰equícy
);

19 
ªque°NewLedGªíP©ã∫
(
uöt8_t
 
cou¡
);

21 
	m¥iv©e
:

25 
vútuÆ
 
run
();

28 
vútuÆ
 
	$öôülize
() {}

31 
	`¶owRun
();

34 
	`ªadNewD©a
();

36 
¥iv©e
:

39 
boﬁ
 
√w_gªí_∑âîn_ªque°ed_
;

42 
uöt8_t
 
ªque°ed_gªí_∑âîn_
;

46 
boﬁ
 
Êash_°©e_is_off
;

49 
U£rLeds
 
u£r_Àds_
;

50 
GªíLeds
 
gªí_Àds_
;

53 
glo_modes_t
 
modes_
;

54 
glo_™Æog_t
 
™Æog_
;

56 
	}
};

59 
LedsTask
 
Àds_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\main_control_task.h

1 #i‚de‡
MAIN_CONTROL_TASK_H_INCLUDED


2 
	#MAIN_CONTROL_TASK_H_INCLUDED


	)

5 
	~"™Æog_ö.h
"

6 
	~"dîiv©ive_fûãr.h
"

7 
	~"digôÆ_out.h
"

8 
	~"ícodî.h
"

9 
	~"glob_ty≥s.h
"

10 
	~"≥riodic_èsk.h
"

11 
	~"pid_c⁄åﬁÀr.h
"

12 
	~"tb6612‚g.h
"

15 ˛as†
	cMaöC⁄åﬁTask
 : 
public
 
ScheduÀr
::
PîiodicTask


17 
public
:

20 
MaöC⁄åﬁTask
(
‰equícy
);

23 
ª£t_zîo_tût_™gÀ
();

26 
h™dÀ
(
glo_ˇ±uª_comm™d_t
 & 
comm™d
);

29 
h™dÀ
(
glo_wave_t
 & 
wave
);

32 
h™dÀ_bÆ™˚_tût_gaös
(
glo_pid_∑øms_t
 & 
tût_∑øms
);

33 
h™dÀ_bÆ™˚_posôi⁄_gaös
(
glo_pid_∑øms_t
 & 
posôi⁄_∑øms
);

36 
gë_bÆ™˚_tût_gaös
(
glo_pid_∑øms_t
 & 
tût_∑øms
);

37 
gë_bÆ™˚_posôi⁄_gaös
(
glo_pid_∑øms_t
 & 
posôi⁄_∑øms
);

40 
ª£t
();

42 
	mpublic
:

45 
PidC⁄åﬁÀr
 
yaw_pid
;

46 
PidC⁄åﬁÀr
 
	mÀ·_•ìd_pid
;

47 
PidC⁄åﬁÀr
 
	mright_•ìd_pid
;

48 
PidC⁄åﬁÀr
 
	mÀ·_posôi⁄_pid
;

49 
PidC⁄åﬁÀr
 
	mright_posôi⁄_pid
;

50 
PidC⁄åﬁÀr
 
	mlöe_åack_pid
;

52 
	m¥iv©e
:

56 
vútuÆ
 
run
();

59 
vútuÆ
 
öôülize
();

62 
ªadNewD©a
();

65 
publishNewD©a
();

69 
upd©eMŸ‹PWM
();

73 
runD©aC≠tuª
();

76 
bÆ™˚Mode
();

79 
h‹iz⁄èlMode
();

82 
löeFﬁlowögMode
();

85 
ø˚Mode
();

88 
cu°omMode
();

91 
ex≥rimítMode
();

92 
ex≥rimít1Mode
(
ex≥rimít_öput
);

93 
ex≥rimít2Mode
(
ex≥rimít_öput
);

94 
ex≥rimít3Mode
(
ex≥rimít_öput
);

96 
	m¥iv©e
:

98 
löe_posôi⁄
;

99 
	m°¨t_di°™˚
 = 0.0f;

100 
maze_mode_t
 
	mmaze_mode
 = 
TRACK_LINE
;

101 
tu∫_mode_t
 
	mtu∫_mode
 = 
LEFT
;

102 
	myaw
;

103 
boﬁ
 
	mright
 = 
Ál£
;

106 
Encodî
 
	mÀ·_ícodî_
;

107 
Encodî
 
	mright_ícodî_
;

110 
A«logIn
 
	m™Æog_öputs_
;

113 
TB6612FNG
 
	mhbridge_
;

116 
Dîiv©iveFûãr
 
	mÀ·_dîiv_
;

117 
Dîiv©iveFûãr
 
	mright_dîiv_
;

118 
Dîiv©iveFûãr
 
	mpos_cmd_dîiv_
;

119 
Dîiv©iveFûãr
 
	mthëa_cmd_dîiv_
;

120 
Dîiv©iveFûãr
 
	mbëa_dîiv_
;

123 
	mdi°™˚_comm™d_
;

124 
	myaw_comm™d_
;

127 
	mK_
[4];

130 
boﬁ
 
	mˇ±urög_d©a_
;

133 
uöt32_t
 
	mˇ±uª_cou¡î_
;

136 
uöt32_t
 
	mˇ±uª_run_cou¡s_
;

139 
uöt16_t
 
	mmax_ßm∂es_
;

142 
glo_modes_t
 
	mmodes_
;

143 
glo_mŸi⁄_comm™ds_t
 
	mmŸi⁄_comm™ds_
;

144 
glo_imu_t
 
	mimu_
;

145 
glo_rﬁl_pôch_yaw_t
 
	mrﬁl_pôch_yaw_
;

146 
glo_thëa_zîo_t
 
	mthëa_zîo_
;

147 
glo_°©us_d©a_t
 
	m°©us_d©a_
;

150 
glo_mŸ‹_pwm_t
 
	mmŸ‹_pwm_
;

151 
glo_odomëry_t
 
	modomëry_
;

152 
glo_™Æog_t
 
	m™Æog_
;

153 
glo_wave_t
 
	mwave_
;

154 
glo_ˇ±uª_comm™d_t
 
	mˇ±uª_comm™d_
;

155 
glo_ˇ±uª_d©a_t
 
	mˇ±uª_d©a_
;

160 
MaöC⁄åﬁTask
 
maö_c⁄åﬁ_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\modes_task.h

1 #i‚de‡
MODES_TASK_H_INCLUDED


2 
	#MODES_TASK_H_INCLUDED


	)

5 
	~"glob_ty≥s.h
"

6 
	~"≥riodic_èsk.h
"

7 
	~"u£r_pb.h
"

11 ˛as†
	cModesTask
 : 
public
 
ScheduÀr
::
PîiodicTask


13 
public
:

16 
ModesTask
(
‰equícy
);

19 
boﬁ
 
öVîtiˇlC⁄figuøti⁄
();

22 
h™dÀ
(
glo_modes_t
 
√w_modes
);

25 
h™dÀ
(
glo_robŸ_comm™d_t
 
comm™d
);

27 
	m¥iv©e
:

30 
vútuÆ
 
öôülize
();

33 
vútuÆ
 
run
();

36 
ª£t
();

39 
°›≥dSèã
();

40 
öôülizögSèã
();

41 
n‹mÆSèã
();

44 
ch™geSèã
(
glo_›î©ög_°©e_t
 
√w_°©e
);

46 
	m¥iv©e
:

49 
U£rPushBuâ⁄
 
modes_push_buâ⁄_
;

52 
U£rPushBuâ⁄
 
	m°©e_push_buâ⁄_
;

55 
glo_modes_t
 
	mmodes_
;

56 
glo_thëa_zîo_t
 
	mthëa_zîo_
;

58 
	m¥iv©e
:

61 
uöt8_t
 
	tvc_öô_°©e_ty≥
;

64 
	mVC_INIT_STATE_RESET
,

65 
	mVC_INIT_STATE_WAITING


67 
vc_öô_°©e_ty≥
 
	gvc_öô_°©e_
;

70 
	gvc_öô_waô_°›_time_
;

75 
ModesTask
 
modes_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\status_update_task.h

1 #i‚de‡
STATUS_UPDATE_TASK_H_INCLUDED


2 
	#STATUS_UPDATE_TASK_H_INCLUDED


	)

5 
	~"digôÆ_out.h
"

6 
	~"glob_ty≥s.h
"

7 
	~"≥riodic_èsk.h
"

10 ˛as†
	cSètusUpd©eTask
 : 
public
 
ScheduÀr
::
PîiodicTask


12 
public
:

15 
SètusUpd©eTask
(
‰equícy
);

18 
£tEº‹Codes
(
glo_îr‹_codes_t
 
îr‹_codes
);

19 
˛órEº‹Codes
(
glo_îr‹_codes_t
 
îr‹_codes
);

21 
	m¥iv©e
:

24 
vútuÆ
 
	$öôülize
() {}

27 
vútuÆ
 
	`run
();

30 
	`ªadNewD©a
();

33 
	`publishNewD©a
();

35 
¥iv©e
:

38 
glo_rﬁl_pôch_yaw_t
 
rﬁl_pôch_yaw_
;

39 
glo_odomëry_t
 
odomëry_
;

40 
glo_™Æog_t
 
™Æog_
;

41 
glo_mŸ‹_pwm_t
 
mŸ‹_pwm_
;

44 
glo_°©us_d©a_t
 
°©us_d©a_
;

45 
glo_modes_t
 
modes_
;

48 
glo_îr‹_codes_t
 
îr‹_codes_
;

50 
	}
};

53 
SètusUpd©eTask
 
°©us_upd©e_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\telemetry_receive_task.h

1 #i‚de‡
TELEMETRY_RECEIVE_TASK_H_INCLUDED


2 
	#TELEMETRY_RECEIVE_TASK_H_INCLUDED


	)

5 
	~"digôÆ_out.h
"

6 
	~"glob_ty≥s.h
"

7 
	~"glo_rx_lök.h
"

8 
	~"èsk.h
"

11 ˛as†
	cTñemëryRe˚iveTask
 : 
public
 
ScheduÀr
::
Task


13 
public
:

16 
TñemëryRe˚iveTask
();

19 
vútuÆ
 
boﬁ
 
√edToRun
();

22 
h™dÀ
(
glo_drivög_comm™d_t
 & 
drivög_comm™d
);

25 
h™dÀ
(
glo_mŸi⁄_comm™ds_t
 & 
mŸi⁄_comm™ds
);

29 
h™dÀ
(
glo_pid_∑øms_t
 & 
∑øms
, 
uöt16_t
 
ö°™˚
);

32 
h™dÀ
(
glo_ªque°_t
 & 
msg
, 
uöt16_t
 
ö°™˚
);

34 
	m¥iv©e
:

37 
vútuÆ
 
öôülize
();

40 
vútuÆ
 
run
();

43 
√wMesßgeCÆlback
(
uöt8_t
 
obje˘_id
, 
uöt16_t
 
ö°™˚
, * 
glob_d©a
);

48 
syncPidP¨amëîs
();

50 
	m¥iv©e
:

53 
GloRxLök
 * 
glo_rx_lök_
;

56 
ußπ_bus_t
 
	mbus_
;

57 
Ußπ
 * 
	m£rül_p‹t_
;

62 
TñemëryRe˚iveTask
 
ª˚ive_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\telemetry_send_task.h

1 #i‚de‡
TELEMETRY_SEND_TASK_H_INCLUDED


2 
	#TELEMETRY_SEND_TASK_H_INCLUDED


	)

5 
	~"glo_tx_lök.h
"

6 
	~"glob_ty≥s.h
"

7 
	~"queued_èsk.h
"

8 
	~"sim∂e_¨øy.h
"

11 
	gglob_queue_t
;

12 
	gglob_d©a_queue_t
;

15 
	gScheduÀr
::
	tQueue
<
	tglob_queue_t
> 
	tGlobQueue
;

19 
˛ass
 
	gTñemërySídTask
 : 
public
 
ScheduÀr
::
QueuedTask
<
glob_queue_t
>

21 
public
:

24 
TñemërySídTask
(
uöt32_t
 
queue_size
);

28 
boﬁ
 
£nd_c›y
(
uöt8_t
 
id
, 
uöt16_t
 
ö°™˚
=1);

38 
boﬁ
 
£nd
(
uöt8_t
 
id
, 
uöt16_t
 
ö°™˚
=1, uöt16_à
°›_ö°™˚
=0);

41 
£nd_ˇched_as£π_mesßges
();

42 
£nd_ˇched_debug_mesßges
();

45 
boﬁ
 
h™dÀ
(
glo_as£π_mesßge_t
 & 
mesßge
);

48 
boﬁ
 
h™dÀ
(
glo_debug_mesßge_t
 & 
mesßge
);

51 
boﬁ
 
h™dÀ
(
glo_èsk_timög_t
 c⁄° & 
timög
);

53 
	g¥Ÿe˘ed
:

56 
vútuÆ
 
öôülize
();

59 
vútuÆ
 
run
();

61 
	g¥iv©e
:

64 
GloTxLök
 * 
glo_tx_lök_
;

67 
ußπ_bus_t
 
	gbus_
;

68 
Ußπ
 * 
	g£rül_p‹t_
;

71 
	gSim∂eAºay
<
	gglob_d©a_queue_t
> 
	gßve_buf„r_
;

75 
uöt16_t
 
	g√xt_as£π_ö°™˚_
;

76 
uöt16_t
 
	g√xt_debug_ö°™˚_
;

83 
	sglob_queue_t


85 
uöt8_t
 
	mid
;

86 
uöt16_t
 
	mö°™˚
;

87 
uöt16_t
 
	m°›_ö°™˚
;

88 
¨øy_idx_t
 
	m°‹age_idx
;

91 
glob_queue_t
(Ë: 
id
(0), 
ö°™˚
(0), 
°›_ö°™˚
(0), 
°‹age_idx
(
INVALID_ARRAY_INDEX
) {}

94 
glob_queue_t
(
uöt8_t
 
id
, 
uöt16_t
 
ö°™˚
, uöt16_à
°›_ö°™˚
, 
¨øy_idx_t
 
°‹age_idx
) :

95 
id
(id), 
ö°™˚
(ö°™˚), 
°›_ö°™˚
(°›_ö°™˚), 
°‹age_idx
(storage_idx) {}

101 
	sglob_d©a_queue_t


103 
uöt8_t
 
	md©a
[256];

107 
TñemërySídTask
 
£nd_èsk
;

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\leds_task.cpp

2 
	~"globs.h
"

3 
	~"Àds_èsk.h
"

4 
	~"robŸ_£âögs.h
"

5 
	~"°©us_upd©e_èsk.h
"

6 
	~"utû_as£π.h
"

9 
	gLedsTask
::
	$LedsTask
(
‰equícy
) :

10 
	`PîiodicTask
("Leds", 
TASK_ID_LED
, 
‰equícy
),

11 
	`√w_gªí_∑âîn_ªque°ed_
(
Ál£
),

12 
	`ªque°ed_gªí_∑âîn_
(0),

13 
	$Êash_°©e_is_off
(
Ál£
)

15 
	}
}

18 
	gLedsTask
::
	$ªadNewD©a
()

20 
glo_modes
.
	`ªad
(&
modes_
);

21 
glo_™Æog
.
	`ªad
(&
™Æog_
);

22 
	}
}

25 
	gLedsTask
::
	$run
()

27 
	`ªadNewD©a
();

29 i‡(
modes_
.
maö_mode
 !
MAIN_MODE_LINE_FOLLOWING
)

32 
uöt8_t
 
gªí_Àd_∑âîn
 = 1 << 
modes_
.
maö_mode
;

33 
gªí_Àds_
.
	`£t
(
gªí_Àd_∑âîn
);

38 
gªí_Àds_
.
	`£t
(
ªque°ed_gªí_∑âîn_
);

41 i‡(
	`thrŸéeHz
(2))

43 
	`¶owRun
();

45 
	}
}

48 
	gLedsTask
::
	$¶owRun
()

51 
boﬁ
 
¸icôül_b©ãry
 = 
Ál£
;

54 
Êash_°©e_is_off
 = !flash_state_is_off;

56 i‡(
Êash_°©e_is_off
)

58 
u£r_Àds_
.
	`˛ór
(
USER_LED_GREEN
);

59 
u£r_Àds_
.
	`˛ór
(
USER_LED_YELLOW
);

60 
u£r_Àds_
.
	`˛ór
(
USER_LED_ORANGE
);

61 
u£r_Àds_
.
	`˛ór
(
USER_LED_RED
);

65 i‡(
™Æog_
.
b©ãry_vﬁège
 > 
FULL_BATTERY_VOLTAGE
)

67 
u£r_Àds_
.
	`£t
(
USER_LED_GREEN
);

68 
u£r_Àds_
.
	`˛ór
(
USER_LED_YELLOW
);

69 
u£r_Àds_
.
	`˛ór
(
USER_LED_ORANGE
);

70 
u£r_Àds_
.
	`˛ór
(
USER_LED_RED
);

72 i‡(
™Æog_
.
b©ãry_vﬁège
 > 
LOW_BATTERY_VOLTAGE
)

74 
u£r_Àds_
.
	`˛ór
(
USER_LED_GREEN
);

75 
u£r_Àds_
.
	`£t
(
USER_LED_YELLOW
);

76 
u£r_Àds_
.
	`˛ór
(
USER_LED_ORANGE
);

77 
u£r_Àds_
.
	`˛ór
(
USER_LED_RED
);

79 i‡(
™Æog_
.
b©ãry_vﬁège
 > 
CRITICAL_BATTERY_VOLTAGE
)

81 
u£r_Àds_
.
	`˛ór
(
USER_LED_GREEN
);

82 
u£r_Àds_
.
	`˛ór
(
USER_LED_YELLOW
);

83 
u£r_Àds_
.
	`£t
(
USER_LED_ORANGE
);

84 
u£r_Àds_
.
	`˛ór
(
USER_LED_RED
);

88 
¸icôül_b©ãry
 = 
åue
;

89 
u£r_Àds_
.
	`˛ór
(
USER_LED_GREEN
);

90 
u£r_Àds_
.
	`˛ór
(
USER_LED_YELLOW
);

91 
u£r_Àds_
.
	`˛ór
(
USER_LED_ORANGE
);

92 
u£r_Àds_
.
	`£t
(
USER_LED_RED
);

96 i‡(
¸icôül_b©ãry
)

98 
°©us_upd©e_èsk
.
	`£tEº‹Codes
(
ERROR_CODE_CRICITAL_BATTERY
);

102 
°©us_upd©e_èsk
.
	`˛órEº‹Codes
(
ERROR_CODE_CRICITAL_BATTERY
);

104 
	}
}

107 
	gLedsTask
::
	$ªque°NewLedGªíP©ã∫
(
uöt8_t
 
cou¡
)

109 
ªque°ed_gªí_∑âîn_
 = 
cou¡
;

110 
√w_gªí_∑âîn_ªque°ed_
 = 
åue
;

111 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\main_control_task.cpp

2 
	~<cm©h
>

3 
	~"debug_¥ötf.h
"

4 
	~"globs.h
"

5 
	~"maö_c⁄åﬁ_èsk.h
"

6 
	~"m©h_utû.h
"

7 
	~"physiˇl_c⁄°™ts.h
"

8 
	~"robŸ_£âögs.h
"

9 
	~"ãÀmëry_£nd_èsk.h
"

10 
	~"utû_as£π.h
"

13 
	gMaöC⁄åﬁTask
::
	$MaöC⁄åﬁTask
(
‰equícy
) :

14 
	`PîiodicTask
("Maö C⁄åﬁ", 
TASK_ID_MAIN_CONTROL
, 
‰equícy
),

15 
	`yaw_pid
(2, 20, 0.05, -0.3, 0.3, -0.8, 0.8),

16 
	`À·_•ìd_pid
(1.00, 30, 0.0, -0.3, 0.3, -0.8, 0.8),

17 
	`right_•ìd_pid
(1.00, 30, 0.0, -0.3, 0.3, -0.8, 0.8),

18 
	`À·_posôi⁄_pid
(0.00, 0, 0.0, -0.3, 0.3, -0.8, 0.8),

19 
	`right_posôi⁄_pid
(0.00, 0, 0.0, -0.3, 0.3, -0.8, 0.8),

20 
	`löe_åack_pid
(50, 70, 20, -0.4, 0.4, -5.0, 5.0),

21 
	`À·_ícodî_
(
EncodîA
),

22 
	`right_ícodî_
(
EncodîB
),

23 
	`À·_dîiv_
(
dñè_t_
, 20.0f , 0.707f),

24 
	`right_dîiv_
(
dñè_t_
, 20.0f , 0.707f),

25 
	`pos_cmd_dîiv_
(
dñè_t_
, 50.0f , 0.707f),

26 
	`thëa_cmd_dîiv_
(
dñè_t_
, 100.0f , 0.707f),

27 
	`bëa_dîiv_
(
dñè_t_
, 10.0f , 0.707f),

28 
	`di°™˚_comm™d_
(0.0f),

29 
	`yaw_comm™d_
(0.0f),

30 
	`ˇ±urög_d©a_
(
Ál£
),

31 
	`ˇ±uª_cou¡î_
(0),

32 
	`ˇ±uª_run_cou¡s_
(0),

33 
	$max_ßm∂es_
(0)

35 
uöt8_t
 
i
 = 0; i < 4; ++i)

38 
K_
[
i
] = 
K_DEFAULT
[i];

40 
	}
}

43 
	gMaöC⁄åﬁTask
::
	$öôülize
()

46 
max_ßm∂es_
 = 
globs
[
GLO_ID_CAPTURE_DATA
]->
	`gë_num_ö°™˚s
() - 1;

47 
	}
}

50 
	gMaöC⁄åﬁTask
::
	$ªadNewD©a
()

52 
glo_modes
.
	`ªad
(&
modes_
);

53 
glo_imu
.
	`ªad
(&
imu_
);

54 
glo_rﬁl_pôch_yaw
.
	`ªad
(&
rﬁl_pôch_yaw_
);

55 
glo_thëa_zîo
.
	`ªad
(&
thëa_zîo_
);

56 
glo_mŸi⁄_comm™ds
.
	`ªad
(&
mŸi⁄_comm™ds_
);

57 
glo_°©us_d©a
.
	`ªad
(&
°©us_d©a_
);

58 
	}
}

61 
	gMaöC⁄åﬁTask
::
	$publishNewD©a
()

63 
glo_odomëry
.
	`publish
(&
odomëry_
);

64 
glo_™Æog
.
	`publish
(&
™Æog_
);

65 
glo_wave
.
	`publish
(&
wave_
);

66 
glo_mŸ‹_pwm
.
	`publish
(&
mŸ‹_pwm_
);

67 
	}
}

70 
	gMaöC⁄åﬁTask
::
	$run
()

73 
	`ªadNewD©a
();

76 
™Æog_öputs_
.
	`gëVﬁèges
(
™Æog_
.
vﬁèges
);

77 
™Æog_
.
b©ãry_vﬁège
 = 
BATTERY_SCALE
 *á«log_.
vﬁèges
[8] + 
BATTERY_OFFSET
;

80 
odomëry_
.
À·_di°™˚
 = 
ENCODER_SCALES
[0] * 
À·_ícodî_
.
	`ªad
();

81 
odomëry_
.
right_di°™˚
 = 
ENCODER_SCALES
[1] * 
right_ícodî_
.
	`ªad
();

82 
odomëry_
.
avg_di°™˚
 = (odomëry_.
À·_di°™˚
 + odomëry_.
right_di°™˚
) / 2.0f;

83 
odomëry_
.
yaw
 = (odomëry_.
right_di°™˚
 - odomëry_.
À·_di°™˚
Ë/ 
WHEEL_BASE
;

84 
odomëry_
.
À·_•ìd
 = 
À·_dîiv_
.
	`ˇlcuœã
(odomëry_.
À·_di°™˚
);

85 
odomëry_
.
right_•ìd
 = 
right_dîiv_
.
	`ˇlcuœã
(odomëry_.
right_di°™˚
);

86 
odomëry_
.
avg_•ìd
 = (odomëry_.
À·_•ìd
 + odomëry_.
right_•ìd
) / 2.0f;

90 
mŸ‹_pwm_
.
À·_duty
 = 0;

91 
mŸ‹_pwm_
.
right_duty
 = 0;

92 
modes_
.
maö_mode
)

94 
MAIN_MODE_BALANCE
:

95 
	`bÆ™˚Mode
();

97 
MAIN_MODE_HORIZONTAL
:

98 
	`h‹iz⁄èlMode
();

100 
MAIN_MODE_LINE_FOLLOWING
:

101 
	`löeFﬁlowögMode
();

103 
MAIN_MODE_EXPERIMENT
:

104 
	`ex≥rimítMode
();

106 
MAIN_MODE_CUSTOM
:

107 
	`cu°omMode
();

109 
MAIN_MODE_RACE
:

110 
	`ø˚Mode
();

113 
	`as£π_Æways_msg
(
ASSERT_STOP
, "Invalid main mode.");

118 
	`upd©eMŸ‹PWM
();

121 
	`runD©aC≠tuª
();

126 i‡((
modes_
.
maö_mode
 !
MAIN_MODE_EXPERIMENT
) &&

127 (
ˇ±uª_comm™d_
.
is_°¨t
 && c≠tuª_comm™d_.
∑u£d
))

129 
ˇ±uª_comm™d_
.
∑u£d
 = 
Ál£
;

130 
this
->
	`h™dÀ
(
ˇ±uª_comm™d_
);

133 
	`publishNewD©a
();

134 
	}
}

137 
	gMaöC⁄åﬁTask
::
	$upd©eMŸ‹PWM
()

140 
boﬁ
 
ö_vÆid_°©e
 = (
modes_
.
°©e
 =
STATE_NORMAL
);

143 
uöt8_t
 
îr‹_dëe˘ed
 = (
°©us_d©a_
.
îr‹_codes
 & 
ERROR_CODE_CRICITAL_BATTERY
);

145 i‡(!
ö_vÆid_°©e
 || 
îr‹_dëe˘ed
)

147 
mŸ‹_pwm_
.
À·_duty
 = 0;

148 
mŸ‹_pwm_
.
right_duty
 = 0;

152 
mŸ‹_pwm_
.
À·_duty
 = 
	`limô
(motor_pwm_.left_duty, -1.0f, 1.0f);

153 
mŸ‹_pwm_
.
right_duty
 = 
	`limô
(motor_pwm_.right_duty, -1.0f, 1.0f);

161 
sˇÀ
 = 1;

162 i‡((
™Æog_
.
b©ãry_vﬁège
 > 0Ë&& (
CRITICAL_BATTERY_VOLTAGE
 <=ánalog_.battery_voltage))

164 
sˇÀ
 = 
CRITICAL_BATTERY_VOLTAGE
 / 
™Æog_
.
b©ãry_vﬁège
;

166 
mŸ‹_pwm_
.
À·_duty
 *
sˇÀ
;

167 
mŸ‹_pwm_
.
right_duty
 *
sˇÀ
;

170 
À·_duty
 = 
mŸ‹_pwm_
.À·_duty * 
MOTOR_SIGNS
[0];

171 
right_duty
 = 
mŸ‹_pwm_
.right_duty * 
MOTOR_SIGNS
[1];

173 
hbridge_
.
	`£tDutyA
(
À·_duty
);

174 
hbridge_
.
	`£tDutyB
(
right_duty
);

175 
	}
}

178 
	gMaöC⁄åﬁTask
::
	$runD©aC≠tuª
()

181 
boﬁ
 
cuºíéy_ˇ±urög_d©a
 = 
ˇ±uª_comm™d_
.
is_°¨t
 && !ˇ±uª_comm™d_.
∑u£d
;

184 i‡(!
ˇ±urög_d©a_
 && 
cuºíéy_ˇ±urög_d©a
)

186 
ˇ±urög_d©a_
 = 
åue
;

187 
ˇ±uª_cou¡î_
 = 0;

188 
	`debug_¥ötf
("I'm startingÅo collect data.");

192 
boﬁ
 
buf„r_fuŒ
 = (
ˇ±uª_cou¡î_
 >
max_ßm∂es_
);

193 
boﬁ
 
have_desúed_ßm∂es
 = (
ˇ±uª_cou¡î_
 >
ˇ±uª_comm™d_
.
desúed_ßm∂es
);

194 i‡(
cuºíéy_ˇ±urög_d©a
 && (
buf„r_fuŒ
 || 
have_desúed_ßm∂es
))

196 
cuºíéy_ˇ±urög_d©a
 = 
Ál£
;

199 
ˇ±uª_comm™d_
.
is_°¨t
 = 0;

200 
glo_ˇ±uª_comm™d
.
	`publish
(&
ˇ±uª_comm™d_
);

203 i‡(!
cuºíéy_ˇ±urög_d©a
 && 
ˇ±urög_d©a_
 && (
ˇ±uª_cou¡î_
 > 0))

207 
	`debug_¥ötf
("I cﬁÀ˘ed %d d©®ßm∂es.", 
ˇ±uª_cou¡î_
);

208 
£nd_èsk
.
	`£nd
(
glo_ˇ±uª_d©a
.
	`gë_id
(), 1, 
ˇ±uª_cou¡î_
);

209 
ˇ±uª_comm™d_
.
tŸÆ_ßm∂es
 = 
ˇ±uª_cou¡î_
;

210 
glo_ˇ±uª_comm™d
.
	`publish
(&
ˇ±uª_comm™d_
);

211 
£nd_èsk
.
	`£nd
(
glo_ˇ±uª_comm™d
.
	`gë_id
());

215 
ˇ±urög_d©a_
 = 
cuºíéy_ˇ±urög_d©a
;

217 i‡(
cuºíéy_ˇ±urög_d©a
)

219 i‡(
	`thrŸéeHz
(
ˇ±uª_comm™d_
.
‰equícy
))

221 i‡(
ˇ±uª_cou¡î_
 == 0)

224 
ˇ±uª_run_cou¡s_
 = 0;

230 
ˇ±uª_d©a_
.
time
 = 
dñè_t_
 * 
ˇ±uª_run_cou¡s_
;

231 
ˇ±uª_d©a_
.
d1
 = 
rﬁl_pôch_yaw_
.
Ωy
[1];

232 
ˇ±uª_d©a_
.
d2
 = 
wave_
.
vÆue
;

233 
ˇ±uª_d©a_
.
d3
 = 
mŸ‹_pwm_
.
À·_duty
;

234 
ˇ±uª_d©a_
.
d4
 = 
mŸ‹_pwm_
.
right_duty
;

235 
ˇ±uª_d©a_
.
d5
 = 
odomëry_
.
À·_di°™˚
;

236 
ˇ±uª_d©a_
.
d6
 = 
odomëry_
.
right_di°™˚
;

237 
ˇ±uª_d©a_
.
d7
 = 
odomëry_
.
À·_•ìd
;

238 
ˇ±uª_d©a_
.
d8
 = 
odomëry_
.
right_•ìd
;

242 
glo_ˇ±uª_d©a
.
	`publish
(&
ˇ±uª_d©a_
, 
ˇ±uª_cou¡î_
 + 1);

244 ++
ˇ±uª_cou¡î_
;

248 ++
ˇ±uª_run_cou¡s_
;

250 
	}
}

253 
	gMaöC⁄åﬁTask
::
	$h™dÀ
(
glo_ˇ±uª_comm™d_t
 & 
comm™d
)

256 
comm™d
.
desúed_ßm∂es
 = 
	`limô
(comm™d.desúed_ßm∂es, (
uöt32_t
)1, (uöt32_t)
max_ßm∂es_
);

258 i‡((
comm™d
.
‰equícy
 =0Ë|| (comm™d.‰equícy > 
max_ßm∂es_
))

260 
comm™d
.
‰equícy
 = 
this
->
‰equícy_
;

264 
öt32_t
 
sˇÀ
 = 
	`öt32_t
(
this
->
‰equícy_
 / 
comm™d
.
‰equícy
);

265 
comm™d
.
‰equícy
 = (
uöt16_t
)(
this
->
‰equícy_
 / 
sˇÀ
);

267 
ˇ±uª_comm™d_
 = 
comm™d
;

268 
glo_ˇ±uª_comm™d
.
	`publish
(&
comm™d
);

269 
	}
}

272 
	gMaöC⁄åﬁTask
::
	$ª£t_zîo_tût_™gÀ
()

274 
glo_thëa_zîo_t
 
thëa_zîo
 = { 0 };

275 
glo_thëa_zîo
.
	`publish
(&
thëa_zîo
);

276 
	}
}

279 
	gMaöC⁄åﬁTask
::
	$h™dÀ
(
glo_wave_t
 & 
wave
)

281 
wave
.
°©e
 = 
WAVE_READY_TO_RUN
;

282 
wave
.
vÆue
 = 0;

283 
wave
.
time
 = 0;

284 
wave
.
tŸÆ_time
 = 0;

288 
wave_
 = 
wave
;

289 
glo_wave
.
	`publish
(&
wave
);

290 
	}
}

293 
	gMaöC⁄åﬁTask
::
	$h™dÀ_bÆ™˚_tût_gaös
(
glo_pid_∑øms_t
 & 
tût_∑øms
)

295 
K_
[0] = 
tût_∑øms
.
kp
;

296 
K_
[1] = 
tût_∑øms
.
kd
;

297 
	}
}

300 
	gMaöC⁄åﬁTask
::
	$h™dÀ_bÆ™˚_posôi⁄_gaös
(
glo_pid_∑øms_t
 & 
posôi⁄_∑øms
)

302 
K_
[2] = 
posôi⁄_∑øms
.
kp
;

303 
K_
[3] = 
posôi⁄_∑øms
.
kd
;

304 
	}
}

307 
	gMaöC⁄åﬁTask
::
	$gë_bÆ™˚_tût_gaös
(
glo_pid_∑øms_t
 & 
tût_∑øms
)

309 
tût_∑øms
.
kp
 = 
K_
[0];

310 
tût_∑øms
.
kd
 = 
K_
[1];

311 
tût_∑øms
.
ki
 = 0;

312 
tût_∑øms
.
öãgøl_lﬁimô
 = 0;

313 
tût_∑øms
.
öãgøl_hûimô
 = 0;

314 
tût_∑øms
.
lﬁimô
 = -10000;

315 
tût_∑øms
.
hûimô
 = 10000;

316 
	}
}

319 
	gMaöC⁄åﬁTask
::
	$gë_bÆ™˚_posôi⁄_gaös
(
glo_pid_∑øms_t
 & 
posôi⁄_∑øms
)

321 
posôi⁄_∑øms
.
kp
 = 
K_
[2];

322 
posôi⁄_∑øms
.
kd
 = 
K_
[3];

323 
posôi⁄_∑øms
.
ki
 = 0;

324 
posôi⁄_∑øms
.
öãgøl_lﬁimô
 = 0;

325 
posôi⁄_∑øms
.
öãgøl_hûimô
 = 0;

326 
posôi⁄_∑øms
.
lﬁimô
 = -10000;

327 
posôi⁄_∑øms
.
hûimô
 = 10000;

328 
	}
}

331 
	gMaöC⁄åﬁTask
::
	$ª£t
()

333 
À·_ícodî_
.
	`£t
(0);

334 
right_ícodî_
.
	`£t
(0);

335 
À·_dîiv_
.
	`ª£t
();

336 
right_dîiv_
.
	`ª£t
();

337 
pos_cmd_dîiv_
.
	`ª£t
();

338 
thëa_cmd_dîiv_
.
	`ª£t
();

339 
bëa_dîiv_
.
	`ª£t
();

340 
di°™˚_comm™d_
 = 0.0f;

341 
yaw_comm™d_
 = 0.0f;

342 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\modes_task.cpp

2 
	~<cm©h
>

3 
	~"debug_¥ötf.h
"

4 
	~"globs.h
"

5 
	~"maö_c⁄åﬁ_èsk.h
"

6 
	~"modes_èsk.h
"

7 
	~"utû_as£π.h
"

10 
	gModesTask
::
	$ModesTask
(
‰equícy
) :

11 
	`PîiodicTask
("Modes", 
TASK_ID_MODES
, 
‰equícy
),

12 
	`modes_push_buâ⁄_
(
USER_PB_TOP
),

13 
	`°©e_push_buâ⁄_
(
USER_PB_BOTTOM
),

14 
	`vc_öô_°©e_
(
VC_INIT_STATE_RESET
),

15 
	$vc_öô_waô_°›_time_
(0)

17 
	}
}

20 
	gModesTask
::
	$öôülize
()

22 
modes_
.
maö_mode
 = 
MAIN_MODE_CUSTOM
;

23 
modes_
.
sub_mode
 = 0;

24 
	`ch™geSèã
(
STATE_STOPPED
);

25 
glo_modes
.
	`publish
(&
modes_
);

26 
	}
}

29 
	gModesTask
::
	$run
()

31 i‡(
modes_push_buâ⁄_
.
	`a˘iv©ed
())

34 
glo_modes_t
 
√xt_modes
;

35 
√xt_modes
.
maö_mode
 = (
modes_
.maö_modê+ 1Ë% 
NUM_MAIN_MODES
;

36 
√xt_modes
.
sub_mode
 = 0;

37 
	`h™dÀ
(
√xt_modes
);

40 
modes_
.
°©e
)

42 
STATE_STOPPED
:

43 
	`°›≥dSèã
();

45 
STATE_INITIALIZING
:

46 
	`öôülizögSèã
();

48 
STATE_NORMAL
:

49 
	`n‹mÆSèã
();

52 
	}
}

55 
	gModesTask
::
	$ª£t
()

57 
maö_c⁄åﬁ_èsk
.
	`ª£t
();

58 
	}
}

61 
boﬁ
 
	gModesTask
::
	$öVîtiˇlC⁄figuøti⁄
()

63  (
modes_
.
maö_mode
 =
MAIN_MODE_BALANCE
) ||

64 (
modes_
.
maö_mode
 =
MAIN_MODE_CUSTOM
);

65 
	}
}

68 
	gModesTask
::
	$h™dÀ
(
glo_modes_t
 
√w_modes
)

71 i‡(
√w_modes
.
maö_mode
 >
NUM_MAIN_MODES
)

73 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "Nÿmodêwôh ID %d", ()
√w_modes
.
maö_mode
);

74 
√w_modes
.
maö_mode
 = 
MAIN_MODE_BALANCE
;

78 i‡((
√w_modes
.
maö_mode
 =
MAIN_MODE_EXPERIMENT
) &&

79 (
√w_modes
.
sub_mode
 >
NUM_EXPERIMENTS
))

81 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "Nÿex≥rimíàwôh ID %d", ()
√w_modes
.
sub_mode
);

82 
√w_modes
.
sub_mode
 = 
EXPERIMENT_NONE_SELECTED
;

85 
boﬁ
 
maö_mode_ch™ged
 = 
modes_
.
maö_mode
 !
√w_modes
.main_mode;

86 
boﬁ
 
sub_mode_ch™ged
 = 
modes_
.
sub_mode
 !
√w_modes
.sub_mode;

87 i‡(
maö_mode_ch™ged
 || 
sub_mode_ch™ged
)

89 
	`ch™geSèã
(
STATE_STOPPED
);

90 
	`ª£t
();

94 
√w_modes
.
°©e
 = 
modes_
.state;

96 
modes_
 = 
√w_modes
;

97 
glo_modes
.
	`publish
(&
modes_
);

99 
	}
}

102 
	gModesTask
::
	$h™dÀ
(
glo_robŸ_comm™d_t
 
comm™d
)

104 
comm™d
)

106 
ROBOT_COMMAND_START
:

107 
	`ch™geSèã
(
STATE_INITIALIZING
);

109 
ROBOT_COMMAND_STOP
:

110 
	`ch™geSèã
(
STATE_STOPPED
);

112 
ROBOT_COMMAND_RESET
:

113 
	`ª£t
();

115 
ROBOT_COMMAND_TIME_TASKS
:

116 
scheduÀr
.
	`timeTasks
();

119 
	}
}

122 
	gModesTask
::
	$°›≥dSèã
()

124 i‡(
°©e_push_buâ⁄_
.
	`a˘iv©ed
())

126 
	`ch™geSèã
(
STATE_INITIALIZING
);

128 
	}
}

131 
	gModesTask
::
	$öôülizögSèã
()

133 i‡(
	`öVîtiˇlC⁄figuøti⁄
())

135 
vc_öô_°©e_
)

137 
VC_INIT_STATE_RESET
:

139 
maö_c⁄åﬁ_èsk
.
	`ª£t_zîo_tût_™gÀ
();

140 
vc_öô_waô_°›_time_
 = 
sys_timî
.
	`£c⁄ds
() + .3;

141 
vc_öô_°©e_
 = 
VC_INIT_STATE_WAITING
;

143 
VC_INIT_STATE_WAITING
:

144 i‡(
sys_timî
.
	`£c⁄ds
(Ë> 
vc_öô_waô_°›_time_
)

146 
	`ch™geSèã
(
STATE_NORMAL
);

147 
vc_öô_°©e_
 = 
VC_INIT_STATE_RESET
;

154 
	`ch™geSèã
(
STATE_NORMAL
);

156 
	}
}

159 
	gModesTask
::
	$n‹mÆSèã
()

161 i‡(
°©e_push_buâ⁄_
.
	`a˘iv©ed
())

163 
	`ch™geSèã
(
STATE_STOPPED
);

165 
	}
}

168 
	gModesTask
::
	$ch™geSèã
(
glo_›î©ög_°©e_t
 
√w_°©e
)

170 
modes_
.
°©e
 = 
√w_°©e
;

171 
glo_modes
.
	`publish
(&
modes_
);

172 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\status_update_task.cpp

2 
	~"°©us_upd©e_èsk.h
"

3 
	~"globs.h
"

4 
	~"m©h_utû.h
"

5 
	~"physiˇl_c⁄°™ts.h
"

6 
	~"robŸ_£âögs.h
"

7 
	~"ãÀmëry_£nd_èsk.h
"

8 
	~"utû_as£π.h
"

11 
	gSètusUpd©eTask
::
	$SètusUpd©eTask
(
‰equícy
) :

12 
	`PîiodicTask
("Sètus", 
TASK_ID_STATUS_UPDATE
, 
‰equícy
),

13 
	$îr‹_codes_
(0)

15 
	}
}

18 
	gSètusUpd©eTask
::
	$ªadNewD©a
()

21 
glo_°©us_d©a
.
	`ªad
(&
°©us_d©a_
);

22 
glo_rﬁl_pôch_yaw
.
	`ªad
(&
rﬁl_pôch_yaw_
);

23 
glo_odomëry
.
	`ªad
(&
odomëry_
);

24 
glo_modes
.
	`ªad
(&
modes_
);

25 
glo_™Æog
.
	`ªad
(&
™Æog_
);

26 
glo_mŸ‹_pwm
.
	`ªad
(&
mŸ‹_pwm_
);

27 
	}
}

30 
	gSètusUpd©eTask
::
	$publishNewD©a
()

32 
glo_°©us_d©a
.
	`publish
(&
°©us_d©a_
);

33 
£nd_èsk
.
	`£nd
(
glo_°©us_d©a
.
	`gë_id
());

34 
	}
}

37 
	gSètusUpd©eTask
::
	$run
()

39 
	`ªadNewD©a
();

43 
yaw
 = 
	`wøp_™gÀ
(
odomëry_
.yaw);

45 
°©us_d©a_
.
b©ãry
 = 
™Æog_
.
b©ãry_vﬁège
;

46 
°©us_d©a_
.
rﬁl
 = 
rﬁl_pôch_yaw_
.
Ωy
[0];

47 
°©us_d©a_
.
pôch
 = 
rﬁl_pôch_yaw_
.
Ωy
[1];

48 
°©us_d©a_
.
yaw
 = yaw;

49 
°©us_d©a_
.
maö_mode
 = 
modes_
.main_mode;

50 
°©us_d©a_
.
sub_mode
 = 
modes_
.sub_mode;

51 
°©us_d©a_
.
°©e
 = 
modes_
.state;

52 
°©us_d©a_
.
îr‹_codes
 = 
îr‹_codes_
;

53 
°©us_d©a_
.
À·_löór_posôi⁄
 = 
odomëry_
.
À·_di°™˚
;

54 
°©us_d©a_
.
right_löór_posôi⁄
 = 
odomëry_
.
right_di°™˚
;

55 
°©us_d©a_
.
À·_™guœr_posôi⁄
 = 
odomëry_
.
À·_di°™˚
 / 
WHEEL_RADIUS
;

56 
°©us_d©a_
.
right_™guœr_posôi⁄
 = 
odomëry_
.
right_di°™˚
 / 
WHEEL_RADIUS
;

57 
°©us_d©a_
.
À·_löór_vñocôy
 = 
odomëry_
.
À·_•ìd
;

58 
°©us_d©a_
.
right_löór_vñocôy
 = 
odomëry_
.
right_•ìd
;

59 
°©us_d©a_
.
À·_™guœr_vñocôy
 = 
odomëry_
.
À·_•ìd
 / 
WHEEL_RADIUS
;

60 
°©us_d©a_
.
right_™guœr_vñocôy
 = 
odomëry_
.
right_•ìd
 / 
WHEEL_RADIUS
;

61 
°©us_d©a_
.
À·_pwm
 = 
mŸ‹_pwm_
.
À·_duty
;

62 
°©us_d©a_
.
right_pwm
 = 
mŸ‹_pwm_
.
right_duty
;

63 
°©us_d©a_
.
fúmw¨e_vîsi⁄
 = 
FIRMWARE_VERSION
;

64 
	`mem˝y
(
°©us_d©a_
.
¥o˚ss‹_id
, (*)0x1FFF7A10, 12);

66 
	`publishNewD©a
();

67 
	}
}

70 
	gSètusUpd©eTask
::
	$£tEº‹Codes
(
glo_îr‹_codes_t
 
îr‹_codes
)

72 
îr‹_codes_
 |
îr‹_codes
;

73 
	}
}

76 
	gSètusUpd©eTask
::
	$˛órEº‹Codes
(
glo_îr‹_codes_t
 
îr‹_codes
)

78 
îr‹_codes_
 &~
îr‹_codes
;

79 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\telemetry_receive_task.cpp

2 
	~"ãÀmëry_ª˚ive_èsk.h
"

3 
	~"globs.h
"

4 
	~"maö_c⁄åﬁ_èsk.h
"

5 
	~"m©h_utû.h
"

6 
	~"modes_èsk.h
"

7 
	~"robŸ_£âögs.h
"

8 
	~"ãÀmëry_£nd_èsk.h
"

9 
	~"utû_as£π.h
"

12 
	gTñemëryRe˚iveTask
::
	$TñemëryRe˚iveTask
() :

13 
	`Task
("Re˚ive", 
TASK_ID_TELEM_RECEIVE
),

14 
	`glo_rx_lök_
(
NULL
),

15 
	`bus_
(
USART_BUS_2
),

16 
	$£rül_p‹t_
(
NULL
)

18 
	}
}

21 
	gTñemëryRe˚iveTask
::
	$öôülize
()

26 
boﬁ
 
íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

28 
£rül_p‹t_
 = 
Ußπ
::
	`ö°™˚
(
bus_
);

29 
	`as£π
(
£rül_p‹t_
 !
NULL
, 
ASSERT_STOP
);

31 
scheduÀr
.
	`ª°‹eI¡îru±s
(
íabÀd
);

33 
glo_rx_lök_
 = 
√w
 
	`GloRxLök
(
£rül_p‹t_
, 
√wMesßgeCÆlback
);

34 
	`as£π
(
glo_rx_lök_
 !
NULL
, 
ASSERT_STOP
);

36 
	`syncPidP¨amëîs
();

37 
	}
}

40 
boﬁ
 
	gTñemëryRe˚iveTask
::
	$√edToRun
()

42  
glo_rx_lök_
->
	`d©aRódy
();

43 
	}
}

46 
	gTñemëryRe˚iveTask
::
	$run
()

51 
glo_rx_lök_
->
	`∑r£
();

52 
	}
}

55 
	gTñemëryRe˚iveTask
::
	$√wMesßgeCÆlback
(
uöt8_t
 
obje˘_id
, 
uöt16_t
 
ö°™˚
, * 
glob_d©a
)

58 
obje˘_id
)

60 
GLO_ID_DRIVING_COMMAND
:

61 
ª˚ive_èsk
.
	`h™dÀ
(*((
glo_drivög_comm™d_t
 *)
glob_d©a
));

63 
GLO_ID_CAPTURE_COMMAND
:

64 
maö_c⁄åﬁ_èsk
.
	`h™dÀ
(*((
glo_ˇ±uª_comm™d_t
 *)
glob_d©a
));

66 
GLO_ID_MODES
:

67 
modes_èsk
.
	`h™dÀ
(*((
glo_modes_t
 *)
glob_d©a
));

69 
GLO_ID_ROBOT_COMMAND
:

70 
modes_èsk
.
	`h™dÀ
(*((
glo_robŸ_comm™d_t
 *)
glob_d©a
));

72 
GLO_ID_WAVE
:

73 
maö_c⁄åﬁ_èsk
.
	`h™dÀ
(*((
glo_wave_t
 *)
glob_d©a
));

75 
GLO_ID_PID_PARAMS
:

76 
ª˚ive_èsk
.
	`h™dÀ
(*((
glo_pid_∑øms_t
 *)
glob_d©a
), 
ö°™˚
);

78 
GLO_ID_REQUEST
:

79 
ª˚ive_èsk
.
	`h™dÀ
(*((
glo_ªque°_t
 *)
glob_d©a
), 
ö°™˚
);

82 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "Re˚ived unh™dÀd glob wôh id: %d", 
obje˘_id
);

85 
	}
}

88 
	gTñemëryRe˚iveTask
::
	$h™dÀ
(
glo_drivög_comm™d_t
 & 
drivög_comm™d
)

90 
glo_drivög_comm™d
.
	`publish
(&
drivög_comm™d
);

93 
glo_mŸi⁄_comm™ds_t
 
mŸi⁄_comm™ds
;

94 
glo_mŸi⁄_comm™ds
.
	`ªad
(&
mŸi⁄_comm™ds
);

96 i‡(
drivög_comm™d
.
movemít_ty≥
 & 
DRIVING_COMMAND_RIGHT
)

98 
mŸi⁄_comm™ds
.
™guœr_vñocôy
 = -90.0‡* 
DEG2RAD
;

100 i‡(
drivög_comm™d
.
movemít_ty≥
 & 
DRIVING_COMMAND_LEFT
)

102 
mŸi⁄_comm™ds
.
™guœr_vñocôy
 = 90.0‡* 
DEG2RAD
;

106 
mŸi⁄_comm™ds
.
™guœr_vñocôy
 = 0;

109 i‡(
drivög_comm™d
.
movemít_ty≥
 & 
DRIVING_COMMAND_FORWARD
)

111 i‡(
mŸi⁄_comm™ds
.
löór_vñocôy
 > -0.00001f)

113 
mŸi⁄_comm™ds
.
löór_vñocôy
 += 0.04f;

114 
	`limô
(
mŸi⁄_comm™ds
.
löór_vñocôy
, -2.0f, 2.0f);

118 
mŸi⁄_comm™ds
.
löór_vñocôy
 = 0.0f;

121 i‡(
drivög_comm™d
.
movemít_ty≥
 & 
DRIVING_COMMAND_REVERSE
)

123 i‡(
mŸi⁄_comm™ds
.
löór_vñocôy
 < 0.00001f)

125 
mŸi⁄_comm™ds
.
löór_vñocôy
 -= 0.04f;

126 
	`limô
(
mŸi⁄_comm™ds
.
löór_vñocôy
, -2.0f, 2.0f);

130 
mŸi⁄_comm™ds
.
löór_vñocôy
 = 0.0f;

134 i‡(
drivög_comm™d
.
movemít_ty≥
 & 
DRIVING_COMMAND_STOP
)

136 
mŸi⁄_comm™ds
.
löór_vñocôy
 = 0.0f;

137 
mŸi⁄_comm™ds
.
™guœr_vñocôy
 = 0.0f;

140 i‡(
drivög_comm™d
.
movemít_ty≥
 & 
DRIVING_COMMAND_DIRECT_COMMAND
)

144 
mŸi⁄_comm™ds
.
löór_vñocôy
 = 
drivög_comm™d
.linear_velocity / 3.0f;

145 
mŸi⁄_comm™ds
.
™guœr_vñocôy
 = -
drivög_comm™d
.angular_velocity / 1.0f;

148 
this
->
	`h™dÀ
(
mŸi⁄_comm™ds
);

149 
	}
}

152 
	gTñemëryRe˚iveTask
::
	$h™dÀ
(
glo_mŸi⁄_comm™ds_t
 & 
mŸi⁄_comm™ds
)

154 
glo_mŸi⁄_comm™ds
.
	`publish
(&
mŸi⁄_comm™ds
);

155 
	}
}

158 
	gTñemëryRe˚iveTask
::
	$h™dÀ
(
glo_pid_∑øms_t
 & 
∑øms
, 
uöt16_t
 
ö°™˚
)

160 
uöt16_t
 
c⁄åﬁÀr_id
 = 
ö°™˚
-1;

162 
c⁄åﬁÀr_id
)

164 
PID_ID_LEFT_SPEED_CONTROLLER
:

165 
maö_c⁄åﬁ_èsk
.
À·_•ìd_pid
.
	`£t
(
∑øms
);

167 
PID_ID_RIGHT_SPEED_CONTROLLER
:

168 
maö_c⁄åﬁ_èsk
.
right_•ìd_pid
.
	`£t
(
∑øms
);

170 
PID_ID_YAW_CONTROLLER
:

171 
maö_c⁄åﬁ_èsk
.
yaw_pid
.
	`£t
(
∑øms
);

173 
PID_ID_BALANCE_TILT_CONTROLLER
:

174 
maö_c⁄åﬁ_èsk
.
	`h™dÀ_bÆ™˚_tût_gaös
(
∑øms
);

176 
PID_ID_BALANCE_POSITION_CONTROLLER
:

177 
maö_c⁄åﬁ_èsk
.
	`h™dÀ_bÆ™˚_posôi⁄_gaös
(
∑øms
);

179 
PID_ID_LINE_TRACK_CONTROLLER
:

180 
maö_c⁄åﬁ_èsk
.
löe_åack_pid
.
	`£t
(
∑øms
);

182 
PID_ID_LEFT_POSITION_CONTROLLER
:

183 
maö_c⁄åﬁ_èsk
.
À·_posôi⁄_pid
.
	`£t
(
∑øms
);

185 
PID_ID_RIGHT_POSITION_CONTROLLER
:

186 
maö_c⁄åﬁ_èsk
.
right_posôi⁄_pid
.
	`£t
(
∑øms
);

189 
	`as£π_Æways_msg
(
ASSERT_CONTINUE
, "NÿPID c⁄åﬁÀ∏wôh ID %d", ()
c⁄åﬁÀr_id
);

192 
glo_pid_∑øms
.
	`publish
(&
∑øms
, 
ö°™˚
);

193 
	}
}

196 
	gTñemëryRe˚iveTask
::
	$syncPidP¨amëîs
()

198 
glo_pid_∑øms_t
 
∑øms
[
NUM_PID_CONTROLLERS
];

200 
maö_c⁄åﬁ_èsk
.
À·_•ìd_pid
.
	`gë
(
∑øms
[
PID_ID_LEFT_SPEED_CONTROLLER
]);

201 
maö_c⁄åﬁ_èsk
.
right_•ìd_pid
.
	`gë
(
∑øms
[
PID_ID_RIGHT_SPEED_CONTROLLER
]);

202 
maö_c⁄åﬁ_èsk
.
yaw_pid
.
	`gë
(
∑øms
[
PID_ID_YAW_CONTROLLER
]);

203 
maö_c⁄åﬁ_èsk
.
	`gë_bÆ™˚_tût_gaös
(
∑øms
[
PID_ID_BALANCE_TILT_CONTROLLER
]);

204 
maö_c⁄åﬁ_èsk
.
	`gë_bÆ™˚_posôi⁄_gaös
(
∑øms
[
PID_ID_BALANCE_POSITION_CONTROLLER
]);

205 
maö_c⁄åﬁ_èsk
.
löe_åack_pid
.
	`gë
(
∑øms
[
PID_ID_LINE_TRACK_CONTROLLER
]);

206 
maö_c⁄åﬁ_èsk
.
À·_posôi⁄_pid
.
	`gë
(
∑øms
[
PID_ID_LEFT_POSITION_CONTROLLER
]);

207 
maö_c⁄åﬁ_èsk
.
right_posôi⁄_pid
.
	`gë
(
∑øms
[
PID_ID_RIGHT_POSITION_CONTROLLER
]);

209 
uöt16_t
 
i
 = 0; i < 
NUM_PID_CONTROLLERS
; ++i)

211 
glo_pid_∑øms
.
	`publish
(&
∑øms
[
i
], i+1);

213 
	}
}

216 
	gTñemëryRe˚iveTask
::
	$h™dÀ
(
glo_ªque°_t
 & 
msg
, 
uöt16_t
 
ö°™˚
)

218 i‡((
ö°™˚
 =0Ë&& (
msg
.
ªque°ed_id
 < 
NUM_GLOBS
))

220 i‡(
msg
.
ªque°ed_id
 =
GLO_ID_ASSERT_MESSAGE
)

222 
£nd_èsk
.
	`£nd_ˇched_as£π_mesßges
();

224 i‡(
msg
.
ªque°ed_id
 =
GLO_ID_DEBUG_MESSAGE
)

226 
£nd_èsk
.
	`£nd_ˇched_debug_mesßges
();

231 
£nd_èsk
.
	`£nd
(
msg
.
ªque°ed_id
, 1, 
globs
[msg.ªque°ed_id]->
	`gë_num_ö°™˚s
());

237 
£nd_èsk
.
	`£nd
(
msg
.
ªque°ed_id
, 
ö°™˚
);

239 
	}
}

	@C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\telemetry_send_task.cpp

2 
	~"dma_rx.h
"

3 
	~"dma_tx.h
"

4 
	~"globs.h
"

5 
	~"ãÀmëry_£nd_èsk.h
"

6 
	~"ußπ.h
"

7 
	~"utû_as£π.h
"

10 
	gTñemërySídTask
::
	$TñemërySídTask
(
uöt32_t
 
queue_size
) :

11 
QueuedTask
<
glob_queue_t
>("Síd", 
TASK_ID_TELEM_SEND
, 
queue_size
),

12 
	`glo_tx_lök_
(
NULL
),

13 
	`bus_
(
USART_BUS_2
),

14 
	`£rül_p‹t_
(
NULL
),

15 
	`ßve_buf„r_
(15),

16 
	`√xt_as£π_ö°™˚_
(1),

17 
	$√xt_debug_ö°™˚_
(1)

19 
	}
}

22 
boﬁ
 
	gTñemërySídTask
::
	$£nd_c›y
(
uöt8_t
 
id
, 
uöt16_t
 
ö°™˚
)

26 
¨øy_idx_t
 
°‹age_idx
 = 
INVALID_ARRAY_INDEX
;

27 * 
°‹age_buf„r
 = 
ßve_buf„r_
.
	`ªque°St‹age
(&
°‹age_idx
);

28 
globs
[
id
]->
	`c›y_to_buf„r
(
°‹age_buf„r
, 
ö°™˚
);

29 
	`as£π_msg
(
°‹age_idx
 !
INVALID_ARRAY_INDEX
, 
ASSERT_CONTINUE
, "Telem save bufferÅoo small.");

31 
glob_queue_t
 
	`√w_ñemít
(
id
, 
ö°™˚
, 0, 
°‹age_idx
);

33  
	`íqueue
(
√w_ñemít
);

34 
	}
}

37 
boﬁ
 
	gTñemërySídTask
::
	$£nd
(
uöt8_t
 
id
, 
uöt16_t
 
ö°™˚
, uöt16_à
°›_ö°™˚
)

39 
glob_queue_t
 
	`√w_ñemít
(
id
, 
ö°™˚
, 
°›_ö°™˚
, 
INVALID_ARRAY_INDEX
);

41  
	`íqueue
(
√w_ñemít
);

42 
	}
}

45 
	gTñemërySídTask
::
	$öôülize
()

50 
boﬁ
 
íabÀd
 = 
scheduÀr
.
	`dißbÀI¡îru±s
();

51 
£rül_p‹t_
 = 
Ußπ
::
	`ö°™˚
(
bus_
);

52 
scheduÀr
.
	`ª°‹eI¡îru±s
(
íabÀd
);

53 
	`as£π
(
£rül_p‹t_
 !
NULL
, 
ASSERT_STOP
);

55 
glo_tx_lök_
 = 
√w
 
	`GloTxLök
(
£rül_p‹t_
);

56 
	`as£π
(
glo_tx_lök_
 !
NULL
, 
ASSERT_STOP
);

57 
	}
}

60 
	gTñemërySídTask
::
	$run
()

62 
glob_queue_t
 
glob
;

63 i‡(
queue_
.
	`≥ak
(&
glob
))

66 
£nd_ªsu…
;

68 i‡(
glob
.
°‹age_idx
 !
INVALID_ARRAY_INDEX
)

71 * 
ßved_d©a
 = 
ßve_buf„r_
.
	`ª„ªn˚
(
glob
.
°‹age_idx
);

72 
£nd_ªsu…
 = 
glo_tx_lök_
->
	`£nd
(
glob
.
id
, glob.
ö°™˚
, 
ßved_d©a
);

73 
ßve_buf„r_
.
	`ªmove
(
glob
.
°‹age_idx
);

77 
£nd_ªsu…
 = 
glo_tx_lök_
->
	`£nd
(
glob
.
id
, glob.
ö°™˚
);

80 i‡(
£nd_ªsu…
 !
SEND_ERROR_NO_ROOM
)

83 
queue_
.
	`ªmove
();

88 i‡((
glob
.
°›_ö°™˚
 > 0Ë&& (glob.°›_ö°™˚ > glob.
ö°™˚
))

90 
glob_queue_t
 
	`√xt_glob
(
glob
.
id
, glob.
ö°™˚
+1, glob.
°›_ö°™˚
, 
INVALID_ARRAY_INDEX
);

91 
queue_
.
	`íqueue_‰⁄t
(
√xt_glob
);

95 
	}
}

98 
	gTñemërySídTask
::
	$£nd_ˇched_as£π_mesßges
()

100 
uöt16_t
 
i
 = 0; i < 
glo_as£π_mesßge
.
	`gë_num_ö°™˚s
(); ++i)

102 
uöt16_t
 
ö°™˚
 = (
√xt_as£π_ö°™˚_
 + 
i
Ë% (
glo_as£π_mesßge
.
	`gë_num_ö°™˚s
() + 1);

103 i‡(
ö°™˚
 < 
√xt_as£π_ö°™˚_
) { instance++; }

104 
this
->
	`£nd
(
GLO_ID_ASSERT_MESSAGE
, 
ö°™˚
);

106 
	}
}

109 
	gTñemërySídTask
::
	$£nd_ˇched_debug_mesßges
()

111 
uöt16_t
 
i
 = 0; i < 
glo_debug_mesßge
.
	`gë_num_ö°™˚s
(); ++i)

113 
uöt16_t
 
ö°™˚
 = (
√xt_debug_ö°™˚_
 + 
i
Ë% (
glo_debug_mesßge
.
	`gë_num_ö°™˚s
() + 1);

114 i‡(
ö°™˚
 < 
√xt_debug_ö°™˚_
) { instance++; }

115 
this
->
	`£nd
(
GLO_ID_DEBUG_MESSAGE
, 
ö°™˚
);

117 
	}
}

120 
boﬁ
 
	gTñemërySídTask
::
	$h™dÀ
(
glo_as£π_mesßge_t
 & 
mesßge
)

122 
mesßge
.
vÆid
 = 
åue
;

123 
glo_as£π_mesßge
.
	`publish
(&
mesßge
, 
√xt_as£π_ö°™˚_
);

124 
boﬁ
 
suc˚ss
 = 
this
->
	`£nd_c›y
(
glo_as£π_mesßge
.
	`gë_id
(), 
√xt_as£π_ö°™˚_
);

125 
√xt_as£π_ö°™˚_
 = (√xt_as£π_ö°™˚_ % 
glo_as£π_mesßge
.
	`gë_num_ö°™˚s
()) + 1;

126  
suc˚ss
;

127 
	}
}

130 
boﬁ
 
	gTñemërySídTask
::
	$h™dÀ
(
glo_debug_mesßge_t
 & 
mesßge
)

132 
mesßge
.
vÆid
 = 
åue
;

133 
glo_debug_mesßge
.
	`publish
(&
mesßge
, 
√xt_debug_ö°™˚_
);

134 
boﬁ
 
suc˚ss
 = 
this
->
	`£nd_c›y
(
glo_debug_mesßge
.
	`gë_id
(), 
√xt_debug_ö°™˚_
);

135 
√xt_debug_ö°™˚_
 = (√xt_debug_ö°™˚_ % 
glo_debug_mesßge
.
	`gë_num_ö°™˚s
()) + 1;

136  
suc˚ss
;

137 
	}
}

140 
boﬁ
 
	gTñemërySídTask
::
	$h™dÀ
(
glo_èsk_timög_t
 c⁄° & 
timög
)

142 
glo_èsk_timög
.
	`publish
(&
timög
);

143  
this
->
	`£nd_c›y
(
glo_èsk_timög
.
	`gë_id
());

144 
	}
}

	@
1
.
0
139
13704
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version\include\robot_settings.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version\source\main.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\embitz_projects\eeva_full_version\source\robot_settings.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\globs.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_base.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_constants.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_template.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\glob_types.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\globs\include\globs.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\linker\stm32f407ve_flash.ld
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\linker\stm32f407ve_sram.ld
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\exception_handlers.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\include\stm32f4xx.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\include\stm32f4xx_conf.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\include\system_stm32f4xx.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\pre_main_setup.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\startup_stm32f4xx.S
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\hardware_config\system\system_stm32f4xx_eeva_revD.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\arm_common_tables.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\arm_math.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cm4.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cm4_simd.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cmFunc.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\cmsis\core_cmInstr.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\glo_rx_link.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\glo_tx_link.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\include\glo_rx_link.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\glo_link\include\glo_tx_link.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\misc.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_adc.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_dma.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_exti.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_flash.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_gpio.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_pwr.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_rcc.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_rtc.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_spi.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_syscfg.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_tim.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\include\stm32f4xx_usart.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\misc.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_adc.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_dma.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_exti.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_flash.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_gpio.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_pwr.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_rcc.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_rtc.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_spi.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_syscfg.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_tim.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\spl\source\stm32f4xx_usart.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\analog_in.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\bootloader_init.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\complementary_filter.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\coordinate_conversions.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\crc.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\debug_printf.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\derivative_filter.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\digital_in.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\digital_out.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\dma_rx.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\dma_tx.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\encoder.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\green_leds.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\analog_in.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\bootloader_init.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\complementary_filter.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\coordinate_conversions.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\crc.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\debug_printf.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\derivative_filter.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\digital_in.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\digital_out.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\dma_rx.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\dma_tx.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\encoder.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\green_leds.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\math_util.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\mpu6000.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\physical_constants.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\pid_controller.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\pwm_out_advanced_timer.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\simple_array.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\six_point_sensor_cal.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\spi.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\system_timer.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\tb6612fng.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\trigtables.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\usart.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\user_leds.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\user_pb.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\include\util_assert.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\mpu6000.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\pid_controller.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\pwm_out_advanced_timer.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\six_point_sensor_cal.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\spi.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\system_timer.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\tb6612fng.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\trigtables.c
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\usart.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\user_leds.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\user_pb.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\libraries\util\util_assert.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\balance_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\custom_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiment_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiments\experiment1_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiments\experiment2_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\experiments\experiment3_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\horizontal_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\line_following_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\modes\race_mode.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\periodic_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\queue.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\queued_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\scheduler.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\include\task_ids.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\periodic_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\scheduler.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\scheduler\task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\complementary_filter_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\complementary_filter_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\leds_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\main_control_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\modes_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\status_update_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\telemetry_receive_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\include\telemetry_send_task.h
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\leds_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\main_control_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\modes_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\status_update_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\telemetry_receive_task.cpp
C:\Users\smith\OneDrive\Mechatronics\full_eeva_project\firmware\tasks\telemetry_send_task.cpp
